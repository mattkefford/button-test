
button_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000247c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002604  08002604  00012604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002634  08002634  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  08002634  08002634  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002634  08002634  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002634  08002634  00012634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002638  08002638  00012638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  0800263c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000050  0800268c  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  0800268c  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009665  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001515  00000000  00000000  000296e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000978  00000000  00000000  0002ac00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008c0  00000000  00000000  0002b578  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019063  00000000  00000000  0002be38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000074ed  00000000  00000000  00044e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00093c61  00000000  00000000  0004c388  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dffe9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026bc  00000000  00000000  000e0064  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000050 	.word	0x20000050
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080025ec 	.word	0x080025ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000054 	.word	0x20000054
 80001c4:	080025ec 	.word	0x080025ec

080001c8 <button_has_event>:
#endif



uint8_t button_has_event(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
   return prv_buttonEventPending;
 80001cc:	4b03      	ldr	r3, [pc, #12]	; (80001dc <button_has_event+0x14>)
 80001ce:	781b      	ldrb	r3, [r3, #0]
}
 80001d0:	4618      	mov	r0, r3
 80001d2:	46bd      	mov	sp, r7
 80001d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	2000006e 	.word	0x2000006e

080001e0 <button_get_press_count>:

uint8_t button_get_press_count(void)
{
 80001e0:	b480      	push	{r7}
 80001e2:	af00      	add	r7, sp, #0
   prv_buttonEventPending = 0;
 80001e4:	4b04      	ldr	r3, [pc, #16]	; (80001f8 <button_get_press_count+0x18>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	701a      	strb	r2, [r3, #0]
   return prv_lastButtonCount;
 80001ea:	4b04      	ldr	r3, [pc, #16]	; (80001fc <button_get_press_count+0x1c>)
 80001ec:	781b      	ldrb	r3, [r3, #0]
}
 80001ee:	4618      	mov	r0, r3
 80001f0:	46bd      	mov	sp, r7
 80001f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f6:	4770      	bx	lr
 80001f8:	2000006e 	.word	0x2000006e
 80001fc:	2000006d 	.word	0x2000006d

08000200 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	4603      	mov	r3, r0
 8000208:	80fb      	strh	r3, [r7, #6]
   if(GPIO_Pin == BLUE_BUTTON_Pin && prv_firstEdge)
 800020a:	88fb      	ldrh	r3, [r7, #6]
 800020c:	2b01      	cmp	r3, #1
 800020e:	d125      	bne.n	800025c <HAL_GPIO_EXTI_Callback+0x5c>
 8000210:	4b14      	ldr	r3, [pc, #80]	; (8000264 <HAL_GPIO_EXTI_Callback+0x64>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d021      	beq.n	800025c <HAL_GPIO_EXTI_Callback+0x5c>
   {
      prv_firstEdge = 0;
 8000218:	4b12      	ldr	r3, [pc, #72]	; (8000264 <HAL_GPIO_EXTI_Callback+0x64>)
 800021a:	2200      	movs	r2, #0
 800021c:	701a      	strb	r2, [r3, #0]
      HAL_TIM_Base_Start_IT(&htim7);
 800021e:	4812      	ldr	r0, [pc, #72]	; (8000268 <HAL_GPIO_EXTI_Callback+0x68>)
 8000220:	f001 feee 	bl	8002000 <HAL_TIM_Base_Start_IT>

#ifdef DEBUG
      HAL_GPIO_TogglePin(leds[ledCount].port, leds[ledCount].pin);
 8000224:	4b11      	ldr	r3, [pc, #68]	; (800026c <HAL_GPIO_EXTI_Callback+0x6c>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	461a      	mov	r2, r3
 800022a:	4b11      	ldr	r3, [pc, #68]	; (8000270 <HAL_GPIO_EXTI_Callback+0x70>)
 800022c:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8000230:	4b0e      	ldr	r3, [pc, #56]	; (800026c <HAL_GPIO_EXTI_Callback+0x6c>)
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	4a0e      	ldr	r2, [pc, #56]	; (8000270 <HAL_GPIO_EXTI_Callback+0x70>)
 8000236:	00db      	lsls	r3, r3, #3
 8000238:	4413      	add	r3, r2
 800023a:	889b      	ldrh	r3, [r3, #4]
 800023c:	4619      	mov	r1, r3
 800023e:	f000 fd93 	bl	8000d68 <HAL_GPIO_TogglePin>
      ledCount++;
 8000242:	4b0a      	ldr	r3, [pc, #40]	; (800026c <HAL_GPIO_EXTI_Callback+0x6c>)
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	3301      	adds	r3, #1
 8000248:	b2da      	uxtb	r2, r3
 800024a:	4b08      	ldr	r3, [pc, #32]	; (800026c <HAL_GPIO_EXTI_Callback+0x6c>)
 800024c:	701a      	strb	r2, [r3, #0]
      if(ledCount >= 8)
 800024e:	4b07      	ldr	r3, [pc, #28]	; (800026c <HAL_GPIO_EXTI_Callback+0x6c>)
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	2b07      	cmp	r3, #7
 8000254:	d902      	bls.n	800025c <HAL_GPIO_EXTI_Callback+0x5c>
      {
         ledCount = 0;
 8000256:	4b05      	ldr	r3, [pc, #20]	; (800026c <HAL_GPIO_EXTI_Callback+0x6c>)
 8000258:	2200      	movs	r2, #0
 800025a:	701a      	strb	r2, [r3, #0]
      }
#endif
   }
}
 800025c:	bf00      	nop
 800025e:	3708      	adds	r7, #8
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	20000000 	.word	0x20000000
 8000268:	200000b0 	.word	0x200000b0
 800026c:	2000006f 	.word	0x2000006f
 8000270:	20000004 	.word	0x20000004

08000274 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
   if(htim->Instance == TIM7)    // Short Delay Timer
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a1a      	ldr	r2, [pc, #104]	; (80002ec <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d116      	bne.n	80002b4 <HAL_TIM_PeriodElapsedCallback+0x40>
   {
      // may be first button press or a subsequent button press so stop both timers
      HAL_TIM_Base_Stop_IT(&htim7);
 8000286:	481a      	ldr	r0, [pc, #104]	; (80002f0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000288:	f001 fee4 	bl	8002054 <HAL_TIM_Base_Stop_IT>
      HAL_TIM_Base_Stop_IT(&htim16);
 800028c:	4819      	ldr	r0, [pc, #100]	; (80002f4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800028e:	f001 fee1 	bl	8002054 <HAL_TIM_Base_Stop_IT>

      // allow interrupts to be detected again by a new button press
      prv_firstEdge = 1;
 8000292:	4b19      	ldr	r3, [pc, #100]	; (80002f8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000294:	2201      	movs	r2, #1
 8000296:	701a      	strb	r2, [r3, #0]

      prv_buttonPressCount++;
 8000298:	4b18      	ldr	r3, [pc, #96]	; (80002fc <HAL_TIM_PeriodElapsedCallback+0x88>)
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	3301      	adds	r3, #1
 800029e:	b2da      	uxtb	r2, r3
 80002a0:	4b16      	ldr	r3, [pc, #88]	; (80002fc <HAL_TIM_PeriodElapsedCallback+0x88>)
 80002a2:	701a      	strb	r2, [r3, #0]

      // reset long timer and wait for another button press or timeout
      __HAL_TIM_SET_COUNTER(&htim16, 0);
 80002a4:	4b13      	ldr	r3, [pc, #76]	; (80002f4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	2200      	movs	r2, #0
 80002aa:	625a      	str	r2, [r3, #36]	; 0x24
      HAL_TIM_Base_Start_IT(&htim16);
 80002ac:	4811      	ldr	r0, [pc, #68]	; (80002f4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80002ae:	f001 fea7 	bl	8002000 <HAL_TIM_Base_Start_IT>

//#ifdef DEBUG
      HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
//#endif
   }
}
 80002b2:	e016      	b.n	80002e2 <HAL_TIM_PeriodElapsedCallback+0x6e>
   else if(htim->Instance == TIM16)    // Long Delay Timer
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a11      	ldr	r2, [pc, #68]	; (8000300 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d111      	bne.n	80002e2 <HAL_TIM_PeriodElapsedCallback+0x6e>
      HAL_TIM_Base_Stop_IT(&htim16);
 80002be:	480d      	ldr	r0, [pc, #52]	; (80002f4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80002c0:	f001 fec8 	bl	8002054 <HAL_TIM_Base_Stop_IT>
      prv_lastButtonCount = prv_buttonPressCount;
 80002c4:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <HAL_TIM_PeriodElapsedCallback+0x88>)
 80002c6:	781a      	ldrb	r2, [r3, #0]
 80002c8:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80002ca:	701a      	strb	r2, [r3, #0]
      prv_buttonPressCount = 0;
 80002cc:	4b0b      	ldr	r3, [pc, #44]	; (80002fc <HAL_TIM_PeriodElapsedCallback+0x88>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	701a      	strb	r2, [r3, #0]
      prv_buttonEventPending = 1;
 80002d2:	4b0d      	ldr	r3, [pc, #52]	; (8000308 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80002d4:	2201      	movs	r2, #1
 80002d6:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80002d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002dc:	480b      	ldr	r0, [pc, #44]	; (800030c <HAL_TIM_PeriodElapsedCallback+0x98>)
 80002de:	f000 fd43 	bl	8000d68 <HAL_GPIO_TogglePin>
}
 80002e2:	bf00      	nop
 80002e4:	3708      	adds	r7, #8
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	40001400 	.word	0x40001400
 80002f0:	200000b0 	.word	0x200000b0
 80002f4:	20000070 	.word	0x20000070
 80002f8:	20000000 	.word	0x20000000
 80002fc:	2000006c 	.word	0x2000006c
 8000300:	40014400 	.word	0x40014400
 8000304:	2000006d 	.word	0x2000006d
 8000308:	2000006e 	.word	0x2000006e
 800030c:	48001000 	.word	0x48001000

08000310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000316:	f000 fa1d 	bl	8000754 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031a:	f000 f816 	bl	800034a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031e:	f000 f8bd 	bl	800049c <MX_GPIO_Init>
  MX_TIM7_Init();
 8000322:	f000 f853 	bl	80003cc <MX_TIM7_Init>
  MX_TIM16_Init();
 8000326:	f000 f88d 	bl	8000444 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  uint8_t numberOfPresses = 0;
 800032a:	2300      	movs	r3, #0
 800032c:	71fb      	strb	r3, [r7, #7]
  uint8_t dummy = 0;
 800032e:	2300      	movs	r3, #0
 8000330:	71bb      	strb	r3, [r7, #6]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if(button_has_event())
 8000332:	f7ff ff49 	bl	80001c8 <button_has_event>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d0fa      	beq.n	8000332 <main+0x22>
    {
       numberOfPresses = button_get_press_count();
 800033c:	f7ff ff50 	bl	80001e0 <button_get_press_count>
 8000340:	4603      	mov	r3, r0
 8000342:	71fb      	strb	r3, [r7, #7]

       dummy = numberOfPresses;
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	71bb      	strb	r3, [r7, #6]
    if(button_has_event())
 8000348:	e7f3      	b.n	8000332 <main+0x22>

0800034a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800034a:	b580      	push	{r7, lr}
 800034c:	b090      	sub	sp, #64	; 0x40
 800034e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000350:	f107 0318 	add.w	r3, r7, #24
 8000354:	2228      	movs	r2, #40	; 0x28
 8000356:	2100      	movs	r1, #0
 8000358:	4618      	mov	r0, r3
 800035a:	f002 f93f 	bl	80025dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
 8000364:	605a      	str	r2, [r3, #4]
 8000366:	609a      	str	r2, [r3, #8]
 8000368:	60da      	str	r2, [r3, #12]
 800036a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800036c:	2302      	movs	r3, #2
 800036e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000370:	2301      	movs	r3, #1
 8000372:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000374:	2310      	movs	r3, #16
 8000376:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000378:	2302      	movs	r3, #2
 800037a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800037c:	2300      	movs	r3, #0
 800037e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000380:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000384:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000386:	f107 0318 	add.w	r3, r7, #24
 800038a:	4618      	mov	r0, r3
 800038c:	f000 fd1e 	bl	8000dcc <HAL_RCC_OscConfig>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000396:	f000 f8e5 	bl	8000564 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800039a:	230f      	movs	r3, #15
 800039c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800039e:	2302      	movs	r3, #2
 80003a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ac:	2300      	movs	r3, #0
 80003ae:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	2101      	movs	r1, #1
 80003b4:	4618      	mov	r0, r3
 80003b6:	f001 fc11 	bl	8001bdc <HAL_RCC_ClockConfig>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80003c0:	f000 f8d0 	bl	8000564 <Error_Handler>
  }
}
 80003c4:	bf00      	nop
 80003c6:	3740      	adds	r7, #64	; 0x40
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}

080003cc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	2200      	movs	r2, #0
 80003d6:	601a      	str	r2, [r3, #0]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80003dc:	4b17      	ldr	r3, [pc, #92]	; (800043c <MX_TIM7_Init+0x70>)
 80003de:	4a18      	ldr	r2, [pc, #96]	; (8000440 <MX_TIM7_Init+0x74>)
 80003e0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7;
 80003e2:	4b16      	ldr	r3, [pc, #88]	; (800043c <MX_TIM7_Init+0x70>)
 80003e4:	2207      	movs	r2, #7
 80003e6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e8:	4b14      	ldr	r3, [pc, #80]	; (800043c <MX_TIM7_Init+0x70>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 59999;
 80003ee:	4b13      	ldr	r3, [pc, #76]	; (800043c <MX_TIM7_Init+0x70>)
 80003f0:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80003f4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003f6:	4b11      	ldr	r3, [pc, #68]	; (800043c <MX_TIM7_Init+0x70>)
 80003f8:	2280      	movs	r2, #128	; 0x80
 80003fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80003fc:	480f      	ldr	r0, [pc, #60]	; (800043c <MX_TIM7_Init+0x70>)
 80003fe:	f001 fdd3 	bl	8001fa8 <HAL_TIM_Base_Init>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000408:	f000 f8ac 	bl	8000564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800040c:	2300      	movs	r3, #0
 800040e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000410:	2300      	movs	r3, #0
 8000412:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	4619      	mov	r1, r3
 8000418:	4808      	ldr	r0, [pc, #32]	; (800043c <MX_TIM7_Init+0x70>)
 800041a:	f002 f81d 	bl	8002458 <HAL_TIMEx_MasterConfigSynchronization>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000424:	f000 f89e 	bl	8000564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  //HAL_TIM_Base_Start_IT(&htim7);
  __HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
 8000428:	4b04      	ldr	r3, [pc, #16]	; (800043c <MX_TIM7_Init+0x70>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	f06f 0201 	mvn.w	r2, #1
 8000430:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM7_Init 2 */

}
 8000432:	bf00      	nop
 8000434:	3710      	adds	r7, #16
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	200000b0 	.word	0x200000b0
 8000440:	40001400 	.word	0x40001400

08000444 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <MX_TIM16_Init+0x50>)
 800044a:	4a13      	ldr	r2, [pc, #76]	; (8000498 <MX_TIM16_Init+0x54>)
 800044c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 599;
 800044e:	4b11      	ldr	r3, [pc, #68]	; (8000494 <MX_TIM16_Init+0x50>)
 8000450:	f240 2257 	movw	r2, #599	; 0x257
 8000454:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000456:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <MX_TIM16_Init+0x50>)
 8000458:	2200      	movs	r2, #0
 800045a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 59999;
 800045c:	4b0d      	ldr	r3, [pc, #52]	; (8000494 <MX_TIM16_Init+0x50>)
 800045e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000462:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000464:	4b0b      	ldr	r3, [pc, #44]	; (8000494 <MX_TIM16_Init+0x50>)
 8000466:	2200      	movs	r2, #0
 8000468:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800046a:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <MX_TIM16_Init+0x50>)
 800046c:	2200      	movs	r2, #0
 800046e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000470:	4b08      	ldr	r3, [pc, #32]	; (8000494 <MX_TIM16_Init+0x50>)
 8000472:	2280      	movs	r2, #128	; 0x80
 8000474:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000476:	4807      	ldr	r0, [pc, #28]	; (8000494 <MX_TIM16_Init+0x50>)
 8000478:	f001 fd96 	bl	8001fa8 <HAL_TIM_Base_Init>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000482:	f000 f86f 	bl	8000564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  __HAL_TIM_CLEAR_FLAG(&htim16, TIM_FLAG_UPDATE);
 8000486:	4b03      	ldr	r3, [pc, #12]	; (8000494 <MX_TIM16_Init+0x50>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	f06f 0201 	mvn.w	r2, #1
 800048e:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM16_Init 2 */

}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}
 8000494:	20000070 	.word	0x20000070
 8000498:	40014400 	.word	0x40014400

0800049c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b088      	sub	sp, #32
 80004a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a2:	f107 030c 	add.w	r3, r7, #12
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]
 80004b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b2:	4b29      	ldr	r3, [pc, #164]	; (8000558 <MX_GPIO_Init+0xbc>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	4a28      	ldr	r2, [pc, #160]	; (8000558 <MX_GPIO_Init+0xbc>)
 80004b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004bc:	6153      	str	r3, [r2, #20]
 80004be:	4b26      	ldr	r3, [pc, #152]	; (8000558 <MX_GPIO_Init+0xbc>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004c6:	60bb      	str	r3, [r7, #8]
 80004c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004ca:	4b23      	ldr	r3, [pc, #140]	; (8000558 <MX_GPIO_Init+0xbc>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	4a22      	ldr	r2, [pc, #136]	; (8000558 <MX_GPIO_Init+0xbc>)
 80004d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004d4:	6153      	str	r3, [r2, #20]
 80004d6:	4b20      	ldr	r3, [pc, #128]	; (8000558 <MX_GPIO_Init+0xbc>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e2:	4b1d      	ldr	r3, [pc, #116]	; (8000558 <MX_GPIO_Init+0xbc>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	4a1c      	ldr	r2, [pc, #112]	; (8000558 <MX_GPIO_Init+0xbc>)
 80004e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004ec:	6153      	str	r3, [r2, #20]
 80004ee:	4b1a      	ldr	r3, [pc, #104]	; (8000558 <MX_GPIO_Init+0xbc>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004f6:	603b      	str	r3, [r7, #0]
 80004f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 80004fa:	2200      	movs	r2, #0
 80004fc:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000500:	4816      	ldr	r0, [pc, #88]	; (800055c <MX_GPIO_Init+0xc0>)
 8000502:	f000 fc19 	bl	8000d38 <HAL_GPIO_WritePin>
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8000506:	2301      	movs	r3, #1
 8000508:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800050a:	4b15      	ldr	r3, [pc, #84]	; (8000560 <MX_GPIO_Init+0xc4>)
 800050c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	2300      	movs	r3, #0
 8000510:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000512:	f107 030c 	add.w	r3, r7, #12
 8000516:	4619      	mov	r1, r3
 8000518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800051c:	f000 fa92 	bl	8000a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD7_Pin
                           LD9_Pin LD10_Pin LD8_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 8000520:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000524:	60fb      	str	r3, [r7, #12]
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000526:	2301      	movs	r3, #1
 8000528:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052e:	2300      	movs	r3, #0
 8000530:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000532:	f107 030c 	add.w	r3, r7, #12
 8000536:	4619      	mov	r1, r3
 8000538:	4808      	ldr	r0, [pc, #32]	; (800055c <MX_GPIO_Init+0xc0>)
 800053a:	f000 fa83 	bl	8000a44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 1);
 800053e:	2201      	movs	r2, #1
 8000540:	2100      	movs	r1, #0
 8000542:	2006      	movs	r0, #6
 8000544:	f000 fa47 	bl	80009d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000548:	2006      	movs	r0, #6
 800054a:	f000 fa60 	bl	8000a0e <HAL_NVIC_EnableIRQ>

}
 800054e:	bf00      	nop
 8000550:	3720      	adds	r7, #32
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40021000 	.word	0x40021000
 800055c:	48001000 	.word	0x48001000
 8000560:	10110000 	.word	0x10110000

08000564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
	...

08000574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800057a:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <HAL_MspInit+0x44>)
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	4a0e      	ldr	r2, [pc, #56]	; (80005b8 <HAL_MspInit+0x44>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6193      	str	r3, [r2, #24]
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <HAL_MspInit+0x44>)
 8000588:	699b      	ldr	r3, [r3, #24]
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <HAL_MspInit+0x44>)
 8000594:	69db      	ldr	r3, [r3, #28]
 8000596:	4a08      	ldr	r2, [pc, #32]	; (80005b8 <HAL_MspInit+0x44>)
 8000598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059c:	61d3      	str	r3, [r2, #28]
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <HAL_MspInit+0x44>)
 80005a0:	69db      	ldr	r3, [r3, #28]
 80005a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a6:	603b      	str	r3, [r7, #0]
 80005a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80005aa:	2007      	movs	r0, #7
 80005ac:	f000 fa08 	bl	80009c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40021000 	.word	0x40021000

080005bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a1a      	ldr	r2, [pc, #104]	; (8000634 <HAL_TIM_Base_MspInit+0x78>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d114      	bne.n	80005f8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80005ce:	4b1a      	ldr	r3, [pc, #104]	; (8000638 <HAL_TIM_Base_MspInit+0x7c>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	4a19      	ldr	r2, [pc, #100]	; (8000638 <HAL_TIM_Base_MspInit+0x7c>)
 80005d4:	f043 0320 	orr.w	r3, r3, #32
 80005d8:	61d3      	str	r3, [r2, #28]
 80005da:	4b17      	ldr	r3, [pc, #92]	; (8000638 <HAL_TIM_Base_MspInit+0x7c>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	f003 0320 	and.w	r3, r3, #32
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	2037      	movs	r0, #55	; 0x37
 80005ec:	f000 f9f3 	bl	80009d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80005f0:	2037      	movs	r0, #55	; 0x37
 80005f2:	f000 fa0c 	bl	8000a0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80005f6:	e018      	b.n	800062a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM16)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a0f      	ldr	r2, [pc, #60]	; (800063c <HAL_TIM_Base_MspInit+0x80>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d113      	bne.n	800062a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000602:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <HAL_TIM_Base_MspInit+0x7c>)
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	4a0c      	ldr	r2, [pc, #48]	; (8000638 <HAL_TIM_Base_MspInit+0x7c>)
 8000608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060c:	6193      	str	r3, [r2, #24]
 800060e:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <HAL_TIM_Base_MspInit+0x7c>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2100      	movs	r1, #0
 800061e:	2019      	movs	r0, #25
 8000620:	f000 f9d9 	bl	80009d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000624:	2019      	movs	r0, #25
 8000626:	f000 f9f2 	bl	8000a0e <HAL_NVIC_EnableIRQ>
}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40001400 	.word	0x40001400
 8000638:	40021000 	.word	0x40021000
 800063c:	40014400 	.word	0x40014400

08000640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr

0800064e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064e:	b480      	push	{r7}
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000652:	e7fe      	b.n	8000652 <HardFault_Handler+0x4>

08000654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <MemManage_Handler+0x4>

0800065a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800065e:	e7fe      	b.n	800065e <BusFault_Handler+0x4>

08000660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <UsageFault_Handler+0x4>

08000666 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr

08000690 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000694:	f000 f8a4 	bl	80007e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}

0800069c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
   //HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80006a0:	2001      	movs	r0, #1
 80006a2:	f000 fb7b 	bl	8000d9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80006b0:	4802      	ldr	r0, [pc, #8]	; (80006bc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80006b2:	f001 fcfa 	bl	80020aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000070 	.word	0x20000070

080006c0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80006c4:	4802      	ldr	r0, [pc, #8]	; (80006d0 <TIM7_IRQHandler+0x10>)
 80006c6:	f001 fcf0 	bl	80020aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	200000b0 	.word	0x200000b0

080006d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006d8:	4b08      	ldr	r3, [pc, #32]	; (80006fc <SystemInit+0x28>)
 80006da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006de:	4a07      	ldr	r2, [pc, #28]	; (80006fc <SystemInit+0x28>)
 80006e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006e8:	4b04      	ldr	r3, [pc, #16]	; (80006fc <SystemInit+0x28>)
 80006ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006ee:	609a      	str	r2, [r3, #8]
#endif
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000700:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000738 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000704:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000706:	e003      	b.n	8000710 <LoopCopyDataInit>

08000708 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800070a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800070c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800070e:	3104      	adds	r1, #4

08000710 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000710:	480b      	ldr	r0, [pc, #44]	; (8000740 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000714:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000716:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000718:	d3f6      	bcc.n	8000708 <CopyDataInit>
	ldr	r2, =_sbss
 800071a:	4a0b      	ldr	r2, [pc, #44]	; (8000748 <LoopForever+0x12>)
	b	LoopFillZerobss
 800071c:	e002      	b.n	8000724 <LoopFillZerobss>

0800071e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800071e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000720:	f842 3b04 	str.w	r3, [r2], #4

08000724 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <LoopForever+0x16>)
	cmp	r2, r3
 8000726:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000728:	d3f9      	bcc.n	800071e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800072a:	f7ff ffd3 	bl	80006d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800072e:	f001 ff31 	bl	8002594 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000732:	f7ff fded 	bl	8000310 <main>

08000736 <LoopForever>:

LoopForever:
    b LoopForever
 8000736:	e7fe      	b.n	8000736 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000738:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 800073c:	0800263c 	.word	0x0800263c
	ldr	r0, =_sdata
 8000740:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000744:	20000050 	.word	0x20000050
	ldr	r2, =_sbss
 8000748:	20000050 	.word	0x20000050
	ldr	r3, = _ebss
 800074c:	200000f4 	.word	0x200000f4

08000750 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000750:	e7fe      	b.n	8000750 <ADC1_2_IRQHandler>
	...

08000754 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <HAL_Init+0x28>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a07      	ldr	r2, [pc, #28]	; (800077c <HAL_Init+0x28>)
 800075e:	f043 0310 	orr.w	r3, r3, #16
 8000762:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000764:	2003      	movs	r0, #3
 8000766:	f000 f92b 	bl	80009c0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800076a:	2000      	movs	r0, #0
 800076c:	f000 f808 	bl	8000780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000770:	f7ff ff00 	bl	8000574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000774:	2300      	movs	r3, #0
}
 8000776:	4618      	mov	r0, r3
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40022000 	.word	0x40022000

08000780 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <HAL_InitTick+0x54>)
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <HAL_InitTick+0x58>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	4619      	mov	r1, r3
 8000792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000796:	fbb3 f3f1 	udiv	r3, r3, r1
 800079a:	fbb2 f3f3 	udiv	r3, r2, r3
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 f943 	bl	8000a2a <HAL_SYSTICK_Config>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007aa:	2301      	movs	r3, #1
 80007ac:	e00e      	b.n	80007cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2b0f      	cmp	r3, #15
 80007b2:	d80a      	bhi.n	80007ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007b4:	2200      	movs	r2, #0
 80007b6:	6879      	ldr	r1, [r7, #4]
 80007b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007bc:	f000 f90b 	bl	80009d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007c0:	4a06      	ldr	r2, [pc, #24]	; (80007dc <HAL_InitTick+0x5c>)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007c6:	2300      	movs	r3, #0
 80007c8:	e000      	b.n	80007cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ca:	2301      	movs	r3, #1
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000044 	.word	0x20000044
 80007d8:	2000004c 	.word	0x2000004c
 80007dc:	20000048 	.word	0x20000048

080007e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_IncTick+0x20>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_IncTick+0x24>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4413      	add	r3, r2
 80007f0:	4a04      	ldr	r2, [pc, #16]	; (8000804 <HAL_IncTick+0x24>)
 80007f2:	6013      	str	r3, [r2, #0]
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	2000004c 	.word	0x2000004c
 8000804:	200000f0 	.word	0x200000f0

08000808 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  return uwTick;  
 800080c:	4b03      	ldr	r3, [pc, #12]	; (800081c <HAL_GetTick+0x14>)
 800080e:	681b      	ldr	r3, [r3, #0]
}
 8000810:	4618      	mov	r0, r3
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	200000f0 	.word	0x200000f0

08000820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f003 0307 	and.w	r3, r3, #7
 800082e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <__NVIC_SetPriorityGrouping+0x44>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000836:	68ba      	ldr	r2, [r7, #8]
 8000838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800083c:	4013      	ands	r3, r2
 800083e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800084c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000852:	4a04      	ldr	r2, [pc, #16]	; (8000864 <__NVIC_SetPriorityGrouping+0x44>)
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	60d3      	str	r3, [r2, #12]
}
 8000858:	bf00      	nop
 800085a:	3714      	adds	r7, #20
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800086c:	4b04      	ldr	r3, [pc, #16]	; (8000880 <__NVIC_GetPriorityGrouping+0x18>)
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	0a1b      	lsrs	r3, r3, #8
 8000872:	f003 0307 	and.w	r3, r3, #7
}
 8000876:	4618      	mov	r0, r3
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800088e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000892:	2b00      	cmp	r3, #0
 8000894:	db0b      	blt.n	80008ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	f003 021f 	and.w	r2, r3, #31
 800089c:	4907      	ldr	r1, [pc, #28]	; (80008bc <__NVIC_EnableIRQ+0x38>)
 800089e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a2:	095b      	lsrs	r3, r3, #5
 80008a4:	2001      	movs	r0, #1
 80008a6:	fa00 f202 	lsl.w	r2, r0, r2
 80008aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000e100 	.word	0xe000e100

080008c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	6039      	str	r1, [r7, #0]
 80008ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	db0a      	blt.n	80008ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	490c      	ldr	r1, [pc, #48]	; (800090c <__NVIC_SetPriority+0x4c>)
 80008da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008de:	0112      	lsls	r2, r2, #4
 80008e0:	b2d2      	uxtb	r2, r2
 80008e2:	440b      	add	r3, r1
 80008e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008e8:	e00a      	b.n	8000900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	4908      	ldr	r1, [pc, #32]	; (8000910 <__NVIC_SetPriority+0x50>)
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	f003 030f 	and.w	r3, r3, #15
 80008f6:	3b04      	subs	r3, #4
 80008f8:	0112      	lsls	r2, r2, #4
 80008fa:	b2d2      	uxtb	r2, r2
 80008fc:	440b      	add	r3, r1
 80008fe:	761a      	strb	r2, [r3, #24]
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	e000e100 	.word	0xe000e100
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000914:	b480      	push	{r7}
 8000916:	b089      	sub	sp, #36	; 0x24
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	f003 0307 	and.w	r3, r3, #7
 8000926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	f1c3 0307 	rsb	r3, r3, #7
 800092e:	2b04      	cmp	r3, #4
 8000930:	bf28      	it	cs
 8000932:	2304      	movcs	r3, #4
 8000934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	3304      	adds	r3, #4
 800093a:	2b06      	cmp	r3, #6
 800093c:	d902      	bls.n	8000944 <NVIC_EncodePriority+0x30>
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	3b03      	subs	r3, #3
 8000942:	e000      	b.n	8000946 <NVIC_EncodePriority+0x32>
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000948:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	43da      	mvns	r2, r3
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	401a      	ands	r2, r3
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800095c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	fa01 f303 	lsl.w	r3, r1, r3
 8000966:	43d9      	mvns	r1, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800096c:	4313      	orrs	r3, r2
         );
}
 800096e:	4618      	mov	r0, r3
 8000970:	3724      	adds	r7, #36	; 0x24
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
	...

0800097c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3b01      	subs	r3, #1
 8000988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800098c:	d301      	bcc.n	8000992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800098e:	2301      	movs	r3, #1
 8000990:	e00f      	b.n	80009b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000992:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <SysTick_Config+0x40>)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3b01      	subs	r3, #1
 8000998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800099a:	210f      	movs	r1, #15
 800099c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009a0:	f7ff ff8e 	bl	80008c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <SysTick_Config+0x40>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009aa:	4b04      	ldr	r3, [pc, #16]	; (80009bc <SysTick_Config+0x40>)
 80009ac:	2207      	movs	r2, #7
 80009ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	e000e010 	.word	0xe000e010

080009c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff ff29 	bl	8000820 <__NVIC_SetPriorityGrouping>
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b086      	sub	sp, #24
 80009da:	af00      	add	r7, sp, #0
 80009dc:	4603      	mov	r3, r0
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	607a      	str	r2, [r7, #4]
 80009e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009e8:	f7ff ff3e 	bl	8000868 <__NVIC_GetPriorityGrouping>
 80009ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	68b9      	ldr	r1, [r7, #8]
 80009f2:	6978      	ldr	r0, [r7, #20]
 80009f4:	f7ff ff8e 	bl	8000914 <NVIC_EncodePriority>
 80009f8:	4602      	mov	r2, r0
 80009fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009fe:	4611      	mov	r1, r2
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ff5d 	bl	80008c0 <__NVIC_SetPriority>
}
 8000a06:	bf00      	nop
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b082      	sub	sp, #8
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	4603      	mov	r3, r0
 8000a16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ff31 	bl	8000884 <__NVIC_EnableIRQ>
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff ffa2 	bl	800097c <SysTick_Config>
 8000a38:	4603      	mov	r3, r0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b087      	sub	sp, #28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a52:	e154      	b.n	8000cfe <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	2101      	movs	r1, #1
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a60:	4013      	ands	r3, r2
 8000a62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	f000 8146 	beq.w	8000cf8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	2b02      	cmp	r3, #2
 8000a72:	d003      	beq.n	8000a7c <HAL_GPIO_Init+0x38>
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	2b12      	cmp	r3, #18
 8000a7a:	d123      	bne.n	8000ac4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	08da      	lsrs	r2, r3, #3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3208      	adds	r2, #8
 8000a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a88:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	f003 0307 	and.w	r3, r3, #7
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	220f      	movs	r2, #15
 8000a94:	fa02 f303 	lsl.w	r3, r2, r3
 8000a98:	43db      	mvns	r3, r3
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	691a      	ldr	r2, [r3, #16]
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	08da      	lsrs	r2, r3, #3
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	3208      	adds	r2, #8
 8000abe:	6939      	ldr	r1, [r7, #16]
 8000ac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	2203      	movs	r2, #3
 8000ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	4013      	ands	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f003 0203 	and.w	r2, r3, #3
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d00b      	beq.n	8000b18 <HAL_GPIO_Init+0xd4>
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	d007      	beq.n	8000b18 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b0c:	2b11      	cmp	r3, #17
 8000b0e:	d003      	beq.n	8000b18 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	2b12      	cmp	r3, #18
 8000b16:	d130      	bne.n	8000b7a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	2203      	movs	r2, #3
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	68da      	ldr	r2, [r3, #12]
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b4e:	2201      	movs	r2, #1
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43db      	mvns	r3, r3
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	091b      	lsrs	r3, r3, #4
 8000b64:	f003 0201 	and.w	r2, r3, #1
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	68db      	ldr	r3, [r3, #12]
 8000b7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	2203      	movs	r2, #3
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	689a      	ldr	r2, [r3, #8]
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	f000 80a0 	beq.w	8000cf8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb8:	4b58      	ldr	r3, [pc, #352]	; (8000d1c <HAL_GPIO_Init+0x2d8>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	4a57      	ldr	r2, [pc, #348]	; (8000d1c <HAL_GPIO_Init+0x2d8>)
 8000bbe:	f043 0301 	orr.w	r3, r3, #1
 8000bc2:	6193      	str	r3, [r2, #24]
 8000bc4:	4b55      	ldr	r3, [pc, #340]	; (8000d1c <HAL_GPIO_Init+0x2d8>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	f003 0301 	and.w	r3, r3, #1
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bd0:	4a53      	ldr	r2, [pc, #332]	; (8000d20 <HAL_GPIO_Init+0x2dc>)
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	089b      	lsrs	r3, r3, #2
 8000bd6:	3302      	adds	r3, #2
 8000bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	f003 0303 	and.w	r3, r3, #3
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	220f      	movs	r2, #15
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	43db      	mvns	r3, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bfa:	d019      	beq.n	8000c30 <HAL_GPIO_Init+0x1ec>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a49      	ldr	r2, [pc, #292]	; (8000d24 <HAL_GPIO_Init+0x2e0>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d013      	beq.n	8000c2c <HAL_GPIO_Init+0x1e8>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a48      	ldr	r2, [pc, #288]	; (8000d28 <HAL_GPIO_Init+0x2e4>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d00d      	beq.n	8000c28 <HAL_GPIO_Init+0x1e4>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a47      	ldr	r2, [pc, #284]	; (8000d2c <HAL_GPIO_Init+0x2e8>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d007      	beq.n	8000c24 <HAL_GPIO_Init+0x1e0>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a46      	ldr	r2, [pc, #280]	; (8000d30 <HAL_GPIO_Init+0x2ec>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d101      	bne.n	8000c20 <HAL_GPIO_Init+0x1dc>
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	e008      	b.n	8000c32 <HAL_GPIO_Init+0x1ee>
 8000c20:	2305      	movs	r3, #5
 8000c22:	e006      	b.n	8000c32 <HAL_GPIO_Init+0x1ee>
 8000c24:	2303      	movs	r3, #3
 8000c26:	e004      	b.n	8000c32 <HAL_GPIO_Init+0x1ee>
 8000c28:	2302      	movs	r3, #2
 8000c2a:	e002      	b.n	8000c32 <HAL_GPIO_Init+0x1ee>
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	e000      	b.n	8000c32 <HAL_GPIO_Init+0x1ee>
 8000c30:	2300      	movs	r3, #0
 8000c32:	697a      	ldr	r2, [r7, #20]
 8000c34:	f002 0203 	and.w	r2, r2, #3
 8000c38:	0092      	lsls	r2, r2, #2
 8000c3a:	4093      	lsls	r3, r2
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c42:	4937      	ldr	r1, [pc, #220]	; (8000d20 <HAL_GPIO_Init+0x2dc>)
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	089b      	lsrs	r3, r3, #2
 8000c48:	3302      	adds	r3, #2
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c50:	4b38      	ldr	r3, [pc, #224]	; (8000d34 <HAL_GPIO_Init+0x2f0>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d003      	beq.n	8000c74 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c74:	4a2f      	ldr	r2, [pc, #188]	; (8000d34 <HAL_GPIO_Init+0x2f0>)
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c7a:	4b2e      	ldr	r3, [pc, #184]	; (8000d34 <HAL_GPIO_Init+0x2f0>)
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	43db      	mvns	r3, r3
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4013      	ands	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d003      	beq.n	8000c9e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c9e:	4a25      	ldr	r2, [pc, #148]	; (8000d34 <HAL_GPIO_Init+0x2f0>)
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ca4:	4b23      	ldr	r3, [pc, #140]	; (8000d34 <HAL_GPIO_Init+0x2f0>)
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	43db      	mvns	r3, r3
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d003      	beq.n	8000cc8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cc8:	4a1a      	ldr	r2, [pc, #104]	; (8000d34 <HAL_GPIO_Init+0x2f0>)
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cce:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <HAL_GPIO_Init+0x2f0>)
 8000cd0:	68db      	ldr	r3, [r3, #12]
 8000cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d003      	beq.n	8000cf2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cf2:	4a10      	ldr	r2, [pc, #64]	; (8000d34 <HAL_GPIO_Init+0x2f0>)
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	fa22 f303 	lsr.w	r3, r2, r3
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	f47f aea3 	bne.w	8000a54 <HAL_GPIO_Init+0x10>
  }
}
 8000d0e:	bf00      	nop
 8000d10:	371c      	adds	r7, #28
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	40010000 	.word	0x40010000
 8000d24:	48000400 	.word	0x48000400
 8000d28:	48000800 	.word	0x48000800
 8000d2c:	48000c00 	.word	0x48000c00
 8000d30:	48001000 	.word	0x48001000
 8000d34:	40010400 	.word	0x40010400

08000d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	807b      	strh	r3, [r7, #2]
 8000d44:	4613      	mov	r3, r2
 8000d46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d48:	787b      	ldrb	r3, [r7, #1]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d003      	beq.n	8000d56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d4e:	887a      	ldrh	r2, [r7, #2]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d54:	e002      	b.n	8000d5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d56:	887a      	ldrh	r2, [r7, #2]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	460b      	mov	r3, r1
 8000d72:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	695a      	ldr	r2, [r3, #20]
 8000d78:	887b      	ldrh	r3, [r7, #2]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d004      	beq.n	8000d8a <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000d80:	887b      	ldrh	r3, [r7, #2]
 8000d82:	041a      	lsls	r2, r3, #16
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000d88:	e002      	b.n	8000d90 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d8a:	887a      	ldrh	r2, [r7, #2]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	619a      	str	r2, [r3, #24]
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000da8:	695a      	ldr	r2, [r3, #20]
 8000daa:	88fb      	ldrh	r3, [r7, #6]
 8000dac:	4013      	ands	r3, r2
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d006      	beq.n	8000dc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000db2:	4a05      	ldr	r2, [pc, #20]	; (8000dc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000db4:	88fb      	ldrh	r3, [r7, #6]
 8000db6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000db8:	88fb      	ldrh	r3, [r7, #6]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fa20 	bl	8000200 <HAL_GPIO_EXTI_Callback>
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40010400 	.word	0x40010400

08000dcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d102      	bne.n	8000de6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	f000 bef4 	b.w	8001bce <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	f000 816a 	beq.w	80010ca <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000df6:	4bb3      	ldr	r3, [pc, #716]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f003 030c 	and.w	r3, r3, #12
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	d00c      	beq.n	8000e1c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e02:	4bb0      	ldr	r3, [pc, #704]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f003 030c 	and.w	r3, r3, #12
 8000e0a:	2b08      	cmp	r3, #8
 8000e0c:	d159      	bne.n	8000ec2 <HAL_RCC_OscConfig+0xf6>
 8000e0e:	4bad      	ldr	r3, [pc, #692]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e1a:	d152      	bne.n	8000ec2 <HAL_RCC_OscConfig+0xf6>
 8000e1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e20:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e24:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000e28:	fa93 f3a3 	rbit	r3, r3
 8000e2c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e30:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e34:	fab3 f383 	clz	r3, r3
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	095b      	lsrs	r3, r3, #5
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d102      	bne.n	8000e4e <HAL_RCC_OscConfig+0x82>
 8000e48:	4b9e      	ldr	r3, [pc, #632]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	e015      	b.n	8000e7a <HAL_RCC_OscConfig+0xae>
 8000e4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e52:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e56:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000e5a:	fa93 f3a3 	rbit	r3, r3
 8000e5e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e66:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e6a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000e6e:	fa93 f3a3 	rbit	r3, r3
 8000e72:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000e76:	4b93      	ldr	r3, [pc, #588]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e7e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000e82:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e86:	fa92 f2a2 	rbit	r2, r2
 8000e8a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000e8e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000e92:	fab2 f282 	clz	r2, r2
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	f042 0220 	orr.w	r2, r2, #32
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	f002 021f 	and.w	r2, r2, #31
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f000 810c 	beq.w	80010c8 <HAL_RCC_OscConfig+0x2fc>
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	f040 8106 	bne.w	80010c8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	f000 be86 	b.w	8001bce <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ecc:	d106      	bne.n	8000edc <HAL_RCC_OscConfig+0x110>
 8000ece:	4b7d      	ldr	r3, [pc, #500]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a7c      	ldr	r2, [pc, #496]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ed8:	6013      	str	r3, [r2, #0]
 8000eda:	e030      	b.n	8000f3e <HAL_RCC_OscConfig+0x172>
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d10c      	bne.n	8000f00 <HAL_RCC_OscConfig+0x134>
 8000ee6:	4b77      	ldr	r3, [pc, #476]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a76      	ldr	r2, [pc, #472]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000eec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ef0:	6013      	str	r3, [r2, #0]
 8000ef2:	4b74      	ldr	r3, [pc, #464]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a73      	ldr	r2, [pc, #460]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000ef8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	e01e      	b.n	8000f3e <HAL_RCC_OscConfig+0x172>
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f0a:	d10c      	bne.n	8000f26 <HAL_RCC_OscConfig+0x15a>
 8000f0c:	4b6d      	ldr	r3, [pc, #436]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a6c      	ldr	r2, [pc, #432]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000f12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	4b6a      	ldr	r3, [pc, #424]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a69      	ldr	r2, [pc, #420]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000f1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	e00b      	b.n	8000f3e <HAL_RCC_OscConfig+0x172>
 8000f26:	4b67      	ldr	r3, [pc, #412]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a66      	ldr	r2, [pc, #408]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f30:	6013      	str	r3, [r2, #0]
 8000f32:	4b64      	ldr	r3, [pc, #400]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a63      	ldr	r2, [pc, #396]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000f38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f3c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f3e:	4b61      	ldr	r3, [pc, #388]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f42:	f023 020f 	bic.w	r2, r3, #15
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	495d      	ldr	r1, [pc, #372]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d059      	beq.n	8001010 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f5c:	f7ff fc54 	bl	8000808 <HAL_GetTick>
 8000f60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f64:	e00a      	b.n	8000f7c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f66:	f7ff fc4f 	bl	8000808 <HAL_GetTick>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	2b64      	cmp	r3, #100	; 0x64
 8000f74:	d902      	bls.n	8000f7c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000f76:	2303      	movs	r3, #3
 8000f78:	f000 be29 	b.w	8001bce <HAL_RCC_OscConfig+0xe02>
 8000f7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f80:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f84:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000f88:	fa93 f3a3 	rbit	r3, r3
 8000f8c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000f90:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f94:	fab3 f383 	clz	r3, r3
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	095b      	lsrs	r3, r3, #5
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d102      	bne.n	8000fae <HAL_RCC_OscConfig+0x1e2>
 8000fa8:	4b46      	ldr	r3, [pc, #280]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	e015      	b.n	8000fda <HAL_RCC_OscConfig+0x20e>
 8000fae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fb2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000fba:	fa93 f3a3 	rbit	r3, r3
 8000fbe:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000fc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fc6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000fca:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000fce:	fa93 f3a3 	rbit	r3, r3
 8000fd2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000fd6:	4b3b      	ldr	r3, [pc, #236]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fde:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000fe2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000fe6:	fa92 f2a2 	rbit	r2, r2
 8000fea:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000fee:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000ff2:	fab2 f282 	clz	r2, r2
 8000ff6:	b2d2      	uxtb	r2, r2
 8000ff8:	f042 0220 	orr.w	r2, r2, #32
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	f002 021f 	and.w	r2, r2, #31
 8001002:	2101      	movs	r1, #1
 8001004:	fa01 f202 	lsl.w	r2, r1, r2
 8001008:	4013      	ands	r3, r2
 800100a:	2b00      	cmp	r3, #0
 800100c:	d0ab      	beq.n	8000f66 <HAL_RCC_OscConfig+0x19a>
 800100e:	e05c      	b.n	80010ca <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001010:	f7ff fbfa 	bl	8000808 <HAL_GetTick>
 8001014:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001018:	e00a      	b.n	8001030 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800101a:	f7ff fbf5 	bl	8000808 <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b64      	cmp	r3, #100	; 0x64
 8001028:	d902      	bls.n	8001030 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	f000 bdcf 	b.w	8001bce <HAL_RCC_OscConfig+0xe02>
 8001030:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001034:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001038:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800103c:	fa93 f3a3 	rbit	r3, r3
 8001040:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001044:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001048:	fab3 f383 	clz	r3, r3
 800104c:	b2db      	uxtb	r3, r3
 800104e:	095b      	lsrs	r3, r3, #5
 8001050:	b2db      	uxtb	r3, r3
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b01      	cmp	r3, #1
 800105a:	d102      	bne.n	8001062 <HAL_RCC_OscConfig+0x296>
 800105c:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	e015      	b.n	800108e <HAL_RCC_OscConfig+0x2c2>
 8001062:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001066:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800106e:	fa93 f3a3 	rbit	r3, r3
 8001072:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001076:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800107a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800107e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001082:	fa93 f3a3 	rbit	r3, r3
 8001086:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 800108c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001092:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001096:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800109a:	fa92 f2a2 	rbit	r2, r2
 800109e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80010a2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80010a6:	fab2 f282 	clz	r2, r2
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	f042 0220 	orr.w	r2, r2, #32
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	f002 021f 	and.w	r2, r2, #31
 80010b6:	2101      	movs	r1, #1
 80010b8:	fa01 f202 	lsl.w	r2, r1, r2
 80010bc:	4013      	ands	r3, r2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1ab      	bne.n	800101a <HAL_RCC_OscConfig+0x24e>
 80010c2:	e002      	b.n	80010ca <HAL_RCC_OscConfig+0x2fe>
 80010c4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 816f 	beq.w	80013b8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010da:	4bd0      	ldr	r3, [pc, #832]	; (800141c <HAL_RCC_OscConfig+0x650>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 030c 	and.w	r3, r3, #12
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d00b      	beq.n	80010fe <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010e6:	4bcd      	ldr	r3, [pc, #820]	; (800141c <HAL_RCC_OscConfig+0x650>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 030c 	and.w	r3, r3, #12
 80010ee:	2b08      	cmp	r3, #8
 80010f0:	d16c      	bne.n	80011cc <HAL_RCC_OscConfig+0x400>
 80010f2:	4bca      	ldr	r3, [pc, #808]	; (800141c <HAL_RCC_OscConfig+0x650>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d166      	bne.n	80011cc <HAL_RCC_OscConfig+0x400>
 80010fe:	2302      	movs	r3, #2
 8001100:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001104:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001108:	fa93 f3a3 	rbit	r3, r3
 800110c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001110:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001114:	fab3 f383 	clz	r3, r3
 8001118:	b2db      	uxtb	r3, r3
 800111a:	095b      	lsrs	r3, r3, #5
 800111c:	b2db      	uxtb	r3, r3
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b01      	cmp	r3, #1
 8001126:	d102      	bne.n	800112e <HAL_RCC_OscConfig+0x362>
 8001128:	4bbc      	ldr	r3, [pc, #752]	; (800141c <HAL_RCC_OscConfig+0x650>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	e013      	b.n	8001156 <HAL_RCC_OscConfig+0x38a>
 800112e:	2302      	movs	r3, #2
 8001130:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001134:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001138:	fa93 f3a3 	rbit	r3, r3
 800113c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001140:	2302      	movs	r3, #2
 8001142:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001146:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800114a:	fa93 f3a3 	rbit	r3, r3
 800114e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001152:	4bb2      	ldr	r3, [pc, #712]	; (800141c <HAL_RCC_OscConfig+0x650>)
 8001154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001156:	2202      	movs	r2, #2
 8001158:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800115c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001160:	fa92 f2a2 	rbit	r2, r2
 8001164:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001168:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800116c:	fab2 f282 	clz	r2, r2
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	f042 0220 	orr.w	r2, r2, #32
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	f002 021f 	and.w	r2, r2, #31
 800117c:	2101      	movs	r1, #1
 800117e:	fa01 f202 	lsl.w	r2, r1, r2
 8001182:	4013      	ands	r3, r2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d007      	beq.n	8001198 <HAL_RCC_OscConfig+0x3cc>
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d002      	beq.n	8001198 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	f000 bd1b 	b.w	8001bce <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001198:	4ba0      	ldr	r3, [pc, #640]	; (800141c <HAL_RCC_OscConfig+0x650>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	21f8      	movs	r1, #248	; 0xf8
 80011a8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ac:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80011b0:	fa91 f1a1 	rbit	r1, r1
 80011b4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80011b8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80011bc:	fab1 f181 	clz	r1, r1
 80011c0:	b2c9      	uxtb	r1, r1
 80011c2:	408b      	lsls	r3, r1
 80011c4:	4995      	ldr	r1, [pc, #596]	; (800141c <HAL_RCC_OscConfig+0x650>)
 80011c6:	4313      	orrs	r3, r2
 80011c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ca:	e0f5      	b.n	80013b8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f000 8085 	beq.w	80012e2 <HAL_RCC_OscConfig+0x516>
 80011d8:	2301      	movs	r3, #1
 80011da:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011de:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80011e2:	fa93 f3a3 	rbit	r3, r3
 80011e6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80011ea:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011ee:	fab3 f383 	clz	r3, r3
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	461a      	mov	r2, r3
 8001200:	2301      	movs	r3, #1
 8001202:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001204:	f7ff fb00 	bl	8000808 <HAL_GetTick>
 8001208:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120c:	e00a      	b.n	8001224 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800120e:	f7ff fafb 	bl	8000808 <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b02      	cmp	r3, #2
 800121c:	d902      	bls.n	8001224 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	f000 bcd5 	b.w	8001bce <HAL_RCC_OscConfig+0xe02>
 8001224:	2302      	movs	r3, #2
 8001226:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800122a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800122e:	fa93 f3a3 	rbit	r3, r3
 8001232:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001236:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800123a:	fab3 f383 	clz	r3, r3
 800123e:	b2db      	uxtb	r3, r3
 8001240:	095b      	lsrs	r3, r3, #5
 8001242:	b2db      	uxtb	r3, r3
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b01      	cmp	r3, #1
 800124c:	d102      	bne.n	8001254 <HAL_RCC_OscConfig+0x488>
 800124e:	4b73      	ldr	r3, [pc, #460]	; (800141c <HAL_RCC_OscConfig+0x650>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	e013      	b.n	800127c <HAL_RCC_OscConfig+0x4b0>
 8001254:	2302      	movs	r3, #2
 8001256:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800125e:	fa93 f3a3 	rbit	r3, r3
 8001262:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001266:	2302      	movs	r3, #2
 8001268:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800126c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001270:	fa93 f3a3 	rbit	r3, r3
 8001274:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001278:	4b68      	ldr	r3, [pc, #416]	; (800141c <HAL_RCC_OscConfig+0x650>)
 800127a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127c:	2202      	movs	r2, #2
 800127e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001282:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001286:	fa92 f2a2 	rbit	r2, r2
 800128a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800128e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001292:	fab2 f282 	clz	r2, r2
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	f042 0220 	orr.w	r2, r2, #32
 800129c:	b2d2      	uxtb	r2, r2
 800129e:	f002 021f 	and.w	r2, r2, #31
 80012a2:	2101      	movs	r1, #1
 80012a4:	fa01 f202 	lsl.w	r2, r1, r2
 80012a8:	4013      	ands	r3, r2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0af      	beq.n	800120e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ae:	4b5b      	ldr	r3, [pc, #364]	; (800141c <HAL_RCC_OscConfig+0x650>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	695b      	ldr	r3, [r3, #20]
 80012bc:	21f8      	movs	r1, #248	; 0xf8
 80012be:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80012c6:	fa91 f1a1 	rbit	r1, r1
 80012ca:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80012ce:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80012d2:	fab1 f181 	clz	r1, r1
 80012d6:	b2c9      	uxtb	r1, r1
 80012d8:	408b      	lsls	r3, r1
 80012da:	4950      	ldr	r1, [pc, #320]	; (800141c <HAL_RCC_OscConfig+0x650>)
 80012dc:	4313      	orrs	r3, r2
 80012de:	600b      	str	r3, [r1, #0]
 80012e0:	e06a      	b.n	80013b8 <HAL_RCC_OscConfig+0x5ec>
 80012e2:	2301      	movs	r3, #1
 80012e4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80012ec:	fa93 f3a3 	rbit	r3, r3
 80012f0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80012f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012f8:	fab3 f383 	clz	r3, r3
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001302:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	461a      	mov	r2, r3
 800130a:	2300      	movs	r3, #0
 800130c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130e:	f7ff fa7b 	bl	8000808 <HAL_GetTick>
 8001312:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001316:	e00a      	b.n	800132e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001318:	f7ff fa76 	bl	8000808 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d902      	bls.n	800132e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	f000 bc50 	b.w	8001bce <HAL_RCC_OscConfig+0xe02>
 800132e:	2302      	movs	r3, #2
 8001330:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001334:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001338:	fa93 f3a3 	rbit	r3, r3
 800133c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001340:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001344:	fab3 f383 	clz	r3, r3
 8001348:	b2db      	uxtb	r3, r3
 800134a:	095b      	lsrs	r3, r3, #5
 800134c:	b2db      	uxtb	r3, r3
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b01      	cmp	r3, #1
 8001356:	d102      	bne.n	800135e <HAL_RCC_OscConfig+0x592>
 8001358:	4b30      	ldr	r3, [pc, #192]	; (800141c <HAL_RCC_OscConfig+0x650>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	e013      	b.n	8001386 <HAL_RCC_OscConfig+0x5ba>
 800135e:	2302      	movs	r3, #2
 8001360:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001364:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001368:	fa93 f3a3 	rbit	r3, r3
 800136c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001370:	2302      	movs	r3, #2
 8001372:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001376:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800137a:	fa93 f3a3 	rbit	r3, r3
 800137e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001382:	4b26      	ldr	r3, [pc, #152]	; (800141c <HAL_RCC_OscConfig+0x650>)
 8001384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001386:	2202      	movs	r2, #2
 8001388:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800138c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001390:	fa92 f2a2 	rbit	r2, r2
 8001394:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001398:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800139c:	fab2 f282 	clz	r2, r2
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	f042 0220 	orr.w	r2, r2, #32
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	f002 021f 	and.w	r2, r2, #31
 80013ac:	2101      	movs	r1, #1
 80013ae:	fa01 f202 	lsl.w	r2, r1, r2
 80013b2:	4013      	ands	r3, r2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1af      	bne.n	8001318 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f000 80da 	beq.w	800157c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d069      	beq.n	80014a6 <HAL_RCC_OscConfig+0x6da>
 80013d2:	2301      	movs	r3, #1
 80013d4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80013dc:	fa93 f3a3 	rbit	r3, r3
 80013e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80013e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013e8:	fab3 f383 	clz	r3, r3
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	461a      	mov	r2, r3
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <HAL_RCC_OscConfig+0x654>)
 80013f2:	4413      	add	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	461a      	mov	r2, r3
 80013f8:	2301      	movs	r3, #1
 80013fa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fc:	f7ff fa04 	bl	8000808 <HAL_GetTick>
 8001400:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001404:	e00e      	b.n	8001424 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001406:	f7ff f9ff 	bl	8000808 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d906      	bls.n	8001424 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e3d9      	b.n	8001bce <HAL_RCC_OscConfig+0xe02>
 800141a:	bf00      	nop
 800141c:	40021000 	.word	0x40021000
 8001420:	10908120 	.word	0x10908120
 8001424:	2302      	movs	r3, #2
 8001426:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800142e:	fa93 f3a3 	rbit	r3, r3
 8001432:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001436:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800143a:	2202      	movs	r2, #2
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	fa93 f2a3 	rbit	r2, r3
 8001448:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001452:	2202      	movs	r2, #2
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	fa93 f2a3 	rbit	r2, r3
 8001460:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001464:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001466:	4ba5      	ldr	r3, [pc, #660]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 8001468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800146a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800146e:	2102      	movs	r1, #2
 8001470:	6019      	str	r1, [r3, #0]
 8001472:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	fa93 f1a3 	rbit	r1, r3
 800147c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001480:	6019      	str	r1, [r3, #0]
  return result;
 8001482:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	fab3 f383 	clz	r3, r3
 800148c:	b2db      	uxtb	r3, r3
 800148e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001492:	b2db      	uxtb	r3, r3
 8001494:	f003 031f 	and.w	r3, r3, #31
 8001498:	2101      	movs	r1, #1
 800149a:	fa01 f303 	lsl.w	r3, r1, r3
 800149e:	4013      	ands	r3, r2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0b0      	beq.n	8001406 <HAL_RCC_OscConfig+0x63a>
 80014a4:	e06a      	b.n	800157c <HAL_RCC_OscConfig+0x7b0>
 80014a6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80014aa:	2201      	movs	r2, #1
 80014ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ae:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	fa93 f2a3 	rbit	r2, r3
 80014b8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80014bc:	601a      	str	r2, [r3, #0]
  return result;
 80014be:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80014c2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014c4:	fab3 f383 	clz	r3, r3
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	461a      	mov	r2, r3
 80014cc:	4b8c      	ldr	r3, [pc, #560]	; (8001700 <HAL_RCC_OscConfig+0x934>)
 80014ce:	4413      	add	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	461a      	mov	r2, r3
 80014d4:	2300      	movs	r3, #0
 80014d6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d8:	f7ff f996 	bl	8000808 <HAL_GetTick>
 80014dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e0:	e009      	b.n	80014f6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e2:	f7ff f991 	bl	8000808 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e36b      	b.n	8001bce <HAL_RCC_OscConfig+0xe02>
 80014f6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80014fa:	2202      	movs	r2, #2
 80014fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	fa93 f2a3 	rbit	r2, r3
 8001508:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001512:	2202      	movs	r2, #2
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	fa93 f2a3 	rbit	r2, r3
 8001520:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800152a:	2202      	movs	r2, #2
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	fa93 f2a3 	rbit	r2, r3
 8001538:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800153c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800153e:	4b6f      	ldr	r3, [pc, #444]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 8001540:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001542:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001546:	2102      	movs	r1, #2
 8001548:	6019      	str	r1, [r3, #0]
 800154a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	fa93 f1a3 	rbit	r1, r3
 8001554:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001558:	6019      	str	r1, [r3, #0]
  return result;
 800155a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	fab3 f383 	clz	r3, r3
 8001564:	b2db      	uxtb	r3, r3
 8001566:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800156a:	b2db      	uxtb	r3, r3
 800156c:	f003 031f 	and.w	r3, r3, #31
 8001570:	2101      	movs	r1, #1
 8001572:	fa01 f303 	lsl.w	r3, r1, r3
 8001576:	4013      	ands	r3, r2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1b2      	bne.n	80014e2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0304 	and.w	r3, r3, #4
 8001586:	2b00      	cmp	r3, #0
 8001588:	f000 8158 	beq.w	800183c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800158c:	2300      	movs	r3, #0
 800158e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001592:	4b5a      	ldr	r3, [pc, #360]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d112      	bne.n	80015c4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800159e:	4b57      	ldr	r3, [pc, #348]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	4a56      	ldr	r2, [pc, #344]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 80015a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a8:	61d3      	str	r3, [r2, #28]
 80015aa:	4b54      	ldr	r3, [pc, #336]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80015b2:	f107 0308 	add.w	r3, r7, #8
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	f107 0308 	add.w	r3, r7, #8
 80015bc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80015be:	2301      	movs	r3, #1
 80015c0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c4:	4b4f      	ldr	r3, [pc, #316]	; (8001704 <HAL_RCC_OscConfig+0x938>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d11a      	bne.n	8001606 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015d0:	4b4c      	ldr	r3, [pc, #304]	; (8001704 <HAL_RCC_OscConfig+0x938>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a4b      	ldr	r2, [pc, #300]	; (8001704 <HAL_RCC_OscConfig+0x938>)
 80015d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015da:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015dc:	f7ff f914 	bl	8000808 <HAL_GetTick>
 80015e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e4:	e009      	b.n	80015fa <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015e6:	f7ff f90f 	bl	8000808 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b64      	cmp	r3, #100	; 0x64
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e2e9      	b.n	8001bce <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fa:	4b42      	ldr	r3, [pc, #264]	; (8001704 <HAL_RCC_OscConfig+0x938>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001602:	2b00      	cmp	r3, #0
 8001604:	d0ef      	beq.n	80015e6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d106      	bne.n	800161e <HAL_RCC_OscConfig+0x852>
 8001610:	4b3a      	ldr	r3, [pc, #232]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	4a39      	ldr	r2, [pc, #228]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	6213      	str	r3, [r2, #32]
 800161c:	e02f      	b.n	800167e <HAL_RCC_OscConfig+0x8b2>
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d10c      	bne.n	8001642 <HAL_RCC_OscConfig+0x876>
 8001628:	4b34      	ldr	r3, [pc, #208]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	4a33      	ldr	r2, [pc, #204]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 800162e:	f023 0301 	bic.w	r3, r3, #1
 8001632:	6213      	str	r3, [r2, #32]
 8001634:	4b31      	ldr	r3, [pc, #196]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	4a30      	ldr	r2, [pc, #192]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 800163a:	f023 0304 	bic.w	r3, r3, #4
 800163e:	6213      	str	r3, [r2, #32]
 8001640:	e01d      	b.n	800167e <HAL_RCC_OscConfig+0x8b2>
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	2b05      	cmp	r3, #5
 800164a:	d10c      	bne.n	8001666 <HAL_RCC_OscConfig+0x89a>
 800164c:	4b2b      	ldr	r3, [pc, #172]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	4a2a      	ldr	r2, [pc, #168]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 8001652:	f043 0304 	orr.w	r3, r3, #4
 8001656:	6213      	str	r3, [r2, #32]
 8001658:	4b28      	ldr	r3, [pc, #160]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	4a27      	ldr	r2, [pc, #156]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	6213      	str	r3, [r2, #32]
 8001664:	e00b      	b.n	800167e <HAL_RCC_OscConfig+0x8b2>
 8001666:	4b25      	ldr	r3, [pc, #148]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	4a24      	ldr	r2, [pc, #144]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 800166c:	f023 0301 	bic.w	r3, r3, #1
 8001670:	6213      	str	r3, [r2, #32]
 8001672:	4b22      	ldr	r3, [pc, #136]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	4a21      	ldr	r2, [pc, #132]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 8001678:	f023 0304 	bic.w	r3, r3, #4
 800167c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d06b      	beq.n	8001760 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001688:	f7ff f8be 	bl	8000808 <HAL_GetTick>
 800168c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001690:	e00b      	b.n	80016aa <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001692:	f7ff f8b9 	bl	8000808 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e291      	b.n	8001bce <HAL_RCC_OscConfig+0xe02>
 80016aa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80016ae:	2202      	movs	r2, #2
 80016b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	fa93 f2a3 	rbit	r2, r3
 80016bc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80016c6:	2202      	movs	r2, #2
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	fa93 f2a3 	rbit	r2, r3
 80016d4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016d8:	601a      	str	r2, [r3, #0]
  return result;
 80016da:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016de:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e0:	fab3 f383 	clz	r3, r3
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	095b      	lsrs	r3, r3, #5
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	f043 0302 	orr.w	r3, r3, #2
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d109      	bne.n	8001708 <HAL_RCC_OscConfig+0x93c>
 80016f4:	4b01      	ldr	r3, [pc, #4]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	e014      	b.n	8001724 <HAL_RCC_OscConfig+0x958>
 80016fa:	bf00      	nop
 80016fc:	40021000 	.word	0x40021000
 8001700:	10908120 	.word	0x10908120
 8001704:	40007000 	.word	0x40007000
 8001708:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800170c:	2202      	movs	r2, #2
 800170e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001710:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	fa93 f2a3 	rbit	r2, r3
 800171a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	4bbb      	ldr	r3, [pc, #748]	; (8001a10 <HAL_RCC_OscConfig+0xc44>)
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001728:	2102      	movs	r1, #2
 800172a:	6011      	str	r1, [r2, #0]
 800172c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001730:	6812      	ldr	r2, [r2, #0]
 8001732:	fa92 f1a2 	rbit	r1, r2
 8001736:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800173a:	6011      	str	r1, [r2, #0]
  return result;
 800173c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001740:	6812      	ldr	r2, [r2, #0]
 8001742:	fab2 f282 	clz	r2, r2
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	f002 021f 	and.w	r2, r2, #31
 8001752:	2101      	movs	r1, #1
 8001754:	fa01 f202 	lsl.w	r2, r1, r2
 8001758:	4013      	ands	r3, r2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d099      	beq.n	8001692 <HAL_RCC_OscConfig+0x8c6>
 800175e:	e063      	b.n	8001828 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001760:	f7ff f852 	bl	8000808 <HAL_GetTick>
 8001764:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001768:	e00b      	b.n	8001782 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800176a:	f7ff f84d 	bl	8000808 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	f241 3288 	movw	r2, #5000	; 0x1388
 800177a:	4293      	cmp	r3, r2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e225      	b.n	8001bce <HAL_RCC_OscConfig+0xe02>
 8001782:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001786:	2202      	movs	r2, #2
 8001788:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	fa93 f2a3 	rbit	r2, r3
 8001794:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800179e:	2202      	movs	r2, #2
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	fa93 f2a3 	rbit	r2, r3
 80017ac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80017b0:	601a      	str	r2, [r3, #0]
  return result;
 80017b2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80017b6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b8:	fab3 f383 	clz	r3, r3
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	095b      	lsrs	r3, r3, #5
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	f043 0302 	orr.w	r3, r3, #2
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d102      	bne.n	80017d2 <HAL_RCC_OscConfig+0xa06>
 80017cc:	4b90      	ldr	r3, [pc, #576]	; (8001a10 <HAL_RCC_OscConfig+0xc44>)
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	e00d      	b.n	80017ee <HAL_RCC_OscConfig+0xa22>
 80017d2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80017d6:	2202      	movs	r2, #2
 80017d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017da:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	fa93 f2a3 	rbit	r2, r3
 80017e4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	4b89      	ldr	r3, [pc, #548]	; (8001a10 <HAL_RCC_OscConfig+0xc44>)
 80017ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ee:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80017f2:	2102      	movs	r1, #2
 80017f4:	6011      	str	r1, [r2, #0]
 80017f6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	fa92 f1a2 	rbit	r1, r2
 8001800:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001804:	6011      	str	r1, [r2, #0]
  return result;
 8001806:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800180a:	6812      	ldr	r2, [r2, #0]
 800180c:	fab2 f282 	clz	r2, r2
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	f002 021f 	and.w	r2, r2, #31
 800181c:	2101      	movs	r1, #1
 800181e:	fa01 f202 	lsl.w	r2, r1, r2
 8001822:	4013      	ands	r3, r2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1a0      	bne.n	800176a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001828:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800182c:	2b01      	cmp	r3, #1
 800182e:	d105      	bne.n	800183c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001830:	4b77      	ldr	r3, [pc, #476]	; (8001a10 <HAL_RCC_OscConfig+0xc44>)
 8001832:	69db      	ldr	r3, [r3, #28]
 8001834:	4a76      	ldr	r2, [pc, #472]	; (8001a10 <HAL_RCC_OscConfig+0xc44>)
 8001836:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800183a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 81c2 	beq.w	8001bcc <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001848:	4b71      	ldr	r3, [pc, #452]	; (8001a10 <HAL_RCC_OscConfig+0xc44>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 030c 	and.w	r3, r3, #12
 8001850:	2b08      	cmp	r3, #8
 8001852:	f000 819c 	beq.w	8001b8e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	69db      	ldr	r3, [r3, #28]
 800185c:	2b02      	cmp	r3, #2
 800185e:	f040 8114 	bne.w	8001a8a <HAL_RCC_OscConfig+0xcbe>
 8001862:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001866:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800186a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	fa93 f2a3 	rbit	r2, r3
 8001876:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800187a:	601a      	str	r2, [r3, #0]
  return result;
 800187c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001880:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001882:	fab3 f383 	clz	r3, r3
 8001886:	b2db      	uxtb	r3, r3
 8001888:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800188c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	461a      	mov	r2, r3
 8001894:	2300      	movs	r3, #0
 8001896:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001898:	f7fe ffb6 	bl	8000808 <HAL_GetTick>
 800189c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a0:	e009      	b.n	80018b6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018a2:	f7fe ffb1 	bl	8000808 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e18b      	b.n	8001bce <HAL_RCC_OscConfig+0xe02>
 80018b6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80018ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	fa93 f2a3 	rbit	r2, r3
 80018ca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018ce:	601a      	str	r2, [r3, #0]
  return result;
 80018d0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d6:	fab3 f383 	clz	r3, r3
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	095b      	lsrs	r3, r3, #5
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d102      	bne.n	80018f0 <HAL_RCC_OscConfig+0xb24>
 80018ea:	4b49      	ldr	r3, [pc, #292]	; (8001a10 <HAL_RCC_OscConfig+0xc44>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	e01b      	b.n	8001928 <HAL_RCC_OscConfig+0xb5c>
 80018f0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	fa93 f2a3 	rbit	r2, r3
 8001904:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800190e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	fa93 f2a3 	rbit	r2, r3
 800191e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	4b3a      	ldr	r3, [pc, #232]	; (8001a10 <HAL_RCC_OscConfig+0xc44>)
 8001926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001928:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800192c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001930:	6011      	str	r1, [r2, #0]
 8001932:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001936:	6812      	ldr	r2, [r2, #0]
 8001938:	fa92 f1a2 	rbit	r1, r2
 800193c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001940:	6011      	str	r1, [r2, #0]
  return result;
 8001942:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001946:	6812      	ldr	r2, [r2, #0]
 8001948:	fab2 f282 	clz	r2, r2
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	f042 0220 	orr.w	r2, r2, #32
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	f002 021f 	and.w	r2, r2, #31
 8001958:	2101      	movs	r1, #1
 800195a:	fa01 f202 	lsl.w	r2, r1, r2
 800195e:	4013      	ands	r3, r2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d19e      	bne.n	80018a2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001964:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <HAL_RCC_OscConfig+0xc44>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001972:	1d3b      	adds	r3, r7, #4
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	430b      	orrs	r3, r1
 800197a:	4925      	ldr	r1, [pc, #148]	; (8001a10 <HAL_RCC_OscConfig+0xc44>)
 800197c:	4313      	orrs	r3, r2
 800197e:	604b      	str	r3, [r1, #4]
 8001980:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001984:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001988:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	fa93 f2a3 	rbit	r2, r3
 8001994:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001998:	601a      	str	r2, [r3, #0]
  return result;
 800199a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800199e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019a0:	fab3 f383 	clz	r3, r3
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019aa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	461a      	mov	r2, r3
 80019b2:	2301      	movs	r3, #1
 80019b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b6:	f7fe ff27 	bl	8000808 <HAL_GetTick>
 80019ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019be:	e009      	b.n	80019d4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c0:	f7fe ff22 	bl	8000808 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e0fc      	b.n	8001bce <HAL_RCC_OscConfig+0xe02>
 80019d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	fa93 f2a3 	rbit	r2, r3
 80019e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019ec:	601a      	str	r2, [r3, #0]
  return result;
 80019ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019f4:	fab3 f383 	clz	r3, r3
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	095b      	lsrs	r3, r3, #5
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d105      	bne.n	8001a14 <HAL_RCC_OscConfig+0xc48>
 8001a08:	4b01      	ldr	r3, [pc, #4]	; (8001a10 <HAL_RCC_OscConfig+0xc44>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	e01e      	b.n	8001a4c <HAL_RCC_OscConfig+0xc80>
 8001a0e:	bf00      	nop
 8001a10:	40021000 	.word	0x40021000
 8001a14:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	fa93 f2a3 	rbit	r2, r3
 8001a28:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	fa93 f2a3 	rbit	r2, r3
 8001a42:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	4b63      	ldr	r3, [pc, #396]	; (8001bd8 <HAL_RCC_OscConfig+0xe0c>)
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a50:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a54:	6011      	str	r1, [r2, #0]
 8001a56:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a5a:	6812      	ldr	r2, [r2, #0]
 8001a5c:	fa92 f1a2 	rbit	r1, r2
 8001a60:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001a64:	6011      	str	r1, [r2, #0]
  return result;
 8001a66:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	fab2 f282 	clz	r2, r2
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	f042 0220 	orr.w	r2, r2, #32
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	f002 021f 	and.w	r2, r2, #31
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d09b      	beq.n	80019c0 <HAL_RCC_OscConfig+0xbf4>
 8001a88:	e0a0      	b.n	8001bcc <HAL_RCC_OscConfig+0xe00>
 8001a8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a8e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	fa93 f2a3 	rbit	r2, r3
 8001a9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa2:	601a      	str	r2, [r3, #0]
  return result;
 8001aa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aaa:	fab3 f383 	clz	r3, r3
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ab4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	461a      	mov	r2, r3
 8001abc:	2300      	movs	r3, #0
 8001abe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac0:	f7fe fea2 	bl	8000808 <HAL_GetTick>
 8001ac4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac8:	e009      	b.n	8001ade <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aca:	f7fe fe9d 	bl	8000808 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e077      	b.n	8001bce <HAL_RCC_OscConfig+0xe02>
 8001ade:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ae2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ae6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	fa93 f2a3 	rbit	r2, r3
 8001af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af6:	601a      	str	r2, [r3, #0]
  return result;
 8001af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001afc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001afe:	fab3 f383 	clz	r3, r3
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	095b      	lsrs	r3, r3, #5
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d102      	bne.n	8001b18 <HAL_RCC_OscConfig+0xd4c>
 8001b12:	4b31      	ldr	r3, [pc, #196]	; (8001bd8 <HAL_RCC_OscConfig+0xe0c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	e01b      	b.n	8001b50 <HAL_RCC_OscConfig+0xd84>
 8001b18:	f107 0320 	add.w	r3, r7, #32
 8001b1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b22:	f107 0320 	add.w	r3, r7, #32
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	fa93 f2a3 	rbit	r2, r3
 8001b2c:	f107 031c 	add.w	r3, r7, #28
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	f107 0318 	add.w	r3, r7, #24
 8001b36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	f107 0318 	add.w	r3, r7, #24
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	fa93 f2a3 	rbit	r2, r3
 8001b46:	f107 0314 	add.w	r3, r7, #20
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	4b22      	ldr	r3, [pc, #136]	; (8001bd8 <HAL_RCC_OscConfig+0xe0c>)
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	f107 0210 	add.w	r2, r7, #16
 8001b54:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b58:	6011      	str	r1, [r2, #0]
 8001b5a:	f107 0210 	add.w	r2, r7, #16
 8001b5e:	6812      	ldr	r2, [r2, #0]
 8001b60:	fa92 f1a2 	rbit	r1, r2
 8001b64:	f107 020c 	add.w	r2, r7, #12
 8001b68:	6011      	str	r1, [r2, #0]
  return result;
 8001b6a:	f107 020c 	add.w	r2, r7, #12
 8001b6e:	6812      	ldr	r2, [r2, #0]
 8001b70:	fab2 f282 	clz	r2, r2
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	f042 0220 	orr.w	r2, r2, #32
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	f002 021f 	and.w	r2, r2, #31
 8001b80:	2101      	movs	r1, #1
 8001b82:	fa01 f202 	lsl.w	r2, r1, r2
 8001b86:	4013      	ands	r3, r2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d19e      	bne.n	8001aca <HAL_RCC_OscConfig+0xcfe>
 8001b8c:	e01e      	b.n	8001bcc <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b8e:	1d3b      	adds	r3, r7, #4
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	69db      	ldr	r3, [r3, #28]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e018      	b.n	8001bce <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b9c:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <HAL_RCC_OscConfig+0xe0c>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ba4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ba8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bac:	1d3b      	adds	r3, r7, #4
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d108      	bne.n	8001bc8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001bb6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001bba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d001      	beq.n	8001bcc <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e000      	b.n	8001bce <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40021000 	.word	0x40021000

08001bdc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b09e      	sub	sp, #120	; 0x78
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e162      	b.n	8001eba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf4:	4b90      	ldr	r3, [pc, #576]	; (8001e38 <HAL_RCC_ClockConfig+0x25c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d910      	bls.n	8001c24 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c02:	4b8d      	ldr	r3, [pc, #564]	; (8001e38 <HAL_RCC_ClockConfig+0x25c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f023 0207 	bic.w	r2, r3, #7
 8001c0a:	498b      	ldr	r1, [pc, #556]	; (8001e38 <HAL_RCC_ClockConfig+0x25c>)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c12:	4b89      	ldr	r3, [pc, #548]	; (8001e38 <HAL_RCC_ClockConfig+0x25c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d001      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e14a      	b.n	8001eba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d008      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c30:	4b82      	ldr	r3, [pc, #520]	; (8001e3c <HAL_RCC_ClockConfig+0x260>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	497f      	ldr	r1, [pc, #508]	; (8001e3c <HAL_RCC_ClockConfig+0x260>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 80dc 	beq.w	8001e08 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d13c      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xf6>
 8001c58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c5c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c60:	fa93 f3a3 	rbit	r3, r3
 8001c64:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c68:	fab3 f383 	clz	r3, r3
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	095b      	lsrs	r3, r3, #5
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d102      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xa6>
 8001c7c:	4b6f      	ldr	r3, [pc, #444]	; (8001e3c <HAL_RCC_ClockConfig+0x260>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	e00f      	b.n	8001ca2 <HAL_RCC_ClockConfig+0xc6>
 8001c82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c8a:	fa93 f3a3 	rbit	r3, r3
 8001c8e:	667b      	str	r3, [r7, #100]	; 0x64
 8001c90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c94:	663b      	str	r3, [r7, #96]	; 0x60
 8001c96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c98:	fa93 f3a3 	rbit	r3, r3
 8001c9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c9e:	4b67      	ldr	r3, [pc, #412]	; (8001e3c <HAL_RCC_ClockConfig+0x260>)
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ca6:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ca8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001caa:	fa92 f2a2 	rbit	r2, r2
 8001cae:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001cb0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001cb2:	fab2 f282 	clz	r2, r2
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	f042 0220 	orr.w	r2, r2, #32
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	f002 021f 	and.w	r2, r2, #31
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc8:	4013      	ands	r3, r2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d17b      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e0f3      	b.n	8001eba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d13c      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x178>
 8001cda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cde:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ce2:	fa93 f3a3 	rbit	r3, r3
 8001ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cea:	fab3 f383 	clz	r3, r3
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	095b      	lsrs	r3, r3, #5
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d102      	bne.n	8001d04 <HAL_RCC_ClockConfig+0x128>
 8001cfe:	4b4f      	ldr	r3, [pc, #316]	; (8001e3c <HAL_RCC_ClockConfig+0x260>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	e00f      	b.n	8001d24 <HAL_RCC_ClockConfig+0x148>
 8001d04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d08:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d0c:	fa93 f3a3 	rbit	r3, r3
 8001d10:	647b      	str	r3, [r7, #68]	; 0x44
 8001d12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d16:	643b      	str	r3, [r7, #64]	; 0x40
 8001d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d1a:	fa93 f3a3 	rbit	r3, r3
 8001d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d20:	4b46      	ldr	r3, [pc, #280]	; (8001e3c <HAL_RCC_ClockConfig+0x260>)
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d28:	63ba      	str	r2, [r7, #56]	; 0x38
 8001d2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d2c:	fa92 f2a2 	rbit	r2, r2
 8001d30:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001d32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d34:	fab2 f282 	clz	r2, r2
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	f042 0220 	orr.w	r2, r2, #32
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	f002 021f 	and.w	r2, r2, #31
 8001d44:	2101      	movs	r1, #1
 8001d46:	fa01 f202 	lsl.w	r2, r1, r2
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d13a      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0b2      	b.n	8001eba <HAL_RCC_ClockConfig+0x2de>
 8001d54:	2302      	movs	r3, #2
 8001d56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5a:	fa93 f3a3 	rbit	r3, r3
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d62:	fab3 f383 	clz	r3, r3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	095b      	lsrs	r3, r3, #5
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d102      	bne.n	8001d7c <HAL_RCC_ClockConfig+0x1a0>
 8001d76:	4b31      	ldr	r3, [pc, #196]	; (8001e3c <HAL_RCC_ClockConfig+0x260>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	e00d      	b.n	8001d98 <HAL_RCC_ClockConfig+0x1bc>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d82:	fa93 f3a3 	rbit	r3, r3
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24
 8001d88:	2302      	movs	r3, #2
 8001d8a:	623b      	str	r3, [r7, #32]
 8001d8c:	6a3b      	ldr	r3, [r7, #32]
 8001d8e:	fa93 f3a3 	rbit	r3, r3
 8001d92:	61fb      	str	r3, [r7, #28]
 8001d94:	4b29      	ldr	r3, [pc, #164]	; (8001e3c <HAL_RCC_ClockConfig+0x260>)
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	2202      	movs	r2, #2
 8001d9a:	61ba      	str	r2, [r7, #24]
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	fa92 f2a2 	rbit	r2, r2
 8001da2:	617a      	str	r2, [r7, #20]
  return result;
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	fab2 f282 	clz	r2, r2
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	f042 0220 	orr.w	r2, r2, #32
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	f002 021f 	and.w	r2, r2, #31
 8001db6:	2101      	movs	r1, #1
 8001db8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e079      	b.n	8001eba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dc6:	4b1d      	ldr	r3, [pc, #116]	; (8001e3c <HAL_RCC_ClockConfig+0x260>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f023 0203 	bic.w	r2, r3, #3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	491a      	ldr	r1, [pc, #104]	; (8001e3c <HAL_RCC_ClockConfig+0x260>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dd8:	f7fe fd16 	bl	8000808 <HAL_GetTick>
 8001ddc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dde:	e00a      	b.n	8001df6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de0:	f7fe fd12 	bl	8000808 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e061      	b.n	8001eba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df6:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <HAL_RCC_ClockConfig+0x260>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 020c 	and.w	r2, r3, #12
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d1eb      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <HAL_RCC_ClockConfig+0x25c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d214      	bcs.n	8001e40 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e16:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <HAL_RCC_ClockConfig+0x25c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f023 0207 	bic.w	r2, r3, #7
 8001e1e:	4906      	ldr	r1, [pc, #24]	; (8001e38 <HAL_RCC_ClockConfig+0x25c>)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e26:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <HAL_RCC_ClockConfig+0x25c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d005      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e040      	b.n	8001eba <HAL_RCC_ClockConfig+0x2de>
 8001e38:	40022000 	.word	0x40022000
 8001e3c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d008      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <HAL_RCC_ClockConfig+0x2e8>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	491a      	ldr	r1, [pc, #104]	; (8001ec4 <HAL_RCC_ClockConfig+0x2e8>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0308 	and.w	r3, r3, #8
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d009      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e6a:	4b16      	ldr	r3, [pc, #88]	; (8001ec4 <HAL_RCC_ClockConfig+0x2e8>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4912      	ldr	r1, [pc, #72]	; (8001ec4 <HAL_RCC_ClockConfig+0x2e8>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e7e:	f000 f829 	bl	8001ed4 <HAL_RCC_GetSysClockFreq>
 8001e82:	4601      	mov	r1, r0
 8001e84:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_RCC_ClockConfig+0x2e8>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e8c:	22f0      	movs	r2, #240	; 0xf0
 8001e8e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	fa92 f2a2 	rbit	r2, r2
 8001e96:	60fa      	str	r2, [r7, #12]
  return result;
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	fab2 f282 	clz	r2, r2
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	40d3      	lsrs	r3, r2
 8001ea2:	4a09      	ldr	r2, [pc, #36]	; (8001ec8 <HAL_RCC_ClockConfig+0x2ec>)
 8001ea4:	5cd3      	ldrb	r3, [r2, r3]
 8001ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8001eaa:	4a08      	ldr	r2, [pc, #32]	; (8001ecc <HAL_RCC_ClockConfig+0x2f0>)
 8001eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001eae:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <HAL_RCC_ClockConfig+0x2f4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7fe fc64 	bl	8000780 <HAL_InitTick>
  
  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3778      	adds	r7, #120	; 0x78
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	08002604 	.word	0x08002604
 8001ecc:	20000044 	.word	0x20000044
 8001ed0:	20000048 	.word	0x20000048

08001ed4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b08b      	sub	sp, #44	; 0x2c
 8001ed8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001eee:	4b29      	ldr	r3, [pc, #164]	; (8001f94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d002      	beq.n	8001f04 <HAL_RCC_GetSysClockFreq+0x30>
 8001efe:	2b08      	cmp	r3, #8
 8001f00:	d003      	beq.n	8001f0a <HAL_RCC_GetSysClockFreq+0x36>
 8001f02:	e03c      	b.n	8001f7e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f04:	4b24      	ldr	r3, [pc, #144]	; (8001f98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f06:	623b      	str	r3, [r7, #32]
      break;
 8001f08:	e03c      	b.n	8001f84 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001f10:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001f14:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	fa92 f2a2 	rbit	r2, r2
 8001f1c:	607a      	str	r2, [r7, #4]
  return result;
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	fab2 f282 	clz	r2, r2
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	40d3      	lsrs	r3, r2
 8001f28:	4a1c      	ldr	r2, [pc, #112]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f2a:	5cd3      	ldrb	r3, [r2, r3]
 8001f2c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001f2e:	4b19      	ldr	r3, [pc, #100]	; (8001f94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	220f      	movs	r2, #15
 8001f38:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	fa92 f2a2 	rbit	r2, r2
 8001f40:	60fa      	str	r2, [r7, #12]
  return result;
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	fab2 f282 	clz	r2, r2
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	40d3      	lsrs	r3, r2
 8001f4c:	4a14      	ldr	r2, [pc, #80]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001f4e:	5cd3      	ldrb	r3, [r2, r3]
 8001f50:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d008      	beq.n	8001f6e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f5c:	4a0e      	ldr	r2, [pc, #56]	; (8001f98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	fb02 f303 	mul.w	r3, r2, r3
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6c:	e004      	b.n	8001f78 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	4a0c      	ldr	r2, [pc, #48]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f72:	fb02 f303 	mul.w	r3, r2, r3
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	623b      	str	r3, [r7, #32]
      break;
 8001f7c:	e002      	b.n	8001f84 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f7e:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f80:	623b      	str	r3, [r7, #32]
      break;
 8001f82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f84:	6a3b      	ldr	r3, [r7, #32]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	372c      	adds	r7, #44	; 0x2c
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40021000 	.word	0x40021000
 8001f98:	007a1200 	.word	0x007a1200
 8001f9c:	08002614 	.word	0x08002614
 8001fa0:	08002624 	.word	0x08002624
 8001fa4:	003d0900 	.word	0x003d0900

08001fa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e01d      	b.n	8001ff6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d106      	bne.n	8001fd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7fe faf4 	bl	80005bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	f000 f9a6 	bl	8002338 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 0201 	orr.w	r2, r2, #1
 8002016:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <HAL_TIM_Base_Start_IT+0x50>)
 8002020:	4013      	ands	r3, r2
 8002022:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2b06      	cmp	r3, #6
 8002028:	d00b      	beq.n	8002042 <HAL_TIM_Base_Start_IT+0x42>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002030:	d007      	beq.n	8002042 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f042 0201 	orr.w	r2, r2, #1
 8002040:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	00010007 	.word	0x00010007

08002054 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68da      	ldr	r2, [r3, #12]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0201 	bic.w	r2, r2, #1
 800206a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6a1a      	ldr	r2, [r3, #32]
 8002072:	f241 1311 	movw	r3, #4369	; 0x1111
 8002076:	4013      	ands	r3, r2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10f      	bne.n	800209c <HAL_TIM_Base_Stop_IT+0x48>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6a1a      	ldr	r2, [r3, #32]
 8002082:	f240 4344 	movw	r3, #1092	; 0x444
 8002086:	4013      	ands	r3, r2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d107      	bne.n	800209c <HAL_TIM_Base_Stop_IT+0x48>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0201 	bic.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d122      	bne.n	8002106 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d11b      	bne.n	8002106 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f06f 0202 	mvn.w	r2, #2
 80020d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f905 	bl	80022fc <HAL_TIM_IC_CaptureCallback>
 80020f2:	e005      	b.n	8002100 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 f8f7 	bl	80022e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f908 	bl	8002310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b04      	cmp	r3, #4
 8002112:	d122      	bne.n	800215a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	f003 0304 	and.w	r3, r3, #4
 800211e:	2b04      	cmp	r3, #4
 8002120:	d11b      	bne.n	800215a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f06f 0204 	mvn.w	r2, #4
 800212a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2202      	movs	r2, #2
 8002130:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f8db 	bl	80022fc <HAL_TIM_IC_CaptureCallback>
 8002146:	e005      	b.n	8002154 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f8cd 	bl	80022e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f8de 	bl	8002310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	f003 0308 	and.w	r3, r3, #8
 8002164:	2b08      	cmp	r3, #8
 8002166:	d122      	bne.n	80021ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b08      	cmp	r3, #8
 8002174:	d11b      	bne.n	80021ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f06f 0208 	mvn.w	r2, #8
 800217e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2204      	movs	r2, #4
 8002184:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	f003 0303 	and.w	r3, r3, #3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 f8b1 	bl	80022fc <HAL_TIM_IC_CaptureCallback>
 800219a:	e005      	b.n	80021a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f8a3 	bl	80022e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f8b4 	bl	8002310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	f003 0310 	and.w	r3, r3, #16
 80021b8:	2b10      	cmp	r3, #16
 80021ba:	d122      	bne.n	8002202 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	f003 0310 	and.w	r3, r3, #16
 80021c6:	2b10      	cmp	r3, #16
 80021c8:	d11b      	bne.n	8002202 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f06f 0210 	mvn.w	r2, #16
 80021d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2208      	movs	r2, #8
 80021d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	69db      	ldr	r3, [r3, #28]
 80021e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d003      	beq.n	80021f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 f887 	bl	80022fc <HAL_TIM_IC_CaptureCallback>
 80021ee:	e005      	b.n	80021fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f879 	bl	80022e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f88a 	bl	8002310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b01      	cmp	r3, #1
 800220e:	d10e      	bne.n	800222e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b01      	cmp	r3, #1
 800221c:	d107      	bne.n	800222e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f06f 0201 	mvn.w	r2, #1
 8002226:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7fe f823 	bl	8000274 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002238:	2b80      	cmp	r3, #128	; 0x80
 800223a:	d10e      	bne.n	800225a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002246:	2b80      	cmp	r3, #128	; 0x80
 8002248:	d107      	bne.n	800225a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f989 	bl	800256c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002268:	d10e      	bne.n	8002288 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002274:	2b80      	cmp	r3, #128	; 0x80
 8002276:	d107      	bne.n	8002288 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f97c 	bl	8002580 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002292:	2b40      	cmp	r3, #64	; 0x40
 8002294:	d10e      	bne.n	80022b4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a0:	2b40      	cmp	r3, #64	; 0x40
 80022a2:	d107      	bne.n	80022b4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f838 	bl	8002324 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	f003 0320 	and.w	r3, r3, #32
 80022be:	2b20      	cmp	r3, #32
 80022c0:	d10e      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f003 0320 	and.w	r3, r3, #32
 80022cc:	2b20      	cmp	r3, #32
 80022ce:	d107      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f06f 0220 	mvn.w	r2, #32
 80022d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f93c 	bl	8002558 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022e0:	bf00      	nop
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a3c      	ldr	r2, [pc, #240]	; (800243c <TIM_Base_SetConfig+0x104>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d00f      	beq.n	8002370 <TIM_Base_SetConfig+0x38>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002356:	d00b      	beq.n	8002370 <TIM_Base_SetConfig+0x38>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a39      	ldr	r2, [pc, #228]	; (8002440 <TIM_Base_SetConfig+0x108>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d007      	beq.n	8002370 <TIM_Base_SetConfig+0x38>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a38      	ldr	r2, [pc, #224]	; (8002444 <TIM_Base_SetConfig+0x10c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d003      	beq.n	8002370 <TIM_Base_SetConfig+0x38>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a37      	ldr	r2, [pc, #220]	; (8002448 <TIM_Base_SetConfig+0x110>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d108      	bne.n	8002382 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002376:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	4313      	orrs	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a2d      	ldr	r2, [pc, #180]	; (800243c <TIM_Base_SetConfig+0x104>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d01b      	beq.n	80023c2 <TIM_Base_SetConfig+0x8a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002390:	d017      	beq.n	80023c2 <TIM_Base_SetConfig+0x8a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a2a      	ldr	r2, [pc, #168]	; (8002440 <TIM_Base_SetConfig+0x108>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d013      	beq.n	80023c2 <TIM_Base_SetConfig+0x8a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a29      	ldr	r2, [pc, #164]	; (8002444 <TIM_Base_SetConfig+0x10c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d00f      	beq.n	80023c2 <TIM_Base_SetConfig+0x8a>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a28      	ldr	r2, [pc, #160]	; (8002448 <TIM_Base_SetConfig+0x110>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d00b      	beq.n	80023c2 <TIM_Base_SetConfig+0x8a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a27      	ldr	r2, [pc, #156]	; (800244c <TIM_Base_SetConfig+0x114>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d007      	beq.n	80023c2 <TIM_Base_SetConfig+0x8a>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a26      	ldr	r2, [pc, #152]	; (8002450 <TIM_Base_SetConfig+0x118>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d003      	beq.n	80023c2 <TIM_Base_SetConfig+0x8a>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a25      	ldr	r2, [pc, #148]	; (8002454 <TIM_Base_SetConfig+0x11c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d108      	bne.n	80023d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	4313      	orrs	r3, r2
 80023e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a10      	ldr	r2, [pc, #64]	; (800243c <TIM_Base_SetConfig+0x104>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d00f      	beq.n	8002420 <TIM_Base_SetConfig+0xe8>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a11      	ldr	r2, [pc, #68]	; (8002448 <TIM_Base_SetConfig+0x110>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d00b      	beq.n	8002420 <TIM_Base_SetConfig+0xe8>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a10      	ldr	r2, [pc, #64]	; (800244c <TIM_Base_SetConfig+0x114>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d007      	beq.n	8002420 <TIM_Base_SetConfig+0xe8>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a0f      	ldr	r2, [pc, #60]	; (8002450 <TIM_Base_SetConfig+0x118>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d003      	beq.n	8002420 <TIM_Base_SetConfig+0xe8>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a0e      	ldr	r2, [pc, #56]	; (8002454 <TIM_Base_SetConfig+0x11c>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d103      	bne.n	8002428 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	615a      	str	r2, [r3, #20]
}
 800242e:	bf00      	nop
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40012c00 	.word	0x40012c00
 8002440:	40000400 	.word	0x40000400
 8002444:	40000800 	.word	0x40000800
 8002448:	40013400 	.word	0x40013400
 800244c:	40014000 	.word	0x40014000
 8002450:	40014400 	.word	0x40014400
 8002454:	40014800 	.word	0x40014800

08002458 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002468:	2b01      	cmp	r3, #1
 800246a:	d101      	bne.n	8002470 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800246c:	2302      	movs	r3, #2
 800246e:	e063      	b.n	8002538 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2202      	movs	r2, #2
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a2b      	ldr	r2, [pc, #172]	; (8002544 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d004      	beq.n	80024a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a2a      	ldr	r2, [pc, #168]	; (8002548 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d108      	bne.n	80024b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80024aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a1b      	ldr	r2, [pc, #108]	; (8002544 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d018      	beq.n	800250c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e2:	d013      	beq.n	800250c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a18      	ldr	r2, [pc, #96]	; (800254c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d00e      	beq.n	800250c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a17      	ldr	r2, [pc, #92]	; (8002550 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d009      	beq.n	800250c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a12      	ldr	r2, [pc, #72]	; (8002548 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d004      	beq.n	800250c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a13      	ldr	r2, [pc, #76]	; (8002554 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d10c      	bne.n	8002526 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002512:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	4313      	orrs	r3, r2
 800251c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	40012c00 	.word	0x40012c00
 8002548:	40013400 	.word	0x40013400
 800254c:	40000400 	.word	0x40000400
 8002550:	40000800 	.word	0x40000800
 8002554:	40014000 	.word	0x40014000

08002558 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <__libc_init_array>:
 8002594:	b570      	push	{r4, r5, r6, lr}
 8002596:	4e0d      	ldr	r6, [pc, #52]	; (80025cc <__libc_init_array+0x38>)
 8002598:	4c0d      	ldr	r4, [pc, #52]	; (80025d0 <__libc_init_array+0x3c>)
 800259a:	1ba4      	subs	r4, r4, r6
 800259c:	10a4      	asrs	r4, r4, #2
 800259e:	2500      	movs	r5, #0
 80025a0:	42a5      	cmp	r5, r4
 80025a2:	d109      	bne.n	80025b8 <__libc_init_array+0x24>
 80025a4:	4e0b      	ldr	r6, [pc, #44]	; (80025d4 <__libc_init_array+0x40>)
 80025a6:	4c0c      	ldr	r4, [pc, #48]	; (80025d8 <__libc_init_array+0x44>)
 80025a8:	f000 f820 	bl	80025ec <_init>
 80025ac:	1ba4      	subs	r4, r4, r6
 80025ae:	10a4      	asrs	r4, r4, #2
 80025b0:	2500      	movs	r5, #0
 80025b2:	42a5      	cmp	r5, r4
 80025b4:	d105      	bne.n	80025c2 <__libc_init_array+0x2e>
 80025b6:	bd70      	pop	{r4, r5, r6, pc}
 80025b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025bc:	4798      	blx	r3
 80025be:	3501      	adds	r5, #1
 80025c0:	e7ee      	b.n	80025a0 <__libc_init_array+0xc>
 80025c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025c6:	4798      	blx	r3
 80025c8:	3501      	adds	r5, #1
 80025ca:	e7f2      	b.n	80025b2 <__libc_init_array+0x1e>
 80025cc:	08002634 	.word	0x08002634
 80025d0:	08002634 	.word	0x08002634
 80025d4:	08002634 	.word	0x08002634
 80025d8:	08002638 	.word	0x08002638

080025dc <memset>:
 80025dc:	4402      	add	r2, r0
 80025de:	4603      	mov	r3, r0
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d100      	bne.n	80025e6 <memset+0xa>
 80025e4:	4770      	bx	lr
 80025e6:	f803 1b01 	strb.w	r1, [r3], #1
 80025ea:	e7f9      	b.n	80025e0 <memset+0x4>

080025ec <_init>:
 80025ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ee:	bf00      	nop
 80025f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025f2:	bc08      	pop	{r3}
 80025f4:	469e      	mov	lr, r3
 80025f6:	4770      	bx	lr

080025f8 <_fini>:
 80025f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025fa:	bf00      	nop
 80025fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025fe:	bc08      	pop	{r3}
 8002600:	469e      	mov	lr, r3
 8002602:	4770      	bx	lr
