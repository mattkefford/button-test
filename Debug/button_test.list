
button_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080030a4  080030a4  000130a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003150  08003150  000200b4  2**0
                  CONTENTS
  4 .ARM          00000000  08003150  08003150  000200b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003150  08003150  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003150  08003150  00013150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003154  08003154  00013154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08003158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  200000b4  0800320c  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  0800320c  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa21  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000186b  00000000  00000000  0002ab05  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009d0  00000000  00000000  0002c370  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008f8  00000000  00000000  0002cd40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019706  00000000  00000000  0002d638  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007fd4  00000000  00000000  00046d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000982c0  00000000  00000000  0004ed12  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e6fd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002aec  00000000  00000000  000e7050  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b4 	.word	0x200000b4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800308c 	.word	0x0800308c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b8 	.word	0x200000b8
 80001cc:	0800308c 	.word	0x0800308c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <button_has_event>:
#endif



uint8_t button_has_event(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
   return prv_buttonEventPending;
 8000274:	4b03      	ldr	r3, [pc, #12]	; (8000284 <button_has_event+0x14>)
 8000276:	781b      	ldrb	r3, [r3, #0]
}
 8000278:	4618      	mov	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	200000d2 	.word	0x200000d2

08000288 <button_get_press_count>:

uint8_t button_get_press_count(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
   prv_buttonEventPending = 0;
 800028c:	4b04      	ldr	r3, [pc, #16]	; (80002a0 <button_get_press_count+0x18>)
 800028e:	2200      	movs	r2, #0
 8000290:	701a      	strb	r2, [r3, #0]
   return prv_lastButtonCount;
 8000292:	4b04      	ldr	r3, [pc, #16]	; (80002a4 <button_get_press_count+0x1c>)
 8000294:	781b      	ldrb	r3, [r3, #0]
}
 8000296:	4618      	mov	r0, r3
 8000298:	46bd      	mov	sp, r7
 800029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029e:	4770      	bx	lr
 80002a0:	200000d2 	.word	0x200000d2
 80002a4:	200000d1 	.word	0x200000d1

080002a8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	80fb      	strh	r3, [r7, #6]
   if(GPIO_Pin == BLUE_BUTTON_Pin && prv_firstEdge)
 80002b2:	88fb      	ldrh	r3, [r7, #6]
 80002b4:	2b01      	cmp	r3, #1
 80002b6:	d125      	bne.n	8000304 <HAL_GPIO_EXTI_Callback+0x5c>
 80002b8:	4b14      	ldr	r3, [pc, #80]	; (800030c <HAL_GPIO_EXTI_Callback+0x64>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d021      	beq.n	8000304 <HAL_GPIO_EXTI_Callback+0x5c>
   {
      prv_firstEdge = 0;
 80002c0:	4b12      	ldr	r3, [pc, #72]	; (800030c <HAL_GPIO_EXTI_Callback+0x64>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	701a      	strb	r2, [r3, #0]
      HAL_TIM_Base_Start_IT(&htim7);
 80002c6:	4812      	ldr	r0, [pc, #72]	; (8000310 <HAL_GPIO_EXTI_Callback+0x68>)
 80002c8:	f001 ffca 	bl	8002260 <HAL_TIM_Base_Start_IT>

#ifdef DEBUG
      HAL_GPIO_TogglePin(leds[ledCount].port, leds[ledCount].pin);
 80002cc:	4b11      	ldr	r3, [pc, #68]	; (8000314 <HAL_GPIO_EXTI_Callback+0x6c>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	461a      	mov	r2, r3
 80002d2:	4b11      	ldr	r3, [pc, #68]	; (8000318 <HAL_GPIO_EXTI_Callback+0x70>)
 80002d4:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 80002d8:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <HAL_GPIO_EXTI_Callback+0x6c>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	4a0e      	ldr	r2, [pc, #56]	; (8000318 <HAL_GPIO_EXTI_Callback+0x70>)
 80002de:	00db      	lsls	r3, r3, #3
 80002e0:	4413      	add	r3, r2
 80002e2:	889b      	ldrh	r3, [r3, #4]
 80002e4:	4619      	mov	r1, r3
 80002e6:	f000 fe6f 	bl	8000fc8 <HAL_GPIO_TogglePin>
      ledCount++;
 80002ea:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <HAL_GPIO_EXTI_Callback+0x6c>)
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	3301      	adds	r3, #1
 80002f0:	b2da      	uxtb	r2, r3
 80002f2:	4b08      	ldr	r3, [pc, #32]	; (8000314 <HAL_GPIO_EXTI_Callback+0x6c>)
 80002f4:	701a      	strb	r2, [r3, #0]
      if(ledCount >= 8)
 80002f6:	4b07      	ldr	r3, [pc, #28]	; (8000314 <HAL_GPIO_EXTI_Callback+0x6c>)
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	2b07      	cmp	r3, #7
 80002fc:	d902      	bls.n	8000304 <HAL_GPIO_EXTI_Callback+0x5c>
      {
         ledCount = 0;
 80002fe:	4b05      	ldr	r3, [pc, #20]	; (8000314 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000300:	2200      	movs	r2, #0
 8000302:	701a      	strb	r2, [r3, #0]
      }
#endif
   }
}
 8000304:	bf00      	nop
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	20000000 	.word	0x20000000
 8000310:	20000184 	.word	0x20000184
 8000314:	200000d3 	.word	0x200000d3
 8000318:	20000004 	.word	0x20000004

0800031c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
   if(htim->Instance == TIM7)    // Short Delay Timer
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a1a      	ldr	r2, [pc, #104]	; (8000394 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800032a:	4293      	cmp	r3, r2
 800032c:	d116      	bne.n	800035c <HAL_TIM_PeriodElapsedCallback+0x40>
   {
      // may be first button press or a subsequent button press so stop both timers
      HAL_TIM_Base_Stop_IT(&htim7);
 800032e:	481a      	ldr	r0, [pc, #104]	; (8000398 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000330:	f001 ffc0 	bl	80022b4 <HAL_TIM_Base_Stop_IT>
      HAL_TIM_Base_Stop_IT(&htim16);
 8000334:	4819      	ldr	r0, [pc, #100]	; (800039c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000336:	f001 ffbd 	bl	80022b4 <HAL_TIM_Base_Stop_IT>

      // allow interrupts to be detected again by a new button press
      prv_firstEdge = 1;
 800033a:	4b19      	ldr	r3, [pc, #100]	; (80003a0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800033c:	2201      	movs	r2, #1
 800033e:	701a      	strb	r2, [r3, #0]

      prv_buttonPressCount++;
 8000340:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	3301      	adds	r3, #1
 8000346:	b2da      	uxtb	r2, r3
 8000348:	4b16      	ldr	r3, [pc, #88]	; (80003a4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800034a:	701a      	strb	r2, [r3, #0]

      // reset long timer and wait for another button press or timeout
      __HAL_TIM_SET_COUNTER(&htim16, 0);
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <HAL_TIM_PeriodElapsedCallback+0x80>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	2200      	movs	r2, #0
 8000352:	625a      	str	r2, [r3, #36]	; 0x24
      HAL_TIM_Base_Start_IT(&htim16);
 8000354:	4811      	ldr	r0, [pc, #68]	; (800039c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000356:	f001 ff83 	bl	8002260 <HAL_TIM_Base_Start_IT>

//#ifdef DEBUG
      HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
//#endif
   }
}
 800035a:	e016      	b.n	800038a <HAL_TIM_PeriodElapsedCallback+0x6e>
   else if(htim->Instance == TIM16)    // Long Delay Timer
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a11      	ldr	r2, [pc, #68]	; (80003a8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d111      	bne.n	800038a <HAL_TIM_PeriodElapsedCallback+0x6e>
      HAL_TIM_Base_Stop_IT(&htim16);
 8000366:	480d      	ldr	r0, [pc, #52]	; (800039c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000368:	f001 ffa4 	bl	80022b4 <HAL_TIM_Base_Stop_IT>
      prv_lastButtonCount = prv_buttonPressCount;
 800036c:	4b0d      	ldr	r3, [pc, #52]	; (80003a4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800036e:	781a      	ldrb	r2, [r3, #0]
 8000370:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000372:	701a      	strb	r2, [r3, #0]
      prv_buttonPressCount = 0;
 8000374:	4b0b      	ldr	r3, [pc, #44]	; (80003a4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000376:	2200      	movs	r2, #0
 8000378:	701a      	strb	r2, [r3, #0]
      prv_buttonEventPending = 1;
 800037a:	4b0d      	ldr	r3, [pc, #52]	; (80003b0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800037c:	2201      	movs	r2, #1
 800037e:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000380:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000384:	480b      	ldr	r0, [pc, #44]	; (80003b4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000386:	f000 fe1f 	bl	8000fc8 <HAL_GPIO_TogglePin>
}
 800038a:	bf00      	nop
 800038c:	3708      	adds	r7, #8
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40001400 	.word	0x40001400
 8000398:	20000184 	.word	0x20000184
 800039c:	20000144 	.word	0x20000144
 80003a0:	20000000 	.word	0x20000000
 80003a4:	200000d0 	.word	0x200000d0
 80003a8:	40014400 	.word	0x40014400
 80003ac:	200000d1 	.word	0x200000d1
 80003b0:	200000d2 	.word	0x200000d2
 80003b4:	48001000 	.word	0x48001000

080003b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003be:	f000 faf9 	bl	80009b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c2:	f000 f819 	bl	80003f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c6:	f000 f8c1 	bl	800054c <MX_GPIO_Init>
  MX_TIM7_Init();
 80003ca:	f000 f857 	bl	800047c <MX_TIM7_Init>
  MX_TIM16_Init();
 80003ce:	f000 f891 	bl	80004f4 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  uint8_t numberOfPresses = 0;
 80003d2:	2300      	movs	r3, #0
 80003d4:	71fb      	strb	r3, [r7, #7]
  //uint8_t dummy = 0;


  version_get_info(versionBuffer, sizeof(versionBuffer)/sizeof(versionBuffer[0]));
 80003d6:	2164      	movs	r1, #100	; 0x64
 80003d8:	4806      	ldr	r0, [pc, #24]	; (80003f4 <main+0x3c>)
 80003da:	f000 fa1f 	bl	800081c <version_get_info>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if(button_has_event())
 80003de:	f7ff ff47 	bl	8000270 <button_has_event>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d0fa      	beq.n	80003de <main+0x26>
    {
       numberOfPresses = button_get_press_count();
 80003e8:	f7ff ff4e 	bl	8000288 <button_get_press_count>
 80003ec:	4603      	mov	r3, r0
 80003ee:	71fb      	strb	r3, [r7, #7]
    if(button_has_event())
 80003f0:	e7f5      	b.n	80003de <main+0x26>
 80003f2:	bf00      	nop
 80003f4:	200000d4 	.word	0x200000d4

080003f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b090      	sub	sp, #64	; 0x40
 80003fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fe:	f107 0318 	add.w	r3, r7, #24
 8000402:	2228      	movs	r2, #40	; 0x28
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f002 fa1e 	bl	8002848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]
 8000418:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800041a:	2302      	movs	r3, #2
 800041c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800041e:	2301      	movs	r3, #1
 8000420:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000422:	2310      	movs	r3, #16
 8000424:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000426:	2302      	movs	r3, #2
 8000428:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800042a:	2300      	movs	r3, #0
 800042c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800042e:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000432:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000434:	f107 0318 	add.w	r3, r7, #24
 8000438:	4618      	mov	r0, r3
 800043a:	f000 fdf7 	bl	800102c <HAL_RCC_OscConfig>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000444:	f000 f8e6 	bl	8000614 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000448:	230f      	movs	r3, #15
 800044a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800044c:	2302      	movs	r3, #2
 800044e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000450:	2300      	movs	r3, #0
 8000452:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000454:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000458:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800045a:	2300      	movs	r3, #0
 800045c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	2101      	movs	r1, #1
 8000462:	4618      	mov	r0, r3
 8000464:	f001 fcea 	bl	8001e3c <HAL_RCC_ClockConfig>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800046e:	f000 f8d1 	bl	8000614 <Error_Handler>
  }
}
 8000472:	bf00      	nop
 8000474:	3740      	adds	r7, #64	; 0x40
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
	...

0800047c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
 8000488:	605a      	str	r2, [r3, #4]
 800048a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800048c:	4b17      	ldr	r3, [pc, #92]	; (80004ec <MX_TIM7_Init+0x70>)
 800048e:	4a18      	ldr	r2, [pc, #96]	; (80004f0 <MX_TIM7_Init+0x74>)
 8000490:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7;
 8000492:	4b16      	ldr	r3, [pc, #88]	; (80004ec <MX_TIM7_Init+0x70>)
 8000494:	2207      	movs	r2, #7
 8000496:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000498:	4b14      	ldr	r3, [pc, #80]	; (80004ec <MX_TIM7_Init+0x70>)
 800049a:	2200      	movs	r2, #0
 800049c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 59999;
 800049e:	4b13      	ldr	r3, [pc, #76]	; (80004ec <MX_TIM7_Init+0x70>)
 80004a0:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80004a4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004a6:	4b11      	ldr	r3, [pc, #68]	; (80004ec <MX_TIM7_Init+0x70>)
 80004a8:	2280      	movs	r2, #128	; 0x80
 80004aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80004ac:	480f      	ldr	r0, [pc, #60]	; (80004ec <MX_TIM7_Init+0x70>)
 80004ae:	f001 feab 	bl	8002208 <HAL_TIM_Base_Init>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80004b8:	f000 f8ac 	bl	8000614 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004bc:	2300      	movs	r3, #0
 80004be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004c0:	2300      	movs	r3, #0
 80004c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	4619      	mov	r1, r3
 80004c8:	4808      	ldr	r0, [pc, #32]	; (80004ec <MX_TIM7_Init+0x70>)
 80004ca:	f002 f8f5 	bl	80026b8 <HAL_TIMEx_MasterConfigSynchronization>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80004d4:	f000 f89e 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  //HAL_TIM_Base_Start_IT(&htim7);
  __HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
 80004d8:	4b04      	ldr	r3, [pc, #16]	; (80004ec <MX_TIM7_Init+0x70>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f06f 0201 	mvn.w	r2, #1
 80004e0:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM7_Init 2 */

}
 80004e2:	bf00      	nop
 80004e4:	3710      	adds	r7, #16
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	20000184 	.word	0x20000184
 80004f0:	40001400 	.word	0x40001400

080004f4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80004f8:	4b12      	ldr	r3, [pc, #72]	; (8000544 <MX_TIM16_Init+0x50>)
 80004fa:	4a13      	ldr	r2, [pc, #76]	; (8000548 <MX_TIM16_Init+0x54>)
 80004fc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 599;
 80004fe:	4b11      	ldr	r3, [pc, #68]	; (8000544 <MX_TIM16_Init+0x50>)
 8000500:	f240 2257 	movw	r2, #599	; 0x257
 8000504:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000506:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <MX_TIM16_Init+0x50>)
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 59999;
 800050c:	4b0d      	ldr	r3, [pc, #52]	; (8000544 <MX_TIM16_Init+0x50>)
 800050e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000512:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <MX_TIM16_Init+0x50>)
 8000516:	2200      	movs	r2, #0
 8000518:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800051a:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <MX_TIM16_Init+0x50>)
 800051c:	2200      	movs	r2, #0
 800051e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <MX_TIM16_Init+0x50>)
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000526:	4807      	ldr	r0, [pc, #28]	; (8000544 <MX_TIM16_Init+0x50>)
 8000528:	f001 fe6e 	bl	8002208 <HAL_TIM_Base_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000532:	f000 f86f 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  __HAL_TIM_CLEAR_FLAG(&htim16, TIM_FLAG_UPDATE);
 8000536:	4b03      	ldr	r3, [pc, #12]	; (8000544 <MX_TIM16_Init+0x50>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	f06f 0201 	mvn.w	r2, #1
 800053e:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM16_Init 2 */

}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000144 	.word	0x20000144
 8000548:	40014400 	.word	0x40014400

0800054c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b088      	sub	sp, #32
 8000550:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000552:	f107 030c 	add.w	r3, r7, #12
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000562:	4b29      	ldr	r3, [pc, #164]	; (8000608 <MX_GPIO_Init+0xbc>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	4a28      	ldr	r2, [pc, #160]	; (8000608 <MX_GPIO_Init+0xbc>)
 8000568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800056c:	6153      	str	r3, [r2, #20]
 800056e:	4b26      	ldr	r3, [pc, #152]	; (8000608 <MX_GPIO_Init+0xbc>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800057a:	4b23      	ldr	r3, [pc, #140]	; (8000608 <MX_GPIO_Init+0xbc>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	4a22      	ldr	r2, [pc, #136]	; (8000608 <MX_GPIO_Init+0xbc>)
 8000580:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000584:	6153      	str	r3, [r2, #20]
 8000586:	4b20      	ldr	r3, [pc, #128]	; (8000608 <MX_GPIO_Init+0xbc>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000592:	4b1d      	ldr	r3, [pc, #116]	; (8000608 <MX_GPIO_Init+0xbc>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	4a1c      	ldr	r2, [pc, #112]	; (8000608 <MX_GPIO_Init+0xbc>)
 8000598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800059c:	6153      	str	r3, [r2, #20]
 800059e:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <MX_GPIO_Init+0xbc>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005a6:	603b      	str	r3, [r7, #0]
 80005a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 80005aa:	2200      	movs	r2, #0
 80005ac:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80005b0:	4816      	ldr	r0, [pc, #88]	; (800060c <MX_GPIO_Init+0xc0>)
 80005b2:	f000 fcf1 	bl	8000f98 <HAL_GPIO_WritePin>
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 80005b6:	2301      	movs	r3, #1
 80005b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005ba:	4b15      	ldr	r3, [pc, #84]	; (8000610 <MX_GPIO_Init+0xc4>)
 80005bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	4619      	mov	r1, r3
 80005c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005cc:	f000 fb6a 	bl	8000ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD7_Pin
                           LD9_Pin LD10_Pin LD8_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 80005d0:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80005d4:	60fb      	str	r3, [r7, #12]
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d6:	2301      	movs	r3, #1
 80005d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005de:	2300      	movs	r3, #0
 80005e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	4619      	mov	r1, r3
 80005e8:	4808      	ldr	r0, [pc, #32]	; (800060c <MX_GPIO_Init+0xc0>)
 80005ea:	f000 fb5b 	bl	8000ca4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 1);
 80005ee:	2201      	movs	r2, #1
 80005f0:	2100      	movs	r1, #0
 80005f2:	2006      	movs	r0, #6
 80005f4:	f000 fb1f 	bl	8000c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80005f8:	2006      	movs	r0, #6
 80005fa:	f000 fb38 	bl	8000c6e <HAL_NVIC_EnableIRQ>

}
 80005fe:	bf00      	nop
 8000600:	3720      	adds	r7, #32
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40021000 	.word	0x40021000
 800060c:	48001000 	.word	0x48001000
 8000610:	10110000 	.word	0x10110000

08000614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
	...

08000624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800062a:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <HAL_MspInit+0x44>)
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	4a0e      	ldr	r2, [pc, #56]	; (8000668 <HAL_MspInit+0x44>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6193      	str	r3, [r2, #24]
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <HAL_MspInit+0x44>)
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <HAL_MspInit+0x44>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	4a08      	ldr	r2, [pc, #32]	; (8000668 <HAL_MspInit+0x44>)
 8000648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064c:	61d3      	str	r3, [r2, #28]
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_MspInit+0x44>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800065a:	2007      	movs	r0, #7
 800065c:	f000 fae0 	bl	8000c20 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40021000 	.word	0x40021000

0800066c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a1a      	ldr	r2, [pc, #104]	; (80006e4 <HAL_TIM_Base_MspInit+0x78>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d114      	bne.n	80006a8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800067e:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <HAL_TIM_Base_MspInit+0x7c>)
 8000680:	69db      	ldr	r3, [r3, #28]
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <HAL_TIM_Base_MspInit+0x7c>)
 8000684:	f043 0320 	orr.w	r3, r3, #32
 8000688:	61d3      	str	r3, [r2, #28]
 800068a:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <HAL_TIM_Base_MspInit+0x7c>)
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	f003 0320 	and.w	r3, r3, #32
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000696:	2200      	movs	r2, #0
 8000698:	2100      	movs	r1, #0
 800069a:	2037      	movs	r0, #55	; 0x37
 800069c:	f000 facb 	bl	8000c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80006a0:	2037      	movs	r0, #55	; 0x37
 80006a2:	f000 fae4 	bl	8000c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80006a6:	e018      	b.n	80006da <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM16)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a0f      	ldr	r2, [pc, #60]	; (80006ec <HAL_TIM_Base_MspInit+0x80>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d113      	bne.n	80006da <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80006b2:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <HAL_TIM_Base_MspInit+0x7c>)
 80006b4:	699b      	ldr	r3, [r3, #24]
 80006b6:	4a0c      	ldr	r2, [pc, #48]	; (80006e8 <HAL_TIM_Base_MspInit+0x7c>)
 80006b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006bc:	6193      	str	r3, [r2, #24]
 80006be:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <HAL_TIM_Base_MspInit+0x7c>)
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2100      	movs	r1, #0
 80006ce:	2019      	movs	r0, #25
 80006d0:	f000 fab1 	bl	8000c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80006d4:	2019      	movs	r0, #25
 80006d6:	f000 faca 	bl	8000c6e <HAL_NVIC_EnableIRQ>
}
 80006da:	bf00      	nop
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40001400 	.word	0x40001400
 80006e8:	40021000 	.word	0x40021000
 80006ec:	40014400 	.word	0x40014400

080006f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr

080006fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000702:	e7fe      	b.n	8000702 <HardFault_Handler+0x4>

08000704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000708:	e7fe      	b.n	8000708 <MemManage_Handler+0x4>

0800070a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800070e:	e7fe      	b.n	800070e <BusFault_Handler+0x4>

08000710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <UsageFault_Handler+0x4>

08000716 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800071a:	bf00      	nop
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000744:	f000 f97c 	bl	8000a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
   //HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000750:	2001      	movs	r0, #1
 8000752:	f000 fc53 	bl	8000ffc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
	...

0800075c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000760:	4802      	ldr	r0, [pc, #8]	; (800076c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000762:	f001 fdd2 	bl	800230a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000144 	.word	0x20000144

08000770 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000774:	4802      	ldr	r0, [pc, #8]	; (8000780 <TIM7_IRQHandler+0x10>)
 8000776:	f001 fdc8 	bl	800230a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000184 	.word	0x20000184

08000784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800078c:	4a14      	ldr	r2, [pc, #80]	; (80007e0 <_sbrk+0x5c>)
 800078e:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <_sbrk+0x60>)
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000798:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <_sbrk+0x64>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d102      	bne.n	80007a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <_sbrk+0x64>)
 80007a2:	4a12      	ldr	r2, [pc, #72]	; (80007ec <_sbrk+0x68>)
 80007a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <_sbrk+0x64>)
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4413      	add	r3, r2
 80007ae:	693a      	ldr	r2, [r7, #16]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d207      	bcs.n	80007c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007b4:	f002 f81e 	bl	80027f4 <__errno>
 80007b8:	4602      	mov	r2, r0
 80007ba:	230c      	movs	r3, #12
 80007bc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80007be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007c2:	e009      	b.n	80007d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <_sbrk+0x64>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ca:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <_sbrk+0x64>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4413      	add	r3, r2
 80007d2:	4a05      	ldr	r2, [pc, #20]	; (80007e8 <_sbrk+0x64>)
 80007d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007d6:	68fb      	ldr	r3, [r7, #12]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3718      	adds	r7, #24
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	2000a000 	.word	0x2000a000
 80007e4:	00000400 	.word	0x00000400
 80007e8:	20000138 	.word	0x20000138
 80007ec:	200001d0 	.word	0x200001d0

080007f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <SystemInit+0x28>)
 80007f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007fa:	4a07      	ldr	r2, [pc, #28]	; (8000818 <SystemInit+0x28>)
 80007fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000800:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000804:	4b04      	ldr	r3, [pc, #16]	; (8000818 <SystemInit+0x28>)
 8000806:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800080a:	609a      	str	r2, [r3, #8]
#endif
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	e000ed00 	.word	0xe000ed00

0800081c <version_get_info>:
static uint8_t hw_ver_to_buffer(uint8_t * pBuff, uint8_t buffSize);



void version_get_info(uint8_t * pBuff, uint8_t len)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	460b      	mov	r3, r1
 8000826:	70fb      	strb	r3, [r7, #3]
  uint8_t buffSizeRemaining   = len;
 8000828:	78fb      	ldrb	r3, [r7, #3]
 800082a:	73fb      	strb	r3, [r7, #15]
  uint8_t bytesWritten        = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	73bb      	strb	r3, [r7, #14]
  uint8_t writePosition       = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	737b      	strb	r3, [r7, #13]

  bytesWritten = product_name_to_buffer(pBuff, buffSizeRemaining);
 8000834:	7bfb      	ldrb	r3, [r7, #15]
 8000836:	4619      	mov	r1, r3
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f000 f833 	bl	80008a4 <product_name_to_buffer>
 800083e:	4603      	mov	r3, r0
 8000840:	73bb      	strb	r3, [r7, #14]

  buffSizeRemaining -= bytesWritten;
 8000842:	7bfa      	ldrb	r2, [r7, #15]
 8000844:	7bbb      	ldrb	r3, [r7, #14]
 8000846:	1ad3      	subs	r3, r2, r3
 8000848:	73fb      	strb	r3, [r7, #15]
  writePosition += bytesWritten;
 800084a:	7b7a      	ldrb	r2, [r7, #13]
 800084c:	7bbb      	ldrb	r3, [r7, #14]
 800084e:	4413      	add	r3, r2
 8000850:	737b      	strb	r3, [r7, #13]

  bytesWritten = sw_ver_to_buffer(&pBuff[writePosition], buffSizeRemaining);
 8000852:	7b7b      	ldrb	r3, [r7, #13]
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	4413      	add	r3, r2
 8000858:	7bfa      	ldrb	r2, [r7, #15]
 800085a:	4611      	mov	r1, r2
 800085c:	4618      	mov	r0, r3
 800085e:	f000 f841 	bl	80008e4 <sw_ver_to_buffer>
 8000862:	4603      	mov	r3, r0
 8000864:	73bb      	strb	r3, [r7, #14]

  buffSizeRemaining -= bytesWritten;
 8000866:	7bfa      	ldrb	r2, [r7, #15]
 8000868:	7bbb      	ldrb	r3, [r7, #14]
 800086a:	1ad3      	subs	r3, r2, r3
 800086c:	73fb      	strb	r3, [r7, #15]
  writePosition += bytesWritten;
 800086e:	7b7a      	ldrb	r2, [r7, #13]
 8000870:	7bbb      	ldrb	r3, [r7, #14]
 8000872:	4413      	add	r3, r2
 8000874:	737b      	strb	r3, [r7, #13]

  bytesWritten = hw_ver_to_buffer(&pBuff[writePosition], buffSizeRemaining);
 8000876:	7b7b      	ldrb	r3, [r7, #13]
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	4413      	add	r3, r2
 800087c:	7bfa      	ldrb	r2, [r7, #15]
 800087e:	4611      	mov	r1, r2
 8000880:	4618      	mov	r0, r3
 8000882:	f000 f84f 	bl	8000924 <hw_ver_to_buffer>
 8000886:	4603      	mov	r3, r0
 8000888:	73bb      	strb	r3, [r7, #14]

  buffSizeRemaining -= bytesWritten;
 800088a:	7bfa      	ldrb	r2, [r7, #15]
 800088c:	7bbb      	ldrb	r3, [r7, #14]
 800088e:	1ad3      	subs	r3, r2, r3
 8000890:	73fb      	strb	r3, [r7, #15]
  writePosition += bytesWritten;
 8000892:	7b7a      	ldrb	r2, [r7, #13]
 8000894:	7bbb      	ldrb	r3, [r7, #14]
 8000896:	4413      	add	r3, r2
 8000898:	737b      	strb	r3, [r7, #13]
}
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <product_name_to_buffer>:



static uint8_t product_name_to_buffer(uint8_t * pBuff, uint8_t buffSize)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	460b      	mov	r3, r1
 80008ae:	70fb      	strb	r3, [r7, #3]
  char format[] = "%s - ";
 80008b0:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <product_name_to_buffer+0x38>)
 80008b2:	f107 0308 	add.w	r3, r7, #8
 80008b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008ba:	6018      	str	r0, [r3, #0]
 80008bc:	3304      	adds	r3, #4
 80008be:	8019      	strh	r1, [r3, #0]
  return snprintf((char *)pBuff, buffSize, format, boardName);
 80008c0:	78f9      	ldrb	r1, [r7, #3]
 80008c2:	f107 0208 	add.w	r2, r7, #8
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <product_name_to_buffer+0x3c>)
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f001 ffc5 	bl	8002858 <sniprintf>
 80008ce:	4603      	mov	r3, r0
 80008d0:	b2db      	uxtb	r3, r3
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	080030a4 	.word	0x080030a4
 80008e0:	080030dc 	.word	0x080030dc

080008e4 <sw_ver_to_buffer>:

static uint8_t sw_ver_to_buffer(uint8_t * pBuff, uint8_t buffSize)
{
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b089      	sub	sp, #36	; 0x24
 80008e8:	af02      	add	r7, sp, #8
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	460b      	mov	r3, r1
 80008ee:	70fb      	strb	r3, [r7, #3]
  char format[] = "SW v%i.%i.%i - ";
 80008f0:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <sw_ver_to_buffer+0x3c>)
 80008f2:	f107 0408 	add.w	r4, r7, #8
 80008f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  return snprintf((char *)pBuff, buffSize, format, C_SW_VER_MAJOR, C_SW_VER_MINOR, C_SW_VER_REVISION);
 80008fc:	78f9      	ldrb	r1, [r7, #3]
 80008fe:	f107 0208 	add.w	r2, r7, #8
 8000902:	2300      	movs	r3, #0
 8000904:	9301      	str	r3, [sp, #4]
 8000906:	2300      	movs	r3, #0
 8000908:	9300      	str	r3, [sp, #0]
 800090a:	2302      	movs	r3, #2
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f001 ffa3 	bl	8002858 <sniprintf>
 8000912:	4603      	mov	r3, r0
 8000914:	b2db      	uxtb	r3, r3
}
 8000916:	4618      	mov	r0, r3
 8000918:	371c      	adds	r7, #28
 800091a:	46bd      	mov	sp, r7
 800091c:	bd90      	pop	{r4, r7, pc}
 800091e:	bf00      	nop
 8000920:	080030ac 	.word	0x080030ac

08000924 <hw_ver_to_buffer>:

static uint8_t hw_ver_to_buffer(uint8_t * pBuff, uint8_t buffSize)
{
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b089      	sub	sp, #36	; 0x24
 8000928:	af02      	add	r7, sp, #8
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	460b      	mov	r3, r1
 800092e:	70fb      	strb	r3, [r7, #3]
  char format[] = "HW v%i rev%i ";
 8000930:	4b0a      	ldr	r3, [pc, #40]	; (800095c <hw_ver_to_buffer+0x38>)
 8000932:	f107 0408 	add.w	r4, r7, #8
 8000936:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000938:	c407      	stmia	r4!, {r0, r1, r2}
 800093a:	8023      	strh	r3, [r4, #0]
  return snprintf((char *)pBuff, buffSize, format, C_HW_VER_MAJOR, C_HW_VER_MINOR);
 800093c:	78f9      	ldrb	r1, [r7, #3]
 800093e:	f107 0208 	add.w	r2, r7, #8
 8000942:	2300      	movs	r3, #0
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	2302      	movs	r3, #2
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f001 ff85 	bl	8002858 <sniprintf>
 800094e:	4603      	mov	r3, r0
 8000950:	b2db      	uxtb	r3, r3
}
 8000952:	4618      	mov	r0, r3
 8000954:	371c      	adds	r7, #28
 8000956:	46bd      	mov	sp, r7
 8000958:	bd90      	pop	{r4, r7, pc}
 800095a:	bf00      	nop
 800095c:	080030bc 	.word	0x080030bc

08000960 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000960:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000998 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000964:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000966:	e003      	b.n	8000970 <LoopCopyDataInit>

08000968 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800096a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800096c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800096e:	3104      	adds	r1, #4

08000970 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000970:	480b      	ldr	r0, [pc, #44]	; (80009a0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000974:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000976:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000978:	d3f6      	bcc.n	8000968 <CopyDataInit>
	ldr	r2, =_sbss
 800097a:	4a0b      	ldr	r2, [pc, #44]	; (80009a8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800097c:	e002      	b.n	8000984 <LoopFillZerobss>

0800097e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800097e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000980:	f842 3b04 	str.w	r3, [r2], #4

08000984 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <LoopForever+0x16>)
	cmp	r2, r3
 8000986:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000988:	d3f9      	bcc.n	800097e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800098a:	f7ff ff31 	bl	80007f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800098e:	f001 ff37 	bl	8002800 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000992:	f7ff fd11 	bl	80003b8 <main>

08000996 <LoopForever>:

LoopForever:
    b LoopForever
 8000996:	e7fe      	b.n	8000996 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000998:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 800099c:	08003158 	.word	0x08003158
	ldr	r0, =_sdata
 80009a0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80009a4:	200000b4 	.word	0x200000b4
	ldr	r2, =_sbss
 80009a8:	200000b4 	.word	0x200000b4
	ldr	r3, = _ebss
 80009ac:	200001cc 	.word	0x200001cc

080009b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009b0:	e7fe      	b.n	80009b0 <ADC1_2_IRQHandler>
	...

080009b4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <HAL_Init+0x28>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a07      	ldr	r2, [pc, #28]	; (80009dc <HAL_Init+0x28>)
 80009be:	f043 0310 	orr.w	r3, r3, #16
 80009c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c4:	2003      	movs	r0, #3
 80009c6:	f000 f92b 	bl	8000c20 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ca:	2000      	movs	r0, #0
 80009cc:	f000 f808 	bl	80009e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d0:	f7ff fe28 	bl	8000624 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40022000 	.word	0x40022000

080009e0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <HAL_InitTick+0x54>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <HAL_InitTick+0x58>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	4619      	mov	r1, r3
 80009f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 f943 	bl	8000c8a <HAL_SYSTICK_Config>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e00e      	b.n	8000a2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2b0f      	cmp	r3, #15
 8000a12:	d80a      	bhi.n	8000a2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a14:	2200      	movs	r2, #0
 8000a16:	6879      	ldr	r1, [r7, #4]
 8000a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a1c:	f000 f90b 	bl	8000c36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a20:	4a06      	ldr	r2, [pc, #24]	; (8000a3c <HAL_InitTick+0x5c>)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a26:	2300      	movs	r3, #0
 8000a28:	e000      	b.n	8000a2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000044 	.word	0x20000044
 8000a38:	2000004c 	.word	0x2000004c
 8000a3c:	20000048 	.word	0x20000048

08000a40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_IncTick+0x20>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_IncTick+0x24>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4413      	add	r3, r2
 8000a50:	4a04      	ldr	r2, [pc, #16]	; (8000a64 <HAL_IncTick+0x24>)
 8000a52:	6013      	str	r3, [r2, #0]
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	2000004c 	.word	0x2000004c
 8000a64:	200001c4 	.word	0x200001c4

08000a68 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a6c:	4b03      	ldr	r3, [pc, #12]	; (8000a7c <HAL_GetTick+0x14>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	200001c4 	.word	0x200001c4

08000a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab2:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	60d3      	str	r3, [r2, #12]
}
 8000ab8:	bf00      	nop
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000acc:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	0a1b      	lsrs	r3, r3, #8
 8000ad2:	f003 0307 	and.w	r3, r3, #7
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	db0b      	blt.n	8000b0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	f003 021f 	and.w	r2, r3, #31
 8000afc:	4907      	ldr	r1, [pc, #28]	; (8000b1c <__NVIC_EnableIRQ+0x38>)
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	095b      	lsrs	r3, r3, #5
 8000b04:	2001      	movs	r0, #1
 8000b06:	fa00 f202 	lsl.w	r2, r0, r2
 8000b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000e100 	.word	0xe000e100

08000b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	6039      	str	r1, [r7, #0]
 8000b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	db0a      	blt.n	8000b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	490c      	ldr	r1, [pc, #48]	; (8000b6c <__NVIC_SetPriority+0x4c>)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	0112      	lsls	r2, r2, #4
 8000b40:	b2d2      	uxtb	r2, r2
 8000b42:	440b      	add	r3, r1
 8000b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b48:	e00a      	b.n	8000b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4908      	ldr	r1, [pc, #32]	; (8000b70 <__NVIC_SetPriority+0x50>)
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	f003 030f 	and.w	r3, r3, #15
 8000b56:	3b04      	subs	r3, #4
 8000b58:	0112      	lsls	r2, r2, #4
 8000b5a:	b2d2      	uxtb	r2, r2
 8000b5c:	440b      	add	r3, r1
 8000b5e:	761a      	strb	r2, [r3, #24]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000e100 	.word	0xe000e100
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b089      	sub	sp, #36	; 0x24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	f1c3 0307 	rsb	r3, r3, #7
 8000b8e:	2b04      	cmp	r3, #4
 8000b90:	bf28      	it	cs
 8000b92:	2304      	movcs	r3, #4
 8000b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3304      	adds	r3, #4
 8000b9a:	2b06      	cmp	r3, #6
 8000b9c:	d902      	bls.n	8000ba4 <NVIC_EncodePriority+0x30>
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	3b03      	subs	r3, #3
 8000ba2:	e000      	b.n	8000ba6 <NVIC_EncodePriority+0x32>
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43da      	mvns	r2, r3
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	401a      	ands	r2, r3
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc6:	43d9      	mvns	r1, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	4313      	orrs	r3, r2
         );
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3724      	adds	r7, #36	; 0x24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bec:	d301      	bcc.n	8000bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e00f      	b.n	8000c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <SysTick_Config+0x40>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bfa:	210f      	movs	r1, #15
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	f7ff ff8e 	bl	8000b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <SysTick_Config+0x40>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0a:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <SysTick_Config+0x40>)
 8000c0c:	2207      	movs	r2, #7
 8000c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	e000e010 	.word	0xe000e010

08000c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff ff29 	bl	8000a80 <__NVIC_SetPriorityGrouping>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b086      	sub	sp, #24
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	60b9      	str	r1, [r7, #8]
 8000c40:	607a      	str	r2, [r7, #4]
 8000c42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c48:	f7ff ff3e 	bl	8000ac8 <__NVIC_GetPriorityGrouping>
 8000c4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	68b9      	ldr	r1, [r7, #8]
 8000c52:	6978      	ldr	r0, [r7, #20]
 8000c54:	f7ff ff8e 	bl	8000b74 <NVIC_EncodePriority>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c5e:	4611      	mov	r1, r2
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff ff5d 	bl	8000b20 <__NVIC_SetPriority>
}
 8000c66:	bf00      	nop
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	4603      	mov	r3, r0
 8000c76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff31 	bl	8000ae4 <__NVIC_EnableIRQ>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff ffa2 	bl	8000bdc <SysTick_Config>
 8000c98:	4603      	mov	r3, r0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b087      	sub	sp, #28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cb2:	e154      	b.n	8000f5e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	2101      	movs	r1, #1
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f000 8146 	beq.w	8000f58 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d003      	beq.n	8000cdc <HAL_GPIO_Init+0x38>
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	2b12      	cmp	r3, #18
 8000cda:	d123      	bne.n	8000d24 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	08da      	lsrs	r2, r3, #3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3208      	adds	r2, #8
 8000ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	f003 0307 	and.w	r3, r3, #7
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	220f      	movs	r2, #15
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	691a      	ldr	r2, [r3, #16]
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	08da      	lsrs	r2, r3, #3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	3208      	adds	r2, #8
 8000d1e:	6939      	ldr	r1, [r7, #16]
 8000d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	2203      	movs	r2, #3
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 0203 	and.w	r2, r3, #3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d00b      	beq.n	8000d78 <HAL_GPIO_Init+0xd4>
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d007      	beq.n	8000d78 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d6c:	2b11      	cmp	r3, #17
 8000d6e:	d003      	beq.n	8000d78 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	2b12      	cmp	r3, #18
 8000d76:	d130      	bne.n	8000dda <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	2203      	movs	r2, #3
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	68da      	ldr	r2, [r3, #12]
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dae:	2201      	movs	r2, #1
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43db      	mvns	r3, r3
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	091b      	lsrs	r3, r3, #4
 8000dc4:	f003 0201 	and.w	r2, r3, #1
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	2203      	movs	r2, #3
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	689a      	ldr	r2, [r3, #8]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f000 80a0 	beq.w	8000f58 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e18:	4b58      	ldr	r3, [pc, #352]	; (8000f7c <HAL_GPIO_Init+0x2d8>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4a57      	ldr	r2, [pc, #348]	; (8000f7c <HAL_GPIO_Init+0x2d8>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	6193      	str	r3, [r2, #24]
 8000e24:	4b55      	ldr	r3, [pc, #340]	; (8000f7c <HAL_GPIO_Init+0x2d8>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e30:	4a53      	ldr	r2, [pc, #332]	; (8000f80 <HAL_GPIO_Init+0x2dc>)
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	089b      	lsrs	r3, r3, #2
 8000e36:	3302      	adds	r3, #2
 8000e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	220f      	movs	r2, #15
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e5a:	d019      	beq.n	8000e90 <HAL_GPIO_Init+0x1ec>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a49      	ldr	r2, [pc, #292]	; (8000f84 <HAL_GPIO_Init+0x2e0>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d013      	beq.n	8000e8c <HAL_GPIO_Init+0x1e8>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a48      	ldr	r2, [pc, #288]	; (8000f88 <HAL_GPIO_Init+0x2e4>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d00d      	beq.n	8000e88 <HAL_GPIO_Init+0x1e4>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a47      	ldr	r2, [pc, #284]	; (8000f8c <HAL_GPIO_Init+0x2e8>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d007      	beq.n	8000e84 <HAL_GPIO_Init+0x1e0>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a46      	ldr	r2, [pc, #280]	; (8000f90 <HAL_GPIO_Init+0x2ec>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d101      	bne.n	8000e80 <HAL_GPIO_Init+0x1dc>
 8000e7c:	2304      	movs	r3, #4
 8000e7e:	e008      	b.n	8000e92 <HAL_GPIO_Init+0x1ee>
 8000e80:	2305      	movs	r3, #5
 8000e82:	e006      	b.n	8000e92 <HAL_GPIO_Init+0x1ee>
 8000e84:	2303      	movs	r3, #3
 8000e86:	e004      	b.n	8000e92 <HAL_GPIO_Init+0x1ee>
 8000e88:	2302      	movs	r3, #2
 8000e8a:	e002      	b.n	8000e92 <HAL_GPIO_Init+0x1ee>
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e000      	b.n	8000e92 <HAL_GPIO_Init+0x1ee>
 8000e90:	2300      	movs	r3, #0
 8000e92:	697a      	ldr	r2, [r7, #20]
 8000e94:	f002 0203 	and.w	r2, r2, #3
 8000e98:	0092      	lsls	r2, r2, #2
 8000e9a:	4093      	lsls	r3, r2
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ea2:	4937      	ldr	r1, [pc, #220]	; (8000f80 <HAL_GPIO_Init+0x2dc>)
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	089b      	lsrs	r3, r3, #2
 8000ea8:	3302      	adds	r3, #2
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eb0:	4b38      	ldr	r3, [pc, #224]	; (8000f94 <HAL_GPIO_Init+0x2f0>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d003      	beq.n	8000ed4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ed4:	4a2f      	ldr	r2, [pc, #188]	; (8000f94 <HAL_GPIO_Init+0x2f0>)
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000eda:	4b2e      	ldr	r3, [pc, #184]	; (8000f94 <HAL_GPIO_Init+0x2f0>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d003      	beq.n	8000efe <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000efe:	4a25      	ldr	r2, [pc, #148]	; (8000f94 <HAL_GPIO_Init+0x2f0>)
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f04:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <HAL_GPIO_Init+0x2f0>)
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d003      	beq.n	8000f28 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f28:	4a1a      	ldr	r2, [pc, #104]	; (8000f94 <HAL_GPIO_Init+0x2f0>)
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f2e:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <HAL_GPIO_Init+0x2f0>)
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	43db      	mvns	r3, r3
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f52:	4a10      	ldr	r2, [pc, #64]	; (8000f94 <HAL_GPIO_Init+0x2f0>)
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	fa22 f303 	lsr.w	r3, r2, r3
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f47f aea3 	bne.w	8000cb4 <HAL_GPIO_Init+0x10>
  }
}
 8000f6e:	bf00      	nop
 8000f70:	371c      	adds	r7, #28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	40010000 	.word	0x40010000
 8000f84:	48000400 	.word	0x48000400
 8000f88:	48000800 	.word	0x48000800
 8000f8c:	48000c00 	.word	0x48000c00
 8000f90:	48001000 	.word	0x48001000
 8000f94:	40010400 	.word	0x40010400

08000f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	807b      	strh	r3, [r7, #2]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fa8:	787b      	ldrb	r3, [r7, #1]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fae:	887a      	ldrh	r2, [r7, #2]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fb4:	e002      	b.n	8000fbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fb6:	887a      	ldrh	r2, [r7, #2]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	695a      	ldr	r2, [r3, #20]
 8000fd8:	887b      	ldrh	r3, [r7, #2]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d004      	beq.n	8000fea <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000fe0:	887b      	ldrh	r3, [r7, #2]
 8000fe2:	041a      	lsls	r2, r3, #16
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000fe8:	e002      	b.n	8000ff0 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fea:	887a      	ldrh	r2, [r7, #2]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	619a      	str	r2, [r3, #24]
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001006:	4b08      	ldr	r3, [pc, #32]	; (8001028 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001008:	695a      	ldr	r2, [r3, #20]
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	4013      	ands	r3, r2
 800100e:	2b00      	cmp	r3, #0
 8001010:	d006      	beq.n	8001020 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001012:	4a05      	ldr	r2, [pc, #20]	; (8001028 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001014:	88fb      	ldrh	r3, [r7, #6]
 8001016:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001018:	88fb      	ldrh	r3, [r7, #6]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff f944 	bl	80002a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40010400 	.word	0x40010400

0800102c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001032:	af00      	add	r7, sp, #0
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d102      	bne.n	8001046 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	f000 bef4 	b.w	8001e2e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	2b00      	cmp	r3, #0
 8001052:	f000 816a 	beq.w	800132a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001056:	4bb3      	ldr	r3, [pc, #716]	; (8001324 <HAL_RCC_OscConfig+0x2f8>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 030c 	and.w	r3, r3, #12
 800105e:	2b04      	cmp	r3, #4
 8001060:	d00c      	beq.n	800107c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001062:	4bb0      	ldr	r3, [pc, #704]	; (8001324 <HAL_RCC_OscConfig+0x2f8>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 030c 	and.w	r3, r3, #12
 800106a:	2b08      	cmp	r3, #8
 800106c:	d159      	bne.n	8001122 <HAL_RCC_OscConfig+0xf6>
 800106e:	4bad      	ldr	r3, [pc, #692]	; (8001324 <HAL_RCC_OscConfig+0x2f8>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800107a:	d152      	bne.n	8001122 <HAL_RCC_OscConfig+0xf6>
 800107c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001080:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001084:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001088:	fa93 f3a3 	rbit	r3, r3
 800108c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001090:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001094:	fab3 f383 	clz	r3, r3
 8001098:	b2db      	uxtb	r3, r3
 800109a:	095b      	lsrs	r3, r3, #5
 800109c:	b2db      	uxtb	r3, r3
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d102      	bne.n	80010ae <HAL_RCC_OscConfig+0x82>
 80010a8:	4b9e      	ldr	r3, [pc, #632]	; (8001324 <HAL_RCC_OscConfig+0x2f8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	e015      	b.n	80010da <HAL_RCC_OscConfig+0xae>
 80010ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010b2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80010ba:	fa93 f3a3 	rbit	r3, r3
 80010be:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80010c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010c6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80010ca:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80010ce:	fa93 f3a3 	rbit	r3, r3
 80010d2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80010d6:	4b93      	ldr	r3, [pc, #588]	; (8001324 <HAL_RCC_OscConfig+0x2f8>)
 80010d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010de:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80010e2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80010e6:	fa92 f2a2 	rbit	r2, r2
 80010ea:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80010ee:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80010f2:	fab2 f282 	clz	r2, r2
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	f042 0220 	orr.w	r2, r2, #32
 80010fc:	b2d2      	uxtb	r2, r2
 80010fe:	f002 021f 	and.w	r2, r2, #31
 8001102:	2101      	movs	r1, #1
 8001104:	fa01 f202 	lsl.w	r2, r1, r2
 8001108:	4013      	ands	r3, r2
 800110a:	2b00      	cmp	r3, #0
 800110c:	f000 810c 	beq.w	8001328 <HAL_RCC_OscConfig+0x2fc>
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	f040 8106 	bne.w	8001328 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	f000 be86 	b.w	8001e2e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800112c:	d106      	bne.n	800113c <HAL_RCC_OscConfig+0x110>
 800112e:	4b7d      	ldr	r3, [pc, #500]	; (8001324 <HAL_RCC_OscConfig+0x2f8>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a7c      	ldr	r2, [pc, #496]	; (8001324 <HAL_RCC_OscConfig+0x2f8>)
 8001134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	e030      	b.n	800119e <HAL_RCC_OscConfig+0x172>
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d10c      	bne.n	8001160 <HAL_RCC_OscConfig+0x134>
 8001146:	4b77      	ldr	r3, [pc, #476]	; (8001324 <HAL_RCC_OscConfig+0x2f8>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a76      	ldr	r2, [pc, #472]	; (8001324 <HAL_RCC_OscConfig+0x2f8>)
 800114c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	4b74      	ldr	r3, [pc, #464]	; (8001324 <HAL_RCC_OscConfig+0x2f8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a73      	ldr	r2, [pc, #460]	; (8001324 <HAL_RCC_OscConfig+0x2f8>)
 8001158:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	e01e      	b.n	800119e <HAL_RCC_OscConfig+0x172>
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800116a:	d10c      	bne.n	8001186 <HAL_RCC_OscConfig+0x15a>
 800116c:	4b6d      	ldr	r3, [pc, #436]	; (8001324 <HAL_RCC_OscConfig+0x2f8>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a6c      	ldr	r2, [pc, #432]	; (8001324 <HAL_RCC_OscConfig+0x2f8>)
 8001172:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	4b6a      	ldr	r3, [pc, #424]	; (8001324 <HAL_RCC_OscConfig+0x2f8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a69      	ldr	r2, [pc, #420]	; (8001324 <HAL_RCC_OscConfig+0x2f8>)
 800117e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	e00b      	b.n	800119e <HAL_RCC_OscConfig+0x172>
 8001186:	4b67      	ldr	r3, [pc, #412]	; (8001324 <HAL_RCC_OscConfig+0x2f8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a66      	ldr	r2, [pc, #408]	; (8001324 <HAL_RCC_OscConfig+0x2f8>)
 800118c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	4b64      	ldr	r3, [pc, #400]	; (8001324 <HAL_RCC_OscConfig+0x2f8>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a63      	ldr	r2, [pc, #396]	; (8001324 <HAL_RCC_OscConfig+0x2f8>)
 8001198:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800119c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800119e:	4b61      	ldr	r3, [pc, #388]	; (8001324 <HAL_RCC_OscConfig+0x2f8>)
 80011a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a2:	f023 020f 	bic.w	r2, r3, #15
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	495d      	ldr	r1, [pc, #372]	; (8001324 <HAL_RCC_OscConfig+0x2f8>)
 80011ae:	4313      	orrs	r3, r2
 80011b0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d059      	beq.n	8001270 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011bc:	f7ff fc54 	bl	8000a68 <HAL_GetTick>
 80011c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c4:	e00a      	b.n	80011dc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c6:	f7ff fc4f 	bl	8000a68 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b64      	cmp	r3, #100	; 0x64
 80011d4:	d902      	bls.n	80011dc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	f000 be29 	b.w	8001e2e <HAL_RCC_OscConfig+0xe02>
 80011dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011e0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80011e8:	fa93 f3a3 	rbit	r3, r3
 80011ec:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80011f0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f4:	fab3 f383 	clz	r3, r3
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	095b      	lsrs	r3, r3, #5
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b01      	cmp	r3, #1
 8001206:	d102      	bne.n	800120e <HAL_RCC_OscConfig+0x1e2>
 8001208:	4b46      	ldr	r3, [pc, #280]	; (8001324 <HAL_RCC_OscConfig+0x2f8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	e015      	b.n	800123a <HAL_RCC_OscConfig+0x20e>
 800120e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001212:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001216:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800121a:	fa93 f3a3 	rbit	r3, r3
 800121e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001222:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001226:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800122a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800122e:	fa93 f3a3 	rbit	r3, r3
 8001232:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001236:	4b3b      	ldr	r3, [pc, #236]	; (8001324 <HAL_RCC_OscConfig+0x2f8>)
 8001238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800123e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001242:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001246:	fa92 f2a2 	rbit	r2, r2
 800124a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800124e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001252:	fab2 f282 	clz	r2, r2
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	f042 0220 	orr.w	r2, r2, #32
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	f002 021f 	and.w	r2, r2, #31
 8001262:	2101      	movs	r1, #1
 8001264:	fa01 f202 	lsl.w	r2, r1, r2
 8001268:	4013      	ands	r3, r2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d0ab      	beq.n	80011c6 <HAL_RCC_OscConfig+0x19a>
 800126e:	e05c      	b.n	800132a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001270:	f7ff fbfa 	bl	8000a68 <HAL_GetTick>
 8001274:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001278:	e00a      	b.n	8001290 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800127a:	f7ff fbf5 	bl	8000a68 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b64      	cmp	r3, #100	; 0x64
 8001288:	d902      	bls.n	8001290 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	f000 bdcf 	b.w	8001e2e <HAL_RCC_OscConfig+0xe02>
 8001290:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001294:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001298:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800129c:	fa93 f3a3 	rbit	r3, r3
 80012a0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80012a4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012a8:	fab3 f383 	clz	r3, r3
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	095b      	lsrs	r3, r3, #5
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d102      	bne.n	80012c2 <HAL_RCC_OscConfig+0x296>
 80012bc:	4b19      	ldr	r3, [pc, #100]	; (8001324 <HAL_RCC_OscConfig+0x2f8>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	e015      	b.n	80012ee <HAL_RCC_OscConfig+0x2c2>
 80012c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012c6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ca:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80012ce:	fa93 f3a3 	rbit	r3, r3
 80012d2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80012d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012da:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80012de:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80012e2:	fa93 f3a3 	rbit	r3, r3
 80012e6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <HAL_RCC_OscConfig+0x2f8>)
 80012ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012f2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80012f6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80012fa:	fa92 f2a2 	rbit	r2, r2
 80012fe:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001302:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001306:	fab2 f282 	clz	r2, r2
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	f042 0220 	orr.w	r2, r2, #32
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	f002 021f 	and.w	r2, r2, #31
 8001316:	2101      	movs	r1, #1
 8001318:	fa01 f202 	lsl.w	r2, r1, r2
 800131c:	4013      	ands	r3, r2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1ab      	bne.n	800127a <HAL_RCC_OscConfig+0x24e>
 8001322:	e002      	b.n	800132a <HAL_RCC_OscConfig+0x2fe>
 8001324:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	2b00      	cmp	r3, #0
 8001336:	f000 816f 	beq.w	8001618 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800133a:	4bd0      	ldr	r3, [pc, #832]	; (800167c <HAL_RCC_OscConfig+0x650>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f003 030c 	and.w	r3, r3, #12
 8001342:	2b00      	cmp	r3, #0
 8001344:	d00b      	beq.n	800135e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001346:	4bcd      	ldr	r3, [pc, #820]	; (800167c <HAL_RCC_OscConfig+0x650>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 030c 	and.w	r3, r3, #12
 800134e:	2b08      	cmp	r3, #8
 8001350:	d16c      	bne.n	800142c <HAL_RCC_OscConfig+0x400>
 8001352:	4bca      	ldr	r3, [pc, #808]	; (800167c <HAL_RCC_OscConfig+0x650>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d166      	bne.n	800142c <HAL_RCC_OscConfig+0x400>
 800135e:	2302      	movs	r3, #2
 8001360:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001364:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001368:	fa93 f3a3 	rbit	r3, r3
 800136c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001370:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001374:	fab3 f383 	clz	r3, r3
 8001378:	b2db      	uxtb	r3, r3
 800137a:	095b      	lsrs	r3, r3, #5
 800137c:	b2db      	uxtb	r3, r3
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b01      	cmp	r3, #1
 8001386:	d102      	bne.n	800138e <HAL_RCC_OscConfig+0x362>
 8001388:	4bbc      	ldr	r3, [pc, #752]	; (800167c <HAL_RCC_OscConfig+0x650>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	e013      	b.n	80013b6 <HAL_RCC_OscConfig+0x38a>
 800138e:	2302      	movs	r3, #2
 8001390:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001394:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001398:	fa93 f3a3 	rbit	r3, r3
 800139c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80013a0:	2302      	movs	r3, #2
 80013a2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80013a6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80013aa:	fa93 f3a3 	rbit	r3, r3
 80013ae:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80013b2:	4bb2      	ldr	r3, [pc, #712]	; (800167c <HAL_RCC_OscConfig+0x650>)
 80013b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b6:	2202      	movs	r2, #2
 80013b8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80013bc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80013c0:	fa92 f2a2 	rbit	r2, r2
 80013c4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80013c8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80013cc:	fab2 f282 	clz	r2, r2
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	f042 0220 	orr.w	r2, r2, #32
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	f002 021f 	and.w	r2, r2, #31
 80013dc:	2101      	movs	r1, #1
 80013de:	fa01 f202 	lsl.w	r2, r1, r2
 80013e2:	4013      	ands	r3, r2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d007      	beq.n	80013f8 <HAL_RCC_OscConfig+0x3cc>
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d002      	beq.n	80013f8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	f000 bd1b 	b.w	8001e2e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f8:	4ba0      	ldr	r3, [pc, #640]	; (800167c <HAL_RCC_OscConfig+0x650>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	21f8      	movs	r1, #248	; 0xf8
 8001408:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001410:	fa91 f1a1 	rbit	r1, r1
 8001414:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001418:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800141c:	fab1 f181 	clz	r1, r1
 8001420:	b2c9      	uxtb	r1, r1
 8001422:	408b      	lsls	r3, r1
 8001424:	4995      	ldr	r1, [pc, #596]	; (800167c <HAL_RCC_OscConfig+0x650>)
 8001426:	4313      	orrs	r3, r2
 8001428:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142a:	e0f5      	b.n	8001618 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 8085 	beq.w	8001542 <HAL_RCC_OscConfig+0x516>
 8001438:	2301      	movs	r3, #1
 800143a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001442:	fa93 f3a3 	rbit	r3, r3
 8001446:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800144a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800144e:	fab3 f383 	clz	r3, r3
 8001452:	b2db      	uxtb	r3, r3
 8001454:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001458:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	461a      	mov	r2, r3
 8001460:	2301      	movs	r3, #1
 8001462:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001464:	f7ff fb00 	bl	8000a68 <HAL_GetTick>
 8001468:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146c:	e00a      	b.n	8001484 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800146e:	f7ff fafb 	bl	8000a68 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d902      	bls.n	8001484 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	f000 bcd5 	b.w	8001e2e <HAL_RCC_OscConfig+0xe02>
 8001484:	2302      	movs	r3, #2
 8001486:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800148e:	fa93 f3a3 	rbit	r3, r3
 8001492:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001496:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149a:	fab3 f383 	clz	r3, r3
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	095b      	lsrs	r3, r3, #5
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d102      	bne.n	80014b4 <HAL_RCC_OscConfig+0x488>
 80014ae:	4b73      	ldr	r3, [pc, #460]	; (800167c <HAL_RCC_OscConfig+0x650>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	e013      	b.n	80014dc <HAL_RCC_OscConfig+0x4b0>
 80014b4:	2302      	movs	r3, #2
 80014b6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ba:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80014be:	fa93 f3a3 	rbit	r3, r3
 80014c2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80014c6:	2302      	movs	r3, #2
 80014c8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80014cc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80014d0:	fa93 f3a3 	rbit	r3, r3
 80014d4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80014d8:	4b68      	ldr	r3, [pc, #416]	; (800167c <HAL_RCC_OscConfig+0x650>)
 80014da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014dc:	2202      	movs	r2, #2
 80014de:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80014e2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80014e6:	fa92 f2a2 	rbit	r2, r2
 80014ea:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80014ee:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80014f2:	fab2 f282 	clz	r2, r2
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	f042 0220 	orr.w	r2, r2, #32
 80014fc:	b2d2      	uxtb	r2, r2
 80014fe:	f002 021f 	and.w	r2, r2, #31
 8001502:	2101      	movs	r1, #1
 8001504:	fa01 f202 	lsl.w	r2, r1, r2
 8001508:	4013      	ands	r3, r2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0af      	beq.n	800146e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150e:	4b5b      	ldr	r3, [pc, #364]	; (800167c <HAL_RCC_OscConfig+0x650>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	21f8      	movs	r1, #248	; 0xf8
 800151e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001522:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001526:	fa91 f1a1 	rbit	r1, r1
 800152a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800152e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001532:	fab1 f181 	clz	r1, r1
 8001536:	b2c9      	uxtb	r1, r1
 8001538:	408b      	lsls	r3, r1
 800153a:	4950      	ldr	r1, [pc, #320]	; (800167c <HAL_RCC_OscConfig+0x650>)
 800153c:	4313      	orrs	r3, r2
 800153e:	600b      	str	r3, [r1, #0]
 8001540:	e06a      	b.n	8001618 <HAL_RCC_OscConfig+0x5ec>
 8001542:	2301      	movs	r3, #1
 8001544:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001548:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800154c:	fa93 f3a3 	rbit	r3, r3
 8001550:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001554:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001558:	fab3 f383 	clz	r3, r3
 800155c:	b2db      	uxtb	r3, r3
 800155e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001562:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	461a      	mov	r2, r3
 800156a:	2300      	movs	r3, #0
 800156c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156e:	f7ff fa7b 	bl	8000a68 <HAL_GetTick>
 8001572:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001576:	e00a      	b.n	800158e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001578:	f7ff fa76 	bl	8000a68 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d902      	bls.n	800158e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	f000 bc50 	b.w	8001e2e <HAL_RCC_OscConfig+0xe02>
 800158e:	2302      	movs	r3, #2
 8001590:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001594:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001598:	fa93 f3a3 	rbit	r3, r3
 800159c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80015a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a4:	fab3 f383 	clz	r3, r3
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	095b      	lsrs	r3, r3, #5
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d102      	bne.n	80015be <HAL_RCC_OscConfig+0x592>
 80015b8:	4b30      	ldr	r3, [pc, #192]	; (800167c <HAL_RCC_OscConfig+0x650>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	e013      	b.n	80015e6 <HAL_RCC_OscConfig+0x5ba>
 80015be:	2302      	movs	r3, #2
 80015c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015c8:	fa93 f3a3 	rbit	r3, r3
 80015cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80015d0:	2302      	movs	r3, #2
 80015d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80015d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015da:	fa93 f3a3 	rbit	r3, r3
 80015de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80015e2:	4b26      	ldr	r3, [pc, #152]	; (800167c <HAL_RCC_OscConfig+0x650>)
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	2202      	movs	r2, #2
 80015e8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80015ec:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80015f0:	fa92 f2a2 	rbit	r2, r2
 80015f4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80015f8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80015fc:	fab2 f282 	clz	r2, r2
 8001600:	b2d2      	uxtb	r2, r2
 8001602:	f042 0220 	orr.w	r2, r2, #32
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	f002 021f 	and.w	r2, r2, #31
 800160c:	2101      	movs	r1, #1
 800160e:	fa01 f202 	lsl.w	r2, r1, r2
 8001612:	4013      	ands	r3, r2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1af      	bne.n	8001578 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 80da 	beq.w	80017dc <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d069      	beq.n	8001706 <HAL_RCC_OscConfig+0x6da>
 8001632:	2301      	movs	r3, #1
 8001634:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001638:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800163c:	fa93 f3a3 	rbit	r3, r3
 8001640:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001644:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001648:	fab3 f383 	clz	r3, r3
 800164c:	b2db      	uxtb	r3, r3
 800164e:	461a      	mov	r2, r3
 8001650:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <HAL_RCC_OscConfig+0x654>)
 8001652:	4413      	add	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	461a      	mov	r2, r3
 8001658:	2301      	movs	r3, #1
 800165a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165c:	f7ff fa04 	bl	8000a68 <HAL_GetTick>
 8001660:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001664:	e00e      	b.n	8001684 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001666:	f7ff f9ff 	bl	8000a68 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d906      	bls.n	8001684 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e3d9      	b.n	8001e2e <HAL_RCC_OscConfig+0xe02>
 800167a:	bf00      	nop
 800167c:	40021000 	.word	0x40021000
 8001680:	10908120 	.word	0x10908120
 8001684:	2302      	movs	r3, #2
 8001686:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800168e:	fa93 f3a3 	rbit	r3, r3
 8001692:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001696:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800169a:	2202      	movs	r2, #2
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	fa93 f2a3 	rbit	r2, r3
 80016a8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80016b2:	2202      	movs	r2, #2
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	fa93 f2a3 	rbit	r2, r3
 80016c0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80016c4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c6:	4ba5      	ldr	r3, [pc, #660]	; (800195c <HAL_RCC_OscConfig+0x930>)
 80016c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016ca:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80016ce:	2102      	movs	r1, #2
 80016d0:	6019      	str	r1, [r3, #0]
 80016d2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	fa93 f1a3 	rbit	r1, r3
 80016dc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80016e0:	6019      	str	r1, [r3, #0]
  return result;
 80016e2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	fab3 f383 	clz	r3, r3
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	f003 031f 	and.w	r3, r3, #31
 80016f8:	2101      	movs	r1, #1
 80016fa:	fa01 f303 	lsl.w	r3, r1, r3
 80016fe:	4013      	ands	r3, r2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0b0      	beq.n	8001666 <HAL_RCC_OscConfig+0x63a>
 8001704:	e06a      	b.n	80017dc <HAL_RCC_OscConfig+0x7b0>
 8001706:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800170a:	2201      	movs	r2, #1
 800170c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	fa93 f2a3 	rbit	r2, r3
 8001718:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800171c:	601a      	str	r2, [r3, #0]
  return result;
 800171e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001722:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001724:	fab3 f383 	clz	r3, r3
 8001728:	b2db      	uxtb	r3, r3
 800172a:	461a      	mov	r2, r3
 800172c:	4b8c      	ldr	r3, [pc, #560]	; (8001960 <HAL_RCC_OscConfig+0x934>)
 800172e:	4413      	add	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	461a      	mov	r2, r3
 8001734:	2300      	movs	r3, #0
 8001736:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001738:	f7ff f996 	bl	8000a68 <HAL_GetTick>
 800173c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001740:	e009      	b.n	8001756 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001742:	f7ff f991 	bl	8000a68 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e36b      	b.n	8001e2e <HAL_RCC_OscConfig+0xe02>
 8001756:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800175a:	2202      	movs	r2, #2
 800175c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	fa93 f2a3 	rbit	r2, r3
 8001768:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001772:	2202      	movs	r2, #2
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	fa93 f2a3 	rbit	r2, r3
 8001780:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800178a:	2202      	movs	r2, #2
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	fa93 f2a3 	rbit	r2, r3
 8001798:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800179c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800179e:	4b6f      	ldr	r3, [pc, #444]	; (800195c <HAL_RCC_OscConfig+0x930>)
 80017a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017a2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80017a6:	2102      	movs	r1, #2
 80017a8:	6019      	str	r1, [r3, #0]
 80017aa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	fa93 f1a3 	rbit	r1, r3
 80017b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80017b8:	6019      	str	r1, [r3, #0]
  return result;
 80017ba:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	fab3 f383 	clz	r3, r3
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	f003 031f 	and.w	r3, r3, #31
 80017d0:	2101      	movs	r1, #1
 80017d2:	fa01 f303 	lsl.w	r3, r1, r3
 80017d6:	4013      	ands	r3, r2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1b2      	bne.n	8001742 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 8158 	beq.w	8001a9c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017f2:	4b5a      	ldr	r3, [pc, #360]	; (800195c <HAL_RCC_OscConfig+0x930>)
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d112      	bne.n	8001824 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017fe:	4b57      	ldr	r3, [pc, #348]	; (800195c <HAL_RCC_OscConfig+0x930>)
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	4a56      	ldr	r2, [pc, #344]	; (800195c <HAL_RCC_OscConfig+0x930>)
 8001804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001808:	61d3      	str	r3, [r2, #28]
 800180a:	4b54      	ldr	r3, [pc, #336]	; (800195c <HAL_RCC_OscConfig+0x930>)
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001812:	f107 0308 	add.w	r3, r7, #8
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	f107 0308 	add.w	r3, r7, #8
 800181c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800181e:	2301      	movs	r3, #1
 8001820:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001824:	4b4f      	ldr	r3, [pc, #316]	; (8001964 <HAL_RCC_OscConfig+0x938>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182c:	2b00      	cmp	r3, #0
 800182e:	d11a      	bne.n	8001866 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001830:	4b4c      	ldr	r3, [pc, #304]	; (8001964 <HAL_RCC_OscConfig+0x938>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a4b      	ldr	r2, [pc, #300]	; (8001964 <HAL_RCC_OscConfig+0x938>)
 8001836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800183a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800183c:	f7ff f914 	bl	8000a68 <HAL_GetTick>
 8001840:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001844:	e009      	b.n	800185a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001846:	f7ff f90f 	bl	8000a68 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b64      	cmp	r3, #100	; 0x64
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e2e9      	b.n	8001e2e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800185a:	4b42      	ldr	r3, [pc, #264]	; (8001964 <HAL_RCC_OscConfig+0x938>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0ef      	beq.n	8001846 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d106      	bne.n	800187e <HAL_RCC_OscConfig+0x852>
 8001870:	4b3a      	ldr	r3, [pc, #232]	; (800195c <HAL_RCC_OscConfig+0x930>)
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	4a39      	ldr	r2, [pc, #228]	; (800195c <HAL_RCC_OscConfig+0x930>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	6213      	str	r3, [r2, #32]
 800187c:	e02f      	b.n	80018de <HAL_RCC_OscConfig+0x8b2>
 800187e:	1d3b      	adds	r3, r7, #4
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d10c      	bne.n	80018a2 <HAL_RCC_OscConfig+0x876>
 8001888:	4b34      	ldr	r3, [pc, #208]	; (800195c <HAL_RCC_OscConfig+0x930>)
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	4a33      	ldr	r2, [pc, #204]	; (800195c <HAL_RCC_OscConfig+0x930>)
 800188e:	f023 0301 	bic.w	r3, r3, #1
 8001892:	6213      	str	r3, [r2, #32]
 8001894:	4b31      	ldr	r3, [pc, #196]	; (800195c <HAL_RCC_OscConfig+0x930>)
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	4a30      	ldr	r2, [pc, #192]	; (800195c <HAL_RCC_OscConfig+0x930>)
 800189a:	f023 0304 	bic.w	r3, r3, #4
 800189e:	6213      	str	r3, [r2, #32]
 80018a0:	e01d      	b.n	80018de <HAL_RCC_OscConfig+0x8b2>
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	2b05      	cmp	r3, #5
 80018aa:	d10c      	bne.n	80018c6 <HAL_RCC_OscConfig+0x89a>
 80018ac:	4b2b      	ldr	r3, [pc, #172]	; (800195c <HAL_RCC_OscConfig+0x930>)
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	4a2a      	ldr	r2, [pc, #168]	; (800195c <HAL_RCC_OscConfig+0x930>)
 80018b2:	f043 0304 	orr.w	r3, r3, #4
 80018b6:	6213      	str	r3, [r2, #32]
 80018b8:	4b28      	ldr	r3, [pc, #160]	; (800195c <HAL_RCC_OscConfig+0x930>)
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	4a27      	ldr	r2, [pc, #156]	; (800195c <HAL_RCC_OscConfig+0x930>)
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	6213      	str	r3, [r2, #32]
 80018c4:	e00b      	b.n	80018de <HAL_RCC_OscConfig+0x8b2>
 80018c6:	4b25      	ldr	r3, [pc, #148]	; (800195c <HAL_RCC_OscConfig+0x930>)
 80018c8:	6a1b      	ldr	r3, [r3, #32]
 80018ca:	4a24      	ldr	r2, [pc, #144]	; (800195c <HAL_RCC_OscConfig+0x930>)
 80018cc:	f023 0301 	bic.w	r3, r3, #1
 80018d0:	6213      	str	r3, [r2, #32]
 80018d2:	4b22      	ldr	r3, [pc, #136]	; (800195c <HAL_RCC_OscConfig+0x930>)
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	4a21      	ldr	r2, [pc, #132]	; (800195c <HAL_RCC_OscConfig+0x930>)
 80018d8:	f023 0304 	bic.w	r3, r3, #4
 80018dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d06b      	beq.n	80019c0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e8:	f7ff f8be 	bl	8000a68 <HAL_GetTick>
 80018ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f0:	e00b      	b.n	800190a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f2:	f7ff f8b9 	bl	8000a68 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001902:	4293      	cmp	r3, r2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e291      	b.n	8001e2e <HAL_RCC_OscConfig+0xe02>
 800190a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800190e:	2202      	movs	r2, #2
 8001910:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001912:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	fa93 f2a3 	rbit	r2, r3
 800191c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001926:	2202      	movs	r2, #2
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	fa93 f2a3 	rbit	r2, r3
 8001934:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001938:	601a      	str	r2, [r3, #0]
  return result;
 800193a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800193e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001940:	fab3 f383 	clz	r3, r3
 8001944:	b2db      	uxtb	r3, r3
 8001946:	095b      	lsrs	r3, r3, #5
 8001948:	b2db      	uxtb	r3, r3
 800194a:	f043 0302 	orr.w	r3, r3, #2
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d109      	bne.n	8001968 <HAL_RCC_OscConfig+0x93c>
 8001954:	4b01      	ldr	r3, [pc, #4]	; (800195c <HAL_RCC_OscConfig+0x930>)
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	e014      	b.n	8001984 <HAL_RCC_OscConfig+0x958>
 800195a:	bf00      	nop
 800195c:	40021000 	.word	0x40021000
 8001960:	10908120 	.word	0x10908120
 8001964:	40007000 	.word	0x40007000
 8001968:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800196c:	2202      	movs	r2, #2
 800196e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001970:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	fa93 f2a3 	rbit	r2, r3
 800197a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	4bbb      	ldr	r3, [pc, #748]	; (8001c70 <HAL_RCC_OscConfig+0xc44>)
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001984:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001988:	2102      	movs	r1, #2
 800198a:	6011      	str	r1, [r2, #0]
 800198c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001990:	6812      	ldr	r2, [r2, #0]
 8001992:	fa92 f1a2 	rbit	r1, r2
 8001996:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800199a:	6011      	str	r1, [r2, #0]
  return result;
 800199c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80019a0:	6812      	ldr	r2, [r2, #0]
 80019a2:	fab2 f282 	clz	r2, r2
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	f002 021f 	and.w	r2, r2, #31
 80019b2:	2101      	movs	r1, #1
 80019b4:	fa01 f202 	lsl.w	r2, r1, r2
 80019b8:	4013      	ands	r3, r2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d099      	beq.n	80018f2 <HAL_RCC_OscConfig+0x8c6>
 80019be:	e063      	b.n	8001a88 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c0:	f7ff f852 	bl	8000a68 <HAL_GetTick>
 80019c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c8:	e00b      	b.n	80019e2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ca:	f7ff f84d 	bl	8000a68 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019da:	4293      	cmp	r3, r2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e225      	b.n	8001e2e <HAL_RCC_OscConfig+0xe02>
 80019e2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80019e6:	2202      	movs	r2, #2
 80019e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	fa93 f2a3 	rbit	r2, r3
 80019f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80019fe:	2202      	movs	r2, #2
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	fa93 f2a3 	rbit	r2, r3
 8001a0c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a10:	601a      	str	r2, [r3, #0]
  return result;
 8001a12:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a16:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a18:	fab3 f383 	clz	r3, r3
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	095b      	lsrs	r3, r3, #5
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	f043 0302 	orr.w	r3, r3, #2
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d102      	bne.n	8001a32 <HAL_RCC_OscConfig+0xa06>
 8001a2c:	4b90      	ldr	r3, [pc, #576]	; (8001c70 <HAL_RCC_OscConfig+0xc44>)
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	e00d      	b.n	8001a4e <HAL_RCC_OscConfig+0xa22>
 8001a32:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001a36:	2202      	movs	r2, #2
 8001a38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	fa93 f2a3 	rbit	r2, r3
 8001a44:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	4b89      	ldr	r3, [pc, #548]	; (8001c70 <HAL_RCC_OscConfig+0xc44>)
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001a52:	2102      	movs	r1, #2
 8001a54:	6011      	str	r1, [r2, #0]
 8001a56:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001a5a:	6812      	ldr	r2, [r2, #0]
 8001a5c:	fa92 f1a2 	rbit	r1, r2
 8001a60:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001a64:	6011      	str	r1, [r2, #0]
  return result;
 8001a66:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	fab2 f282 	clz	r2, r2
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	f002 021f 	and.w	r2, r2, #31
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1a0      	bne.n	80019ca <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a88:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d105      	bne.n	8001a9c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a90:	4b77      	ldr	r3, [pc, #476]	; (8001c70 <HAL_RCC_OscConfig+0xc44>)
 8001a92:	69db      	ldr	r3, [r3, #28]
 8001a94:	4a76      	ldr	r2, [pc, #472]	; (8001c70 <HAL_RCC_OscConfig+0xc44>)
 8001a96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 81c2 	beq.w	8001e2c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aa8:	4b71      	ldr	r3, [pc, #452]	; (8001c70 <HAL_RCC_OscConfig+0xc44>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 030c 	and.w	r3, r3, #12
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	f000 819c 	beq.w	8001dee <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	69db      	ldr	r3, [r3, #28]
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	f040 8114 	bne.w	8001cea <HAL_RCC_OscConfig+0xcbe>
 8001ac2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001ac6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001aca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001acc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	fa93 f2a3 	rbit	r2, r3
 8001ad6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001ada:	601a      	str	r2, [r3, #0]
  return result;
 8001adc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001ae0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae2:	fab3 f383 	clz	r3, r3
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001aec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	461a      	mov	r2, r3
 8001af4:	2300      	movs	r3, #0
 8001af6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af8:	f7fe ffb6 	bl	8000a68 <HAL_GetTick>
 8001afc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b00:	e009      	b.n	8001b16 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b02:	f7fe ffb1 	bl	8000a68 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e18b      	b.n	8001e2e <HAL_RCC_OscConfig+0xe02>
 8001b16:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b20:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	fa93 f2a3 	rbit	r2, r3
 8001b2a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b2e:	601a      	str	r2, [r3, #0]
  return result;
 8001b30:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b34:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b36:	fab3 f383 	clz	r3, r3
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	095b      	lsrs	r3, r3, #5
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d102      	bne.n	8001b50 <HAL_RCC_OscConfig+0xb24>
 8001b4a:	4b49      	ldr	r3, [pc, #292]	; (8001c70 <HAL_RCC_OscConfig+0xc44>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	e01b      	b.n	8001b88 <HAL_RCC_OscConfig+0xb5c>
 8001b50:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	fa93 f2a3 	rbit	r2, r3
 8001b64:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	fa93 f2a3 	rbit	r2, r3
 8001b7e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	4b3a      	ldr	r3, [pc, #232]	; (8001c70 <HAL_RCC_OscConfig+0xc44>)
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001b8c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b90:	6011      	str	r1, [r2, #0]
 8001b92:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	fa92 f1a2 	rbit	r1, r2
 8001b9c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001ba0:	6011      	str	r1, [r2, #0]
  return result;
 8001ba2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	fab2 f282 	clz	r2, r2
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	f042 0220 	orr.w	r2, r2, #32
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	f002 021f 	and.w	r2, r2, #31
 8001bb8:	2101      	movs	r1, #1
 8001bba:	fa01 f202 	lsl.w	r2, r1, r2
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d19e      	bne.n	8001b02 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bc4:	4b2a      	ldr	r3, [pc, #168]	; (8001c70 <HAL_RCC_OscConfig+0xc44>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bcc:	1d3b      	adds	r3, r7, #4
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	430b      	orrs	r3, r1
 8001bda:	4925      	ldr	r1, [pc, #148]	; (8001c70 <HAL_RCC_OscConfig+0xc44>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	604b      	str	r3, [r1, #4]
 8001be0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001be4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001be8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	fa93 f2a3 	rbit	r2, r3
 8001bf4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bf8:	601a      	str	r2, [r3, #0]
  return result;
 8001bfa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bfe:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c00:	fab3 f383 	clz	r3, r3
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c0a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	461a      	mov	r2, r3
 8001c12:	2301      	movs	r3, #1
 8001c14:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c16:	f7fe ff27 	bl	8000a68 <HAL_GetTick>
 8001c1a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c1e:	e009      	b.n	8001c34 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c20:	f7fe ff22 	bl	8000a68 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e0fc      	b.n	8001e2e <HAL_RCC_OscConfig+0xe02>
 8001c34:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	fa93 f2a3 	rbit	r2, r3
 8001c48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c4c:	601a      	str	r2, [r3, #0]
  return result;
 8001c4e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c52:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c54:	fab3 f383 	clz	r3, r3
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	095b      	lsrs	r3, r3, #5
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d105      	bne.n	8001c74 <HAL_RCC_OscConfig+0xc48>
 8001c68:	4b01      	ldr	r3, [pc, #4]	; (8001c70 <HAL_RCC_OscConfig+0xc44>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	e01e      	b.n	8001cac <HAL_RCC_OscConfig+0xc80>
 8001c6e:	bf00      	nop
 8001c70:	40021000 	.word	0x40021000
 8001c74:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	fa93 f2a3 	rbit	r2, r3
 8001c88:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	fa93 f2a3 	rbit	r2, r3
 8001ca2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	4b63      	ldr	r3, [pc, #396]	; (8001e38 <HAL_RCC_OscConfig+0xe0c>)
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cac:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001cb0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cb4:	6011      	str	r1, [r2, #0]
 8001cb6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	fa92 f1a2 	rbit	r1, r2
 8001cc0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001cc4:	6011      	str	r1, [r2, #0]
  return result;
 8001cc6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001cca:	6812      	ldr	r2, [r2, #0]
 8001ccc:	fab2 f282 	clz	r2, r2
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	f042 0220 	orr.w	r2, r2, #32
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	f002 021f 	and.w	r2, r2, #31
 8001cdc:	2101      	movs	r1, #1
 8001cde:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d09b      	beq.n	8001c20 <HAL_RCC_OscConfig+0xbf4>
 8001ce8:	e0a0      	b.n	8001e2c <HAL_RCC_OscConfig+0xe00>
 8001cea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cf2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	fa93 f2a3 	rbit	r2, r3
 8001cfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d02:	601a      	str	r2, [r3, #0]
  return result;
 8001d04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d08:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d0a:	fab3 f383 	clz	r3, r3
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d14:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d20:	f7fe fea2 	bl	8000a68 <HAL_GetTick>
 8001d24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d28:	e009      	b.n	8001d3e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d2a:	f7fe fe9d 	bl	8000a68 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e077      	b.n	8001e2e <HAL_RCC_OscConfig+0xe02>
 8001d3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	fa93 f2a3 	rbit	r2, r3
 8001d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d56:	601a      	str	r2, [r3, #0]
  return result;
 8001d58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d5e:	fab3 f383 	clz	r3, r3
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	095b      	lsrs	r3, r3, #5
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d102      	bne.n	8001d78 <HAL_RCC_OscConfig+0xd4c>
 8001d72:	4b31      	ldr	r3, [pc, #196]	; (8001e38 <HAL_RCC_OscConfig+0xe0c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	e01b      	b.n	8001db0 <HAL_RCC_OscConfig+0xd84>
 8001d78:	f107 0320 	add.w	r3, r7, #32
 8001d7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d82:	f107 0320 	add.w	r3, r7, #32
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	fa93 f2a3 	rbit	r2, r3
 8001d8c:	f107 031c 	add.w	r3, r7, #28
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	f107 0318 	add.w	r3, r7, #24
 8001d96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	f107 0318 	add.w	r3, r7, #24
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	fa93 f2a3 	rbit	r2, r3
 8001da6:	f107 0314 	add.w	r3, r7, #20
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	4b22      	ldr	r3, [pc, #136]	; (8001e38 <HAL_RCC_OscConfig+0xe0c>)
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	f107 0210 	add.w	r2, r7, #16
 8001db4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001db8:	6011      	str	r1, [r2, #0]
 8001dba:	f107 0210 	add.w	r2, r7, #16
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	fa92 f1a2 	rbit	r1, r2
 8001dc4:	f107 020c 	add.w	r2, r7, #12
 8001dc8:	6011      	str	r1, [r2, #0]
  return result;
 8001dca:	f107 020c 	add.w	r2, r7, #12
 8001dce:	6812      	ldr	r2, [r2, #0]
 8001dd0:	fab2 f282 	clz	r2, r2
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	f042 0220 	orr.w	r2, r2, #32
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	f002 021f 	and.w	r2, r2, #31
 8001de0:	2101      	movs	r1, #1
 8001de2:	fa01 f202 	lsl.w	r2, r1, r2
 8001de6:	4013      	ands	r3, r2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d19e      	bne.n	8001d2a <HAL_RCC_OscConfig+0xcfe>
 8001dec:	e01e      	b.n	8001e2c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dee:	1d3b      	adds	r3, r7, #4
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d101      	bne.n	8001dfc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e018      	b.n	8001e2e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dfc:	4b0e      	ldr	r3, [pc, #56]	; (8001e38 <HAL_RCC_OscConfig+0xe0c>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e04:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d108      	bne.n	8001e28 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001e16:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e1e:	1d3b      	adds	r3, r7, #4
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d001      	beq.n	8001e2c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e000      	b.n	8001e2e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40021000 	.word	0x40021000

08001e3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b09e      	sub	sp, #120	; 0x78
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e162      	b.n	800211a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e54:	4b90      	ldr	r3, [pc, #576]	; (8002098 <HAL_RCC_ClockConfig+0x25c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d910      	bls.n	8001e84 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e62:	4b8d      	ldr	r3, [pc, #564]	; (8002098 <HAL_RCC_ClockConfig+0x25c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f023 0207 	bic.w	r2, r3, #7
 8001e6a:	498b      	ldr	r1, [pc, #556]	; (8002098 <HAL_RCC_ClockConfig+0x25c>)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e72:	4b89      	ldr	r3, [pc, #548]	; (8002098 <HAL_RCC_ClockConfig+0x25c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d001      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e14a      	b.n	800211a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d008      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e90:	4b82      	ldr	r3, [pc, #520]	; (800209c <HAL_RCC_ClockConfig+0x260>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	497f      	ldr	r1, [pc, #508]	; (800209c <HAL_RCC_ClockConfig+0x260>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 80dc 	beq.w	8002068 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d13c      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xf6>
 8001eb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ebc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ec0:	fa93 f3a3 	rbit	r3, r3
 8001ec4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec8:	fab3 f383 	clz	r3, r3
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	095b      	lsrs	r3, r3, #5
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d102      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xa6>
 8001edc:	4b6f      	ldr	r3, [pc, #444]	; (800209c <HAL_RCC_ClockConfig+0x260>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	e00f      	b.n	8001f02 <HAL_RCC_ClockConfig+0xc6>
 8001ee2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ee6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001eea:	fa93 f3a3 	rbit	r3, r3
 8001eee:	667b      	str	r3, [r7, #100]	; 0x64
 8001ef0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ef4:	663b      	str	r3, [r7, #96]	; 0x60
 8001ef6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ef8:	fa93 f3a3 	rbit	r3, r3
 8001efc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001efe:	4b67      	ldr	r3, [pc, #412]	; (800209c <HAL_RCC_ClockConfig+0x260>)
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f06:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f0a:	fa92 f2a2 	rbit	r2, r2
 8001f0e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001f10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f12:	fab2 f282 	clz	r2, r2
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	f042 0220 	orr.w	r2, r2, #32
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	f002 021f 	and.w	r2, r2, #31
 8001f22:	2101      	movs	r1, #1
 8001f24:	fa01 f202 	lsl.w	r2, r1, r2
 8001f28:	4013      	ands	r3, r2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d17b      	bne.n	8002026 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e0f3      	b.n	800211a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d13c      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0x178>
 8001f3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f3e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f42:	fa93 f3a3 	rbit	r3, r3
 8001f46:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f4a:	fab3 f383 	clz	r3, r3
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	095b      	lsrs	r3, r3, #5
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d102      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x128>
 8001f5e:	4b4f      	ldr	r3, [pc, #316]	; (800209c <HAL_RCC_ClockConfig+0x260>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	e00f      	b.n	8001f84 <HAL_RCC_ClockConfig+0x148>
 8001f64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f68:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f6c:	fa93 f3a3 	rbit	r3, r3
 8001f70:	647b      	str	r3, [r7, #68]	; 0x44
 8001f72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f76:	643b      	str	r3, [r7, #64]	; 0x40
 8001f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f7a:	fa93 f3a3 	rbit	r3, r3
 8001f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f80:	4b46      	ldr	r3, [pc, #280]	; (800209c <HAL_RCC_ClockConfig+0x260>)
 8001f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f88:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f8c:	fa92 f2a2 	rbit	r2, r2
 8001f90:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001f92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f94:	fab2 f282 	clz	r2, r2
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	f042 0220 	orr.w	r2, r2, #32
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	f002 021f 	and.w	r2, r2, #31
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8001faa:	4013      	ands	r3, r2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d13a      	bne.n	8002026 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e0b2      	b.n	800211a <HAL_RCC_ClockConfig+0x2de>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fba:	fa93 f3a3 	rbit	r3, r3
 8001fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc2:	fab3 f383 	clz	r3, r3
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	095b      	lsrs	r3, r3, #5
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d102      	bne.n	8001fdc <HAL_RCC_ClockConfig+0x1a0>
 8001fd6:	4b31      	ldr	r3, [pc, #196]	; (800209c <HAL_RCC_ClockConfig+0x260>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	e00d      	b.n	8001ff8 <HAL_RCC_ClockConfig+0x1bc>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe2:	fa93 f3a3 	rbit	r3, r3
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe8:	2302      	movs	r3, #2
 8001fea:	623b      	str	r3, [r7, #32]
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	fa93 f3a3 	rbit	r3, r3
 8001ff2:	61fb      	str	r3, [r7, #28]
 8001ff4:	4b29      	ldr	r3, [pc, #164]	; (800209c <HAL_RCC_ClockConfig+0x260>)
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	61ba      	str	r2, [r7, #24]
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	fa92 f2a2 	rbit	r2, r2
 8002002:	617a      	str	r2, [r7, #20]
  return result;
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	fab2 f282 	clz	r2, r2
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	f042 0220 	orr.w	r2, r2, #32
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	f002 021f 	and.w	r2, r2, #31
 8002016:	2101      	movs	r1, #1
 8002018:	fa01 f202 	lsl.w	r2, r1, r2
 800201c:	4013      	ands	r3, r2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e079      	b.n	800211a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002026:	4b1d      	ldr	r3, [pc, #116]	; (800209c <HAL_RCC_ClockConfig+0x260>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f023 0203 	bic.w	r2, r3, #3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	491a      	ldr	r1, [pc, #104]	; (800209c <HAL_RCC_ClockConfig+0x260>)
 8002034:	4313      	orrs	r3, r2
 8002036:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002038:	f7fe fd16 	bl	8000a68 <HAL_GetTick>
 800203c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203e:	e00a      	b.n	8002056 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002040:	f7fe fd12 	bl	8000a68 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	f241 3288 	movw	r2, #5000	; 0x1388
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e061      	b.n	800211a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002056:	4b11      	ldr	r3, [pc, #68]	; (800209c <HAL_RCC_ClockConfig+0x260>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 020c 	and.w	r2, r3, #12
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	429a      	cmp	r2, r3
 8002066:	d1eb      	bne.n	8002040 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <HAL_RCC_ClockConfig+0x25c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	429a      	cmp	r2, r3
 8002074:	d214      	bcs.n	80020a0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002076:	4b08      	ldr	r3, [pc, #32]	; (8002098 <HAL_RCC_ClockConfig+0x25c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f023 0207 	bic.w	r2, r3, #7
 800207e:	4906      	ldr	r1, [pc, #24]	; (8002098 <HAL_RCC_ClockConfig+0x25c>)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	4313      	orrs	r3, r2
 8002084:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002086:	4b04      	ldr	r3, [pc, #16]	; (8002098 <HAL_RCC_ClockConfig+0x25c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d005      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e040      	b.n	800211a <HAL_RCC_ClockConfig+0x2de>
 8002098:	40022000 	.word	0x40022000
 800209c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d008      	beq.n	80020be <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020ac:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <HAL_RCC_ClockConfig+0x2e8>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	491a      	ldr	r1, [pc, #104]	; (8002124 <HAL_RCC_ClockConfig+0x2e8>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d009      	beq.n	80020de <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ca:	4b16      	ldr	r3, [pc, #88]	; (8002124 <HAL_RCC_ClockConfig+0x2e8>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4912      	ldr	r1, [pc, #72]	; (8002124 <HAL_RCC_ClockConfig+0x2e8>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020de:	f000 f829 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 80020e2:	4601      	mov	r1, r0
 80020e4:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <HAL_RCC_ClockConfig+0x2e8>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020ec:	22f0      	movs	r2, #240	; 0xf0
 80020ee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	fa92 f2a2 	rbit	r2, r2
 80020f6:	60fa      	str	r2, [r7, #12]
  return result;
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	fab2 f282 	clz	r2, r2
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	40d3      	lsrs	r3, r2
 8002102:	4a09      	ldr	r2, [pc, #36]	; (8002128 <HAL_RCC_ClockConfig+0x2ec>)
 8002104:	5cd3      	ldrb	r3, [r2, r3]
 8002106:	fa21 f303 	lsr.w	r3, r1, r3
 800210a:	4a08      	ldr	r2, [pc, #32]	; (800212c <HAL_RCC_ClockConfig+0x2f0>)
 800210c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800210e:	4b08      	ldr	r3, [pc, #32]	; (8002130 <HAL_RCC_ClockConfig+0x2f4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fc64 	bl	80009e0 <HAL_InitTick>
  
  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3778      	adds	r7, #120	; 0x78
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40021000 	.word	0x40021000
 8002128:	080030cc 	.word	0x080030cc
 800212c:	20000044 	.word	0x20000044
 8002130:	20000048 	.word	0x20000048

08002134 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002134:	b480      	push	{r7}
 8002136:	b08b      	sub	sp, #44	; 0x2c
 8002138:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
 8002142:	2300      	movs	r3, #0
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800214a:	2300      	movs	r3, #0
 800214c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800214e:	4b29      	ldr	r3, [pc, #164]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f003 030c 	and.w	r3, r3, #12
 800215a:	2b04      	cmp	r3, #4
 800215c:	d002      	beq.n	8002164 <HAL_RCC_GetSysClockFreq+0x30>
 800215e:	2b08      	cmp	r3, #8
 8002160:	d003      	beq.n	800216a <HAL_RCC_GetSysClockFreq+0x36>
 8002162:	e03c      	b.n	80021de <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002164:	4b24      	ldr	r3, [pc, #144]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002166:	623b      	str	r3, [r7, #32]
      break;
 8002168:	e03c      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002170:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002174:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	fa92 f2a2 	rbit	r2, r2
 800217c:	607a      	str	r2, [r7, #4]
  return result;
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	fab2 f282 	clz	r2, r2
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	40d3      	lsrs	r3, r2
 8002188:	4a1c      	ldr	r2, [pc, #112]	; (80021fc <HAL_RCC_GetSysClockFreq+0xc8>)
 800218a:	5cd3      	ldrb	r3, [r2, r3]
 800218c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800218e:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	220f      	movs	r2, #15
 8002198:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	fa92 f2a2 	rbit	r2, r2
 80021a0:	60fa      	str	r2, [r7, #12]
  return result;
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	fab2 f282 	clz	r2, r2
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	40d3      	lsrs	r3, r2
 80021ac:	4a14      	ldr	r2, [pc, #80]	; (8002200 <HAL_RCC_GetSysClockFreq+0xcc>)
 80021ae:	5cd3      	ldrb	r3, [r2, r3]
 80021b0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d008      	beq.n	80021ce <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021bc:	4a0e      	ldr	r2, [pc, #56]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	fb02 f303 	mul.w	r3, r2, r3
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
 80021cc:	e004      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	4a0c      	ldr	r2, [pc, #48]	; (8002204 <HAL_RCC_GetSysClockFreq+0xd0>)
 80021d2:	fb02 f303 	mul.w	r3, r2, r3
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	623b      	str	r3, [r7, #32]
      break;
 80021dc:	e002      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021de:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021e0:	623b      	str	r3, [r7, #32]
      break;
 80021e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021e4:	6a3b      	ldr	r3, [r7, #32]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	372c      	adds	r7, #44	; 0x2c
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40021000 	.word	0x40021000
 80021f8:	007a1200 	.word	0x007a1200
 80021fc:	080030fc 	.word	0x080030fc
 8002200:	0800310c 	.word	0x0800310c
 8002204:	003d0900 	.word	0x003d0900

08002208 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e01d      	b.n	8002256 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d106      	bne.n	8002234 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7fe fa1c 	bl	800066c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2202      	movs	r2, #2
 8002238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3304      	adds	r3, #4
 8002244:	4619      	mov	r1, r3
 8002246:	4610      	mov	r0, r2
 8002248:	f000 f9a6 	bl	8002598 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0201 	orr.w	r2, r2, #1
 8002276:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <HAL_TIM_Base_Start_IT+0x50>)
 8002280:	4013      	ands	r3, r2
 8002282:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2b06      	cmp	r3, #6
 8002288:	d00b      	beq.n	80022a2 <HAL_TIM_Base_Start_IT+0x42>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002290:	d007      	beq.n	80022a2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f042 0201 	orr.w	r2, r2, #1
 80022a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	00010007 	.word	0x00010007

080022b4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68da      	ldr	r2, [r3, #12]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0201 	bic.w	r2, r2, #1
 80022ca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6a1a      	ldr	r2, [r3, #32]
 80022d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80022d6:	4013      	ands	r3, r2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d10f      	bne.n	80022fc <HAL_TIM_Base_Stop_IT+0x48>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6a1a      	ldr	r2, [r3, #32]
 80022e2:	f240 4344 	movw	r3, #1092	; 0x444
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d107      	bne.n	80022fc <HAL_TIM_Base_Stop_IT+0x48>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 0201 	bic.w	r2, r2, #1
 80022fa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b02      	cmp	r3, #2
 800231e:	d122      	bne.n	8002366 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b02      	cmp	r3, #2
 800232c:	d11b      	bne.n	8002366 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f06f 0202 	mvn.w	r2, #2
 8002336:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	f003 0303 	and.w	r3, r3, #3
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 f905 	bl	800255c <HAL_TIM_IC_CaptureCallback>
 8002352:	e005      	b.n	8002360 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 f8f7 	bl	8002548 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f908 	bl	8002570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b04      	cmp	r3, #4
 8002372:	d122      	bne.n	80023ba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	f003 0304 	and.w	r3, r3, #4
 800237e:	2b04      	cmp	r3, #4
 8002380:	d11b      	bne.n	80023ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f06f 0204 	mvn.w	r2, #4
 800238a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2202      	movs	r2, #2
 8002390:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 f8db 	bl	800255c <HAL_TIM_IC_CaptureCallback>
 80023a6:	e005      	b.n	80023b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 f8cd 	bl	8002548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f8de 	bl	8002570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d122      	bne.n	800240e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f003 0308 	and.w	r3, r3, #8
 80023d2:	2b08      	cmp	r3, #8
 80023d4:	d11b      	bne.n	800240e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f06f 0208 	mvn.w	r2, #8
 80023de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2204      	movs	r2, #4
 80023e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 f8b1 	bl	800255c <HAL_TIM_IC_CaptureCallback>
 80023fa:	e005      	b.n	8002408 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f8a3 	bl	8002548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f8b4 	bl	8002570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	f003 0310 	and.w	r3, r3, #16
 8002418:	2b10      	cmp	r3, #16
 800241a:	d122      	bne.n	8002462 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f003 0310 	and.w	r3, r3, #16
 8002426:	2b10      	cmp	r3, #16
 8002428:	d11b      	bne.n	8002462 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f06f 0210 	mvn.w	r2, #16
 8002432:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2208      	movs	r2, #8
 8002438:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 f887 	bl	800255c <HAL_TIM_IC_CaptureCallback>
 800244e:	e005      	b.n	800245c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f879 	bl	8002548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f88a 	bl	8002570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b01      	cmp	r3, #1
 800246e:	d10e      	bne.n	800248e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b01      	cmp	r3, #1
 800247c:	d107      	bne.n	800248e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f06f 0201 	mvn.w	r2, #1
 8002486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7fd ff47 	bl	800031c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002498:	2b80      	cmp	r3, #128	; 0x80
 800249a:	d10e      	bne.n	80024ba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a6:	2b80      	cmp	r3, #128	; 0x80
 80024a8:	d107      	bne.n	80024ba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 f989 	bl	80027cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024c8:	d10e      	bne.n	80024e8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d4:	2b80      	cmp	r3, #128	; 0x80
 80024d6:	d107      	bne.n	80024e8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80024e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f97c 	bl	80027e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f2:	2b40      	cmp	r3, #64	; 0x40
 80024f4:	d10e      	bne.n	8002514 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002500:	2b40      	cmp	r3, #64	; 0x40
 8002502:	d107      	bne.n	8002514 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800250c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f838 	bl	8002584 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	f003 0320 	and.w	r3, r3, #32
 800251e:	2b20      	cmp	r3, #32
 8002520:	d10e      	bne.n	8002540 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	f003 0320 	and.w	r3, r3, #32
 800252c:	2b20      	cmp	r3, #32
 800252e:	d107      	bne.n	8002540 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f06f 0220 	mvn.w	r2, #32
 8002538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f93c 	bl	80027b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002540:	bf00      	nop
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a3c      	ldr	r2, [pc, #240]	; (800269c <TIM_Base_SetConfig+0x104>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d00f      	beq.n	80025d0 <TIM_Base_SetConfig+0x38>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b6:	d00b      	beq.n	80025d0 <TIM_Base_SetConfig+0x38>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a39      	ldr	r2, [pc, #228]	; (80026a0 <TIM_Base_SetConfig+0x108>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d007      	beq.n	80025d0 <TIM_Base_SetConfig+0x38>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a38      	ldr	r2, [pc, #224]	; (80026a4 <TIM_Base_SetConfig+0x10c>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d003      	beq.n	80025d0 <TIM_Base_SetConfig+0x38>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a37      	ldr	r2, [pc, #220]	; (80026a8 <TIM_Base_SetConfig+0x110>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d108      	bne.n	80025e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	4313      	orrs	r3, r2
 80025e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a2d      	ldr	r2, [pc, #180]	; (800269c <TIM_Base_SetConfig+0x104>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d01b      	beq.n	8002622 <TIM_Base_SetConfig+0x8a>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f0:	d017      	beq.n	8002622 <TIM_Base_SetConfig+0x8a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a2a      	ldr	r2, [pc, #168]	; (80026a0 <TIM_Base_SetConfig+0x108>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d013      	beq.n	8002622 <TIM_Base_SetConfig+0x8a>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a29      	ldr	r2, [pc, #164]	; (80026a4 <TIM_Base_SetConfig+0x10c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d00f      	beq.n	8002622 <TIM_Base_SetConfig+0x8a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a28      	ldr	r2, [pc, #160]	; (80026a8 <TIM_Base_SetConfig+0x110>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d00b      	beq.n	8002622 <TIM_Base_SetConfig+0x8a>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a27      	ldr	r2, [pc, #156]	; (80026ac <TIM_Base_SetConfig+0x114>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d007      	beq.n	8002622 <TIM_Base_SetConfig+0x8a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a26      	ldr	r2, [pc, #152]	; (80026b0 <TIM_Base_SetConfig+0x118>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d003      	beq.n	8002622 <TIM_Base_SetConfig+0x8a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a25      	ldr	r2, [pc, #148]	; (80026b4 <TIM_Base_SetConfig+0x11c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d108      	bne.n	8002634 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002628:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	4313      	orrs	r3, r2
 8002632:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	4313      	orrs	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a10      	ldr	r2, [pc, #64]	; (800269c <TIM_Base_SetConfig+0x104>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d00f      	beq.n	8002680 <TIM_Base_SetConfig+0xe8>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a11      	ldr	r2, [pc, #68]	; (80026a8 <TIM_Base_SetConfig+0x110>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d00b      	beq.n	8002680 <TIM_Base_SetConfig+0xe8>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a10      	ldr	r2, [pc, #64]	; (80026ac <TIM_Base_SetConfig+0x114>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d007      	beq.n	8002680 <TIM_Base_SetConfig+0xe8>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a0f      	ldr	r2, [pc, #60]	; (80026b0 <TIM_Base_SetConfig+0x118>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d003      	beq.n	8002680 <TIM_Base_SetConfig+0xe8>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a0e      	ldr	r2, [pc, #56]	; (80026b4 <TIM_Base_SetConfig+0x11c>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d103      	bne.n	8002688 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	691a      	ldr	r2, [r3, #16]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	615a      	str	r2, [r3, #20]
}
 800268e:	bf00      	nop
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40012c00 	.word	0x40012c00
 80026a0:	40000400 	.word	0x40000400
 80026a4:	40000800 	.word	0x40000800
 80026a8:	40013400 	.word	0x40013400
 80026ac:	40014000 	.word	0x40014000
 80026b0:	40014400 	.word	0x40014400
 80026b4:	40014800 	.word	0x40014800

080026b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d101      	bne.n	80026d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026cc:	2302      	movs	r3, #2
 80026ce:	e063      	b.n	8002798 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2202      	movs	r2, #2
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a2b      	ldr	r2, [pc, #172]	; (80027a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d004      	beq.n	8002704 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a2a      	ldr	r2, [pc, #168]	; (80027a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d108      	bne.n	8002716 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800270a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	4313      	orrs	r3, r2
 8002714:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800271c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	4313      	orrs	r3, r2
 8002726:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a1b      	ldr	r2, [pc, #108]	; (80027a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d018      	beq.n	800276c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002742:	d013      	beq.n	800276c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a18      	ldr	r2, [pc, #96]	; (80027ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d00e      	beq.n	800276c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a17      	ldr	r2, [pc, #92]	; (80027b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d009      	beq.n	800276c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a12      	ldr	r2, [pc, #72]	; (80027a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d004      	beq.n	800276c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a13      	ldr	r2, [pc, #76]	; (80027b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d10c      	bne.n	8002786 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002772:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	4313      	orrs	r3, r2
 800277c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	40012c00 	.word	0x40012c00
 80027a8:	40013400 	.word	0x40013400
 80027ac:	40000400 	.word	0x40000400
 80027b0:	40000800 	.word	0x40000800
 80027b4:	40014000 	.word	0x40014000

080027b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <__errno>:
 80027f4:	4b01      	ldr	r3, [pc, #4]	; (80027fc <__errno+0x8>)
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	20000050 	.word	0x20000050

08002800 <__libc_init_array>:
 8002800:	b570      	push	{r4, r5, r6, lr}
 8002802:	4e0d      	ldr	r6, [pc, #52]	; (8002838 <__libc_init_array+0x38>)
 8002804:	4c0d      	ldr	r4, [pc, #52]	; (800283c <__libc_init_array+0x3c>)
 8002806:	1ba4      	subs	r4, r4, r6
 8002808:	10a4      	asrs	r4, r4, #2
 800280a:	2500      	movs	r5, #0
 800280c:	42a5      	cmp	r5, r4
 800280e:	d109      	bne.n	8002824 <__libc_init_array+0x24>
 8002810:	4e0b      	ldr	r6, [pc, #44]	; (8002840 <__libc_init_array+0x40>)
 8002812:	4c0c      	ldr	r4, [pc, #48]	; (8002844 <__libc_init_array+0x44>)
 8002814:	f000 fc3a 	bl	800308c <_init>
 8002818:	1ba4      	subs	r4, r4, r6
 800281a:	10a4      	asrs	r4, r4, #2
 800281c:	2500      	movs	r5, #0
 800281e:	42a5      	cmp	r5, r4
 8002820:	d105      	bne.n	800282e <__libc_init_array+0x2e>
 8002822:	bd70      	pop	{r4, r5, r6, pc}
 8002824:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002828:	4798      	blx	r3
 800282a:	3501      	adds	r5, #1
 800282c:	e7ee      	b.n	800280c <__libc_init_array+0xc>
 800282e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002832:	4798      	blx	r3
 8002834:	3501      	adds	r5, #1
 8002836:	e7f2      	b.n	800281e <__libc_init_array+0x1e>
 8002838:	08003150 	.word	0x08003150
 800283c:	08003150 	.word	0x08003150
 8002840:	08003150 	.word	0x08003150
 8002844:	08003154 	.word	0x08003154

08002848 <memset>:
 8002848:	4402      	add	r2, r0
 800284a:	4603      	mov	r3, r0
 800284c:	4293      	cmp	r3, r2
 800284e:	d100      	bne.n	8002852 <memset+0xa>
 8002850:	4770      	bx	lr
 8002852:	f803 1b01 	strb.w	r1, [r3], #1
 8002856:	e7f9      	b.n	800284c <memset+0x4>

08002858 <sniprintf>:
 8002858:	b40c      	push	{r2, r3}
 800285a:	b530      	push	{r4, r5, lr}
 800285c:	4b17      	ldr	r3, [pc, #92]	; (80028bc <sniprintf+0x64>)
 800285e:	1e0c      	subs	r4, r1, #0
 8002860:	b09d      	sub	sp, #116	; 0x74
 8002862:	681d      	ldr	r5, [r3, #0]
 8002864:	da08      	bge.n	8002878 <sniprintf+0x20>
 8002866:	238b      	movs	r3, #139	; 0x8b
 8002868:	602b      	str	r3, [r5, #0]
 800286a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800286e:	b01d      	add	sp, #116	; 0x74
 8002870:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002874:	b002      	add	sp, #8
 8002876:	4770      	bx	lr
 8002878:	f44f 7302 	mov.w	r3, #520	; 0x208
 800287c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002880:	bf14      	ite	ne
 8002882:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8002886:	4623      	moveq	r3, r4
 8002888:	9304      	str	r3, [sp, #16]
 800288a:	9307      	str	r3, [sp, #28]
 800288c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002890:	9002      	str	r0, [sp, #8]
 8002892:	9006      	str	r0, [sp, #24]
 8002894:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002898:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800289a:	ab21      	add	r3, sp, #132	; 0x84
 800289c:	a902      	add	r1, sp, #8
 800289e:	4628      	mov	r0, r5
 80028a0:	9301      	str	r3, [sp, #4]
 80028a2:	f000 f867 	bl	8002974 <_svfiprintf_r>
 80028a6:	1c43      	adds	r3, r0, #1
 80028a8:	bfbc      	itt	lt
 80028aa:	238b      	movlt	r3, #139	; 0x8b
 80028ac:	602b      	strlt	r3, [r5, #0]
 80028ae:	2c00      	cmp	r4, #0
 80028b0:	d0dd      	beq.n	800286e <sniprintf+0x16>
 80028b2:	9b02      	ldr	r3, [sp, #8]
 80028b4:	2200      	movs	r2, #0
 80028b6:	701a      	strb	r2, [r3, #0]
 80028b8:	e7d9      	b.n	800286e <sniprintf+0x16>
 80028ba:	bf00      	nop
 80028bc:	20000050 	.word	0x20000050

080028c0 <__ssputs_r>:
 80028c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028c4:	688e      	ldr	r6, [r1, #8]
 80028c6:	429e      	cmp	r6, r3
 80028c8:	4682      	mov	sl, r0
 80028ca:	460c      	mov	r4, r1
 80028cc:	4690      	mov	r8, r2
 80028ce:	4699      	mov	r9, r3
 80028d0:	d837      	bhi.n	8002942 <__ssputs_r+0x82>
 80028d2:	898a      	ldrh	r2, [r1, #12]
 80028d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80028d8:	d031      	beq.n	800293e <__ssputs_r+0x7e>
 80028da:	6825      	ldr	r5, [r4, #0]
 80028dc:	6909      	ldr	r1, [r1, #16]
 80028de:	1a6f      	subs	r7, r5, r1
 80028e0:	6965      	ldr	r5, [r4, #20]
 80028e2:	2302      	movs	r3, #2
 80028e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80028e8:	fb95 f5f3 	sdiv	r5, r5, r3
 80028ec:	f109 0301 	add.w	r3, r9, #1
 80028f0:	443b      	add	r3, r7
 80028f2:	429d      	cmp	r5, r3
 80028f4:	bf38      	it	cc
 80028f6:	461d      	movcc	r5, r3
 80028f8:	0553      	lsls	r3, r2, #21
 80028fa:	d530      	bpl.n	800295e <__ssputs_r+0x9e>
 80028fc:	4629      	mov	r1, r5
 80028fe:	f000 fb2b 	bl	8002f58 <_malloc_r>
 8002902:	4606      	mov	r6, r0
 8002904:	b950      	cbnz	r0, 800291c <__ssputs_r+0x5c>
 8002906:	230c      	movs	r3, #12
 8002908:	f8ca 3000 	str.w	r3, [sl]
 800290c:	89a3      	ldrh	r3, [r4, #12]
 800290e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002912:	81a3      	strh	r3, [r4, #12]
 8002914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800291c:	463a      	mov	r2, r7
 800291e:	6921      	ldr	r1, [r4, #16]
 8002920:	f000 faa8 	bl	8002e74 <memcpy>
 8002924:	89a3      	ldrh	r3, [r4, #12]
 8002926:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800292a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800292e:	81a3      	strh	r3, [r4, #12]
 8002930:	6126      	str	r6, [r4, #16]
 8002932:	6165      	str	r5, [r4, #20]
 8002934:	443e      	add	r6, r7
 8002936:	1bed      	subs	r5, r5, r7
 8002938:	6026      	str	r6, [r4, #0]
 800293a:	60a5      	str	r5, [r4, #8]
 800293c:	464e      	mov	r6, r9
 800293e:	454e      	cmp	r6, r9
 8002940:	d900      	bls.n	8002944 <__ssputs_r+0x84>
 8002942:	464e      	mov	r6, r9
 8002944:	4632      	mov	r2, r6
 8002946:	4641      	mov	r1, r8
 8002948:	6820      	ldr	r0, [r4, #0]
 800294a:	f000 fa9e 	bl	8002e8a <memmove>
 800294e:	68a3      	ldr	r3, [r4, #8]
 8002950:	1b9b      	subs	r3, r3, r6
 8002952:	60a3      	str	r3, [r4, #8]
 8002954:	6823      	ldr	r3, [r4, #0]
 8002956:	441e      	add	r6, r3
 8002958:	6026      	str	r6, [r4, #0]
 800295a:	2000      	movs	r0, #0
 800295c:	e7dc      	b.n	8002918 <__ssputs_r+0x58>
 800295e:	462a      	mov	r2, r5
 8002960:	f000 fb54 	bl	800300c <_realloc_r>
 8002964:	4606      	mov	r6, r0
 8002966:	2800      	cmp	r0, #0
 8002968:	d1e2      	bne.n	8002930 <__ssputs_r+0x70>
 800296a:	6921      	ldr	r1, [r4, #16]
 800296c:	4650      	mov	r0, sl
 800296e:	f000 faa5 	bl	8002ebc <_free_r>
 8002972:	e7c8      	b.n	8002906 <__ssputs_r+0x46>

08002974 <_svfiprintf_r>:
 8002974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002978:	461d      	mov	r5, r3
 800297a:	898b      	ldrh	r3, [r1, #12]
 800297c:	061f      	lsls	r7, r3, #24
 800297e:	b09d      	sub	sp, #116	; 0x74
 8002980:	4680      	mov	r8, r0
 8002982:	460c      	mov	r4, r1
 8002984:	4616      	mov	r6, r2
 8002986:	d50f      	bpl.n	80029a8 <_svfiprintf_r+0x34>
 8002988:	690b      	ldr	r3, [r1, #16]
 800298a:	b96b      	cbnz	r3, 80029a8 <_svfiprintf_r+0x34>
 800298c:	2140      	movs	r1, #64	; 0x40
 800298e:	f000 fae3 	bl	8002f58 <_malloc_r>
 8002992:	6020      	str	r0, [r4, #0]
 8002994:	6120      	str	r0, [r4, #16]
 8002996:	b928      	cbnz	r0, 80029a4 <_svfiprintf_r+0x30>
 8002998:	230c      	movs	r3, #12
 800299a:	f8c8 3000 	str.w	r3, [r8]
 800299e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029a2:	e0c8      	b.n	8002b36 <_svfiprintf_r+0x1c2>
 80029a4:	2340      	movs	r3, #64	; 0x40
 80029a6:	6163      	str	r3, [r4, #20]
 80029a8:	2300      	movs	r3, #0
 80029aa:	9309      	str	r3, [sp, #36]	; 0x24
 80029ac:	2320      	movs	r3, #32
 80029ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80029b2:	2330      	movs	r3, #48	; 0x30
 80029b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80029b8:	9503      	str	r5, [sp, #12]
 80029ba:	f04f 0b01 	mov.w	fp, #1
 80029be:	4637      	mov	r7, r6
 80029c0:	463d      	mov	r5, r7
 80029c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80029c6:	b10b      	cbz	r3, 80029cc <_svfiprintf_r+0x58>
 80029c8:	2b25      	cmp	r3, #37	; 0x25
 80029ca:	d13e      	bne.n	8002a4a <_svfiprintf_r+0xd6>
 80029cc:	ebb7 0a06 	subs.w	sl, r7, r6
 80029d0:	d00b      	beq.n	80029ea <_svfiprintf_r+0x76>
 80029d2:	4653      	mov	r3, sl
 80029d4:	4632      	mov	r2, r6
 80029d6:	4621      	mov	r1, r4
 80029d8:	4640      	mov	r0, r8
 80029da:	f7ff ff71 	bl	80028c0 <__ssputs_r>
 80029de:	3001      	adds	r0, #1
 80029e0:	f000 80a4 	beq.w	8002b2c <_svfiprintf_r+0x1b8>
 80029e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029e6:	4453      	add	r3, sl
 80029e8:	9309      	str	r3, [sp, #36]	; 0x24
 80029ea:	783b      	ldrb	r3, [r7, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 809d 	beq.w	8002b2c <_svfiprintf_r+0x1b8>
 80029f2:	2300      	movs	r3, #0
 80029f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80029fc:	9304      	str	r3, [sp, #16]
 80029fe:	9307      	str	r3, [sp, #28]
 8002a00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a04:	931a      	str	r3, [sp, #104]	; 0x68
 8002a06:	462f      	mov	r7, r5
 8002a08:	2205      	movs	r2, #5
 8002a0a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002a0e:	4850      	ldr	r0, [pc, #320]	; (8002b50 <_svfiprintf_r+0x1dc>)
 8002a10:	f7fd fbde 	bl	80001d0 <memchr>
 8002a14:	9b04      	ldr	r3, [sp, #16]
 8002a16:	b9d0      	cbnz	r0, 8002a4e <_svfiprintf_r+0xda>
 8002a18:	06d9      	lsls	r1, r3, #27
 8002a1a:	bf44      	itt	mi
 8002a1c:	2220      	movmi	r2, #32
 8002a1e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002a22:	071a      	lsls	r2, r3, #28
 8002a24:	bf44      	itt	mi
 8002a26:	222b      	movmi	r2, #43	; 0x2b
 8002a28:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002a2c:	782a      	ldrb	r2, [r5, #0]
 8002a2e:	2a2a      	cmp	r2, #42	; 0x2a
 8002a30:	d015      	beq.n	8002a5e <_svfiprintf_r+0xea>
 8002a32:	9a07      	ldr	r2, [sp, #28]
 8002a34:	462f      	mov	r7, r5
 8002a36:	2000      	movs	r0, #0
 8002a38:	250a      	movs	r5, #10
 8002a3a:	4639      	mov	r1, r7
 8002a3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a40:	3b30      	subs	r3, #48	; 0x30
 8002a42:	2b09      	cmp	r3, #9
 8002a44:	d94d      	bls.n	8002ae2 <_svfiprintf_r+0x16e>
 8002a46:	b1b8      	cbz	r0, 8002a78 <_svfiprintf_r+0x104>
 8002a48:	e00f      	b.n	8002a6a <_svfiprintf_r+0xf6>
 8002a4a:	462f      	mov	r7, r5
 8002a4c:	e7b8      	b.n	80029c0 <_svfiprintf_r+0x4c>
 8002a4e:	4a40      	ldr	r2, [pc, #256]	; (8002b50 <_svfiprintf_r+0x1dc>)
 8002a50:	1a80      	subs	r0, r0, r2
 8002a52:	fa0b f000 	lsl.w	r0, fp, r0
 8002a56:	4318      	orrs	r0, r3
 8002a58:	9004      	str	r0, [sp, #16]
 8002a5a:	463d      	mov	r5, r7
 8002a5c:	e7d3      	b.n	8002a06 <_svfiprintf_r+0x92>
 8002a5e:	9a03      	ldr	r2, [sp, #12]
 8002a60:	1d11      	adds	r1, r2, #4
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	9103      	str	r1, [sp, #12]
 8002a66:	2a00      	cmp	r2, #0
 8002a68:	db01      	blt.n	8002a6e <_svfiprintf_r+0xfa>
 8002a6a:	9207      	str	r2, [sp, #28]
 8002a6c:	e004      	b.n	8002a78 <_svfiprintf_r+0x104>
 8002a6e:	4252      	negs	r2, r2
 8002a70:	f043 0302 	orr.w	r3, r3, #2
 8002a74:	9207      	str	r2, [sp, #28]
 8002a76:	9304      	str	r3, [sp, #16]
 8002a78:	783b      	ldrb	r3, [r7, #0]
 8002a7a:	2b2e      	cmp	r3, #46	; 0x2e
 8002a7c:	d10c      	bne.n	8002a98 <_svfiprintf_r+0x124>
 8002a7e:	787b      	ldrb	r3, [r7, #1]
 8002a80:	2b2a      	cmp	r3, #42	; 0x2a
 8002a82:	d133      	bne.n	8002aec <_svfiprintf_r+0x178>
 8002a84:	9b03      	ldr	r3, [sp, #12]
 8002a86:	1d1a      	adds	r2, r3, #4
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	9203      	str	r2, [sp, #12]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	bfb8      	it	lt
 8002a90:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002a94:	3702      	adds	r7, #2
 8002a96:	9305      	str	r3, [sp, #20]
 8002a98:	4d2e      	ldr	r5, [pc, #184]	; (8002b54 <_svfiprintf_r+0x1e0>)
 8002a9a:	7839      	ldrb	r1, [r7, #0]
 8002a9c:	2203      	movs	r2, #3
 8002a9e:	4628      	mov	r0, r5
 8002aa0:	f7fd fb96 	bl	80001d0 <memchr>
 8002aa4:	b138      	cbz	r0, 8002ab6 <_svfiprintf_r+0x142>
 8002aa6:	2340      	movs	r3, #64	; 0x40
 8002aa8:	1b40      	subs	r0, r0, r5
 8002aaa:	fa03 f000 	lsl.w	r0, r3, r0
 8002aae:	9b04      	ldr	r3, [sp, #16]
 8002ab0:	4303      	orrs	r3, r0
 8002ab2:	3701      	adds	r7, #1
 8002ab4:	9304      	str	r3, [sp, #16]
 8002ab6:	7839      	ldrb	r1, [r7, #0]
 8002ab8:	4827      	ldr	r0, [pc, #156]	; (8002b58 <_svfiprintf_r+0x1e4>)
 8002aba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002abe:	2206      	movs	r2, #6
 8002ac0:	1c7e      	adds	r6, r7, #1
 8002ac2:	f7fd fb85 	bl	80001d0 <memchr>
 8002ac6:	2800      	cmp	r0, #0
 8002ac8:	d038      	beq.n	8002b3c <_svfiprintf_r+0x1c8>
 8002aca:	4b24      	ldr	r3, [pc, #144]	; (8002b5c <_svfiprintf_r+0x1e8>)
 8002acc:	bb13      	cbnz	r3, 8002b14 <_svfiprintf_r+0x1a0>
 8002ace:	9b03      	ldr	r3, [sp, #12]
 8002ad0:	3307      	adds	r3, #7
 8002ad2:	f023 0307 	bic.w	r3, r3, #7
 8002ad6:	3308      	adds	r3, #8
 8002ad8:	9303      	str	r3, [sp, #12]
 8002ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002adc:	444b      	add	r3, r9
 8002ade:	9309      	str	r3, [sp, #36]	; 0x24
 8002ae0:	e76d      	b.n	80029be <_svfiprintf_r+0x4a>
 8002ae2:	fb05 3202 	mla	r2, r5, r2, r3
 8002ae6:	2001      	movs	r0, #1
 8002ae8:	460f      	mov	r7, r1
 8002aea:	e7a6      	b.n	8002a3a <_svfiprintf_r+0xc6>
 8002aec:	2300      	movs	r3, #0
 8002aee:	3701      	adds	r7, #1
 8002af0:	9305      	str	r3, [sp, #20]
 8002af2:	4619      	mov	r1, r3
 8002af4:	250a      	movs	r5, #10
 8002af6:	4638      	mov	r0, r7
 8002af8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002afc:	3a30      	subs	r2, #48	; 0x30
 8002afe:	2a09      	cmp	r2, #9
 8002b00:	d903      	bls.n	8002b0a <_svfiprintf_r+0x196>
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0c8      	beq.n	8002a98 <_svfiprintf_r+0x124>
 8002b06:	9105      	str	r1, [sp, #20]
 8002b08:	e7c6      	b.n	8002a98 <_svfiprintf_r+0x124>
 8002b0a:	fb05 2101 	mla	r1, r5, r1, r2
 8002b0e:	2301      	movs	r3, #1
 8002b10:	4607      	mov	r7, r0
 8002b12:	e7f0      	b.n	8002af6 <_svfiprintf_r+0x182>
 8002b14:	ab03      	add	r3, sp, #12
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	4622      	mov	r2, r4
 8002b1a:	4b11      	ldr	r3, [pc, #68]	; (8002b60 <_svfiprintf_r+0x1ec>)
 8002b1c:	a904      	add	r1, sp, #16
 8002b1e:	4640      	mov	r0, r8
 8002b20:	f3af 8000 	nop.w
 8002b24:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002b28:	4681      	mov	r9, r0
 8002b2a:	d1d6      	bne.n	8002ada <_svfiprintf_r+0x166>
 8002b2c:	89a3      	ldrh	r3, [r4, #12]
 8002b2e:	065b      	lsls	r3, r3, #25
 8002b30:	f53f af35 	bmi.w	800299e <_svfiprintf_r+0x2a>
 8002b34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b36:	b01d      	add	sp, #116	; 0x74
 8002b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b3c:	ab03      	add	r3, sp, #12
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	4622      	mov	r2, r4
 8002b42:	4b07      	ldr	r3, [pc, #28]	; (8002b60 <_svfiprintf_r+0x1ec>)
 8002b44:	a904      	add	r1, sp, #16
 8002b46:	4640      	mov	r0, r8
 8002b48:	f000 f882 	bl	8002c50 <_printf_i>
 8002b4c:	e7ea      	b.n	8002b24 <_svfiprintf_r+0x1b0>
 8002b4e:	bf00      	nop
 8002b50:	0800311c 	.word	0x0800311c
 8002b54:	08003122 	.word	0x08003122
 8002b58:	08003126 	.word	0x08003126
 8002b5c:	00000000 	.word	0x00000000
 8002b60:	080028c1 	.word	0x080028c1

08002b64 <_printf_common>:
 8002b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b68:	4691      	mov	r9, r2
 8002b6a:	461f      	mov	r7, r3
 8002b6c:	688a      	ldr	r2, [r1, #8]
 8002b6e:	690b      	ldr	r3, [r1, #16]
 8002b70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b74:	4293      	cmp	r3, r2
 8002b76:	bfb8      	it	lt
 8002b78:	4613      	movlt	r3, r2
 8002b7a:	f8c9 3000 	str.w	r3, [r9]
 8002b7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b82:	4606      	mov	r6, r0
 8002b84:	460c      	mov	r4, r1
 8002b86:	b112      	cbz	r2, 8002b8e <_printf_common+0x2a>
 8002b88:	3301      	adds	r3, #1
 8002b8a:	f8c9 3000 	str.w	r3, [r9]
 8002b8e:	6823      	ldr	r3, [r4, #0]
 8002b90:	0699      	lsls	r1, r3, #26
 8002b92:	bf42      	ittt	mi
 8002b94:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002b98:	3302      	addmi	r3, #2
 8002b9a:	f8c9 3000 	strmi.w	r3, [r9]
 8002b9e:	6825      	ldr	r5, [r4, #0]
 8002ba0:	f015 0506 	ands.w	r5, r5, #6
 8002ba4:	d107      	bne.n	8002bb6 <_printf_common+0x52>
 8002ba6:	f104 0a19 	add.w	sl, r4, #25
 8002baa:	68e3      	ldr	r3, [r4, #12]
 8002bac:	f8d9 2000 	ldr.w	r2, [r9]
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	42ab      	cmp	r3, r5
 8002bb4:	dc28      	bgt.n	8002c08 <_printf_common+0xa4>
 8002bb6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002bba:	6822      	ldr	r2, [r4, #0]
 8002bbc:	3300      	adds	r3, #0
 8002bbe:	bf18      	it	ne
 8002bc0:	2301      	movne	r3, #1
 8002bc2:	0692      	lsls	r2, r2, #26
 8002bc4:	d42d      	bmi.n	8002c22 <_printf_common+0xbe>
 8002bc6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002bca:	4639      	mov	r1, r7
 8002bcc:	4630      	mov	r0, r6
 8002bce:	47c0      	blx	r8
 8002bd0:	3001      	adds	r0, #1
 8002bd2:	d020      	beq.n	8002c16 <_printf_common+0xb2>
 8002bd4:	6823      	ldr	r3, [r4, #0]
 8002bd6:	68e5      	ldr	r5, [r4, #12]
 8002bd8:	f8d9 2000 	ldr.w	r2, [r9]
 8002bdc:	f003 0306 	and.w	r3, r3, #6
 8002be0:	2b04      	cmp	r3, #4
 8002be2:	bf08      	it	eq
 8002be4:	1aad      	subeq	r5, r5, r2
 8002be6:	68a3      	ldr	r3, [r4, #8]
 8002be8:	6922      	ldr	r2, [r4, #16]
 8002bea:	bf0c      	ite	eq
 8002bec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002bf0:	2500      	movne	r5, #0
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	bfc4      	itt	gt
 8002bf6:	1a9b      	subgt	r3, r3, r2
 8002bf8:	18ed      	addgt	r5, r5, r3
 8002bfa:	f04f 0900 	mov.w	r9, #0
 8002bfe:	341a      	adds	r4, #26
 8002c00:	454d      	cmp	r5, r9
 8002c02:	d11a      	bne.n	8002c3a <_printf_common+0xd6>
 8002c04:	2000      	movs	r0, #0
 8002c06:	e008      	b.n	8002c1a <_printf_common+0xb6>
 8002c08:	2301      	movs	r3, #1
 8002c0a:	4652      	mov	r2, sl
 8002c0c:	4639      	mov	r1, r7
 8002c0e:	4630      	mov	r0, r6
 8002c10:	47c0      	blx	r8
 8002c12:	3001      	adds	r0, #1
 8002c14:	d103      	bne.n	8002c1e <_printf_common+0xba>
 8002c16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c1e:	3501      	adds	r5, #1
 8002c20:	e7c3      	b.n	8002baa <_printf_common+0x46>
 8002c22:	18e1      	adds	r1, r4, r3
 8002c24:	1c5a      	adds	r2, r3, #1
 8002c26:	2030      	movs	r0, #48	; 0x30
 8002c28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c2c:	4422      	add	r2, r4
 8002c2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c32:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c36:	3302      	adds	r3, #2
 8002c38:	e7c5      	b.n	8002bc6 <_printf_common+0x62>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	4622      	mov	r2, r4
 8002c3e:	4639      	mov	r1, r7
 8002c40:	4630      	mov	r0, r6
 8002c42:	47c0      	blx	r8
 8002c44:	3001      	adds	r0, #1
 8002c46:	d0e6      	beq.n	8002c16 <_printf_common+0xb2>
 8002c48:	f109 0901 	add.w	r9, r9, #1
 8002c4c:	e7d8      	b.n	8002c00 <_printf_common+0x9c>
	...

08002c50 <_printf_i>:
 8002c50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c54:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002c58:	460c      	mov	r4, r1
 8002c5a:	7e09      	ldrb	r1, [r1, #24]
 8002c5c:	b085      	sub	sp, #20
 8002c5e:	296e      	cmp	r1, #110	; 0x6e
 8002c60:	4617      	mov	r7, r2
 8002c62:	4606      	mov	r6, r0
 8002c64:	4698      	mov	r8, r3
 8002c66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002c68:	f000 80b3 	beq.w	8002dd2 <_printf_i+0x182>
 8002c6c:	d822      	bhi.n	8002cb4 <_printf_i+0x64>
 8002c6e:	2963      	cmp	r1, #99	; 0x63
 8002c70:	d036      	beq.n	8002ce0 <_printf_i+0x90>
 8002c72:	d80a      	bhi.n	8002c8a <_printf_i+0x3a>
 8002c74:	2900      	cmp	r1, #0
 8002c76:	f000 80b9 	beq.w	8002dec <_printf_i+0x19c>
 8002c7a:	2958      	cmp	r1, #88	; 0x58
 8002c7c:	f000 8083 	beq.w	8002d86 <_printf_i+0x136>
 8002c80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c84:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002c88:	e032      	b.n	8002cf0 <_printf_i+0xa0>
 8002c8a:	2964      	cmp	r1, #100	; 0x64
 8002c8c:	d001      	beq.n	8002c92 <_printf_i+0x42>
 8002c8e:	2969      	cmp	r1, #105	; 0x69
 8002c90:	d1f6      	bne.n	8002c80 <_printf_i+0x30>
 8002c92:	6820      	ldr	r0, [r4, #0]
 8002c94:	6813      	ldr	r3, [r2, #0]
 8002c96:	0605      	lsls	r5, r0, #24
 8002c98:	f103 0104 	add.w	r1, r3, #4
 8002c9c:	d52a      	bpl.n	8002cf4 <_printf_i+0xa4>
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6011      	str	r1, [r2, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	da03      	bge.n	8002cae <_printf_i+0x5e>
 8002ca6:	222d      	movs	r2, #45	; 0x2d
 8002ca8:	425b      	negs	r3, r3
 8002caa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002cae:	486f      	ldr	r0, [pc, #444]	; (8002e6c <_printf_i+0x21c>)
 8002cb0:	220a      	movs	r2, #10
 8002cb2:	e039      	b.n	8002d28 <_printf_i+0xd8>
 8002cb4:	2973      	cmp	r1, #115	; 0x73
 8002cb6:	f000 809d 	beq.w	8002df4 <_printf_i+0x1a4>
 8002cba:	d808      	bhi.n	8002cce <_printf_i+0x7e>
 8002cbc:	296f      	cmp	r1, #111	; 0x6f
 8002cbe:	d020      	beq.n	8002d02 <_printf_i+0xb2>
 8002cc0:	2970      	cmp	r1, #112	; 0x70
 8002cc2:	d1dd      	bne.n	8002c80 <_printf_i+0x30>
 8002cc4:	6823      	ldr	r3, [r4, #0]
 8002cc6:	f043 0320 	orr.w	r3, r3, #32
 8002cca:	6023      	str	r3, [r4, #0]
 8002ccc:	e003      	b.n	8002cd6 <_printf_i+0x86>
 8002cce:	2975      	cmp	r1, #117	; 0x75
 8002cd0:	d017      	beq.n	8002d02 <_printf_i+0xb2>
 8002cd2:	2978      	cmp	r1, #120	; 0x78
 8002cd4:	d1d4      	bne.n	8002c80 <_printf_i+0x30>
 8002cd6:	2378      	movs	r3, #120	; 0x78
 8002cd8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002cdc:	4864      	ldr	r0, [pc, #400]	; (8002e70 <_printf_i+0x220>)
 8002cde:	e055      	b.n	8002d8c <_printf_i+0x13c>
 8002ce0:	6813      	ldr	r3, [r2, #0]
 8002ce2:	1d19      	adds	r1, r3, #4
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6011      	str	r1, [r2, #0]
 8002ce8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002cec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e08c      	b.n	8002e0e <_printf_i+0x1be>
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6011      	str	r1, [r2, #0]
 8002cf8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002cfc:	bf18      	it	ne
 8002cfe:	b21b      	sxthne	r3, r3
 8002d00:	e7cf      	b.n	8002ca2 <_printf_i+0x52>
 8002d02:	6813      	ldr	r3, [r2, #0]
 8002d04:	6825      	ldr	r5, [r4, #0]
 8002d06:	1d18      	adds	r0, r3, #4
 8002d08:	6010      	str	r0, [r2, #0]
 8002d0a:	0628      	lsls	r0, r5, #24
 8002d0c:	d501      	bpl.n	8002d12 <_printf_i+0xc2>
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	e002      	b.n	8002d18 <_printf_i+0xc8>
 8002d12:	0668      	lsls	r0, r5, #25
 8002d14:	d5fb      	bpl.n	8002d0e <_printf_i+0xbe>
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	4854      	ldr	r0, [pc, #336]	; (8002e6c <_printf_i+0x21c>)
 8002d1a:	296f      	cmp	r1, #111	; 0x6f
 8002d1c:	bf14      	ite	ne
 8002d1e:	220a      	movne	r2, #10
 8002d20:	2208      	moveq	r2, #8
 8002d22:	2100      	movs	r1, #0
 8002d24:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d28:	6865      	ldr	r5, [r4, #4]
 8002d2a:	60a5      	str	r5, [r4, #8]
 8002d2c:	2d00      	cmp	r5, #0
 8002d2e:	f2c0 8095 	blt.w	8002e5c <_printf_i+0x20c>
 8002d32:	6821      	ldr	r1, [r4, #0]
 8002d34:	f021 0104 	bic.w	r1, r1, #4
 8002d38:	6021      	str	r1, [r4, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d13d      	bne.n	8002dba <_printf_i+0x16a>
 8002d3e:	2d00      	cmp	r5, #0
 8002d40:	f040 808e 	bne.w	8002e60 <_printf_i+0x210>
 8002d44:	4665      	mov	r5, ip
 8002d46:	2a08      	cmp	r2, #8
 8002d48:	d10b      	bne.n	8002d62 <_printf_i+0x112>
 8002d4a:	6823      	ldr	r3, [r4, #0]
 8002d4c:	07db      	lsls	r3, r3, #31
 8002d4e:	d508      	bpl.n	8002d62 <_printf_i+0x112>
 8002d50:	6923      	ldr	r3, [r4, #16]
 8002d52:	6862      	ldr	r2, [r4, #4]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	bfde      	ittt	le
 8002d58:	2330      	movle	r3, #48	; 0x30
 8002d5a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002d5e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002d62:	ebac 0305 	sub.w	r3, ip, r5
 8002d66:	6123      	str	r3, [r4, #16]
 8002d68:	f8cd 8000 	str.w	r8, [sp]
 8002d6c:	463b      	mov	r3, r7
 8002d6e:	aa03      	add	r2, sp, #12
 8002d70:	4621      	mov	r1, r4
 8002d72:	4630      	mov	r0, r6
 8002d74:	f7ff fef6 	bl	8002b64 <_printf_common>
 8002d78:	3001      	adds	r0, #1
 8002d7a:	d14d      	bne.n	8002e18 <_printf_i+0x1c8>
 8002d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d80:	b005      	add	sp, #20
 8002d82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d86:	4839      	ldr	r0, [pc, #228]	; (8002e6c <_printf_i+0x21c>)
 8002d88:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002d8c:	6813      	ldr	r3, [r2, #0]
 8002d8e:	6821      	ldr	r1, [r4, #0]
 8002d90:	1d1d      	adds	r5, r3, #4
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6015      	str	r5, [r2, #0]
 8002d96:	060a      	lsls	r2, r1, #24
 8002d98:	d50b      	bpl.n	8002db2 <_printf_i+0x162>
 8002d9a:	07ca      	lsls	r2, r1, #31
 8002d9c:	bf44      	itt	mi
 8002d9e:	f041 0120 	orrmi.w	r1, r1, #32
 8002da2:	6021      	strmi	r1, [r4, #0]
 8002da4:	b91b      	cbnz	r3, 8002dae <_printf_i+0x15e>
 8002da6:	6822      	ldr	r2, [r4, #0]
 8002da8:	f022 0220 	bic.w	r2, r2, #32
 8002dac:	6022      	str	r2, [r4, #0]
 8002dae:	2210      	movs	r2, #16
 8002db0:	e7b7      	b.n	8002d22 <_printf_i+0xd2>
 8002db2:	064d      	lsls	r5, r1, #25
 8002db4:	bf48      	it	mi
 8002db6:	b29b      	uxthmi	r3, r3
 8002db8:	e7ef      	b.n	8002d9a <_printf_i+0x14a>
 8002dba:	4665      	mov	r5, ip
 8002dbc:	fbb3 f1f2 	udiv	r1, r3, r2
 8002dc0:	fb02 3311 	mls	r3, r2, r1, r3
 8002dc4:	5cc3      	ldrb	r3, [r0, r3]
 8002dc6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002dca:	460b      	mov	r3, r1
 8002dcc:	2900      	cmp	r1, #0
 8002dce:	d1f5      	bne.n	8002dbc <_printf_i+0x16c>
 8002dd0:	e7b9      	b.n	8002d46 <_printf_i+0xf6>
 8002dd2:	6813      	ldr	r3, [r2, #0]
 8002dd4:	6825      	ldr	r5, [r4, #0]
 8002dd6:	6961      	ldr	r1, [r4, #20]
 8002dd8:	1d18      	adds	r0, r3, #4
 8002dda:	6010      	str	r0, [r2, #0]
 8002ddc:	0628      	lsls	r0, r5, #24
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	d501      	bpl.n	8002de6 <_printf_i+0x196>
 8002de2:	6019      	str	r1, [r3, #0]
 8002de4:	e002      	b.n	8002dec <_printf_i+0x19c>
 8002de6:	066a      	lsls	r2, r5, #25
 8002de8:	d5fb      	bpl.n	8002de2 <_printf_i+0x192>
 8002dea:	8019      	strh	r1, [r3, #0]
 8002dec:	2300      	movs	r3, #0
 8002dee:	6123      	str	r3, [r4, #16]
 8002df0:	4665      	mov	r5, ip
 8002df2:	e7b9      	b.n	8002d68 <_printf_i+0x118>
 8002df4:	6813      	ldr	r3, [r2, #0]
 8002df6:	1d19      	adds	r1, r3, #4
 8002df8:	6011      	str	r1, [r2, #0]
 8002dfa:	681d      	ldr	r5, [r3, #0]
 8002dfc:	6862      	ldr	r2, [r4, #4]
 8002dfe:	2100      	movs	r1, #0
 8002e00:	4628      	mov	r0, r5
 8002e02:	f7fd f9e5 	bl	80001d0 <memchr>
 8002e06:	b108      	cbz	r0, 8002e0c <_printf_i+0x1bc>
 8002e08:	1b40      	subs	r0, r0, r5
 8002e0a:	6060      	str	r0, [r4, #4]
 8002e0c:	6863      	ldr	r3, [r4, #4]
 8002e0e:	6123      	str	r3, [r4, #16]
 8002e10:	2300      	movs	r3, #0
 8002e12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e16:	e7a7      	b.n	8002d68 <_printf_i+0x118>
 8002e18:	6923      	ldr	r3, [r4, #16]
 8002e1a:	462a      	mov	r2, r5
 8002e1c:	4639      	mov	r1, r7
 8002e1e:	4630      	mov	r0, r6
 8002e20:	47c0      	blx	r8
 8002e22:	3001      	adds	r0, #1
 8002e24:	d0aa      	beq.n	8002d7c <_printf_i+0x12c>
 8002e26:	6823      	ldr	r3, [r4, #0]
 8002e28:	079b      	lsls	r3, r3, #30
 8002e2a:	d413      	bmi.n	8002e54 <_printf_i+0x204>
 8002e2c:	68e0      	ldr	r0, [r4, #12]
 8002e2e:	9b03      	ldr	r3, [sp, #12]
 8002e30:	4298      	cmp	r0, r3
 8002e32:	bfb8      	it	lt
 8002e34:	4618      	movlt	r0, r3
 8002e36:	e7a3      	b.n	8002d80 <_printf_i+0x130>
 8002e38:	2301      	movs	r3, #1
 8002e3a:	464a      	mov	r2, r9
 8002e3c:	4639      	mov	r1, r7
 8002e3e:	4630      	mov	r0, r6
 8002e40:	47c0      	blx	r8
 8002e42:	3001      	adds	r0, #1
 8002e44:	d09a      	beq.n	8002d7c <_printf_i+0x12c>
 8002e46:	3501      	adds	r5, #1
 8002e48:	68e3      	ldr	r3, [r4, #12]
 8002e4a:	9a03      	ldr	r2, [sp, #12]
 8002e4c:	1a9b      	subs	r3, r3, r2
 8002e4e:	42ab      	cmp	r3, r5
 8002e50:	dcf2      	bgt.n	8002e38 <_printf_i+0x1e8>
 8002e52:	e7eb      	b.n	8002e2c <_printf_i+0x1dc>
 8002e54:	2500      	movs	r5, #0
 8002e56:	f104 0919 	add.w	r9, r4, #25
 8002e5a:	e7f5      	b.n	8002e48 <_printf_i+0x1f8>
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1ac      	bne.n	8002dba <_printf_i+0x16a>
 8002e60:	7803      	ldrb	r3, [r0, #0]
 8002e62:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e66:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e6a:	e76c      	b.n	8002d46 <_printf_i+0xf6>
 8002e6c:	0800312d 	.word	0x0800312d
 8002e70:	0800313e 	.word	0x0800313e

08002e74 <memcpy>:
 8002e74:	b510      	push	{r4, lr}
 8002e76:	1e43      	subs	r3, r0, #1
 8002e78:	440a      	add	r2, r1
 8002e7a:	4291      	cmp	r1, r2
 8002e7c:	d100      	bne.n	8002e80 <memcpy+0xc>
 8002e7e:	bd10      	pop	{r4, pc}
 8002e80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e88:	e7f7      	b.n	8002e7a <memcpy+0x6>

08002e8a <memmove>:
 8002e8a:	4288      	cmp	r0, r1
 8002e8c:	b510      	push	{r4, lr}
 8002e8e:	eb01 0302 	add.w	r3, r1, r2
 8002e92:	d807      	bhi.n	8002ea4 <memmove+0x1a>
 8002e94:	1e42      	subs	r2, r0, #1
 8002e96:	4299      	cmp	r1, r3
 8002e98:	d00a      	beq.n	8002eb0 <memmove+0x26>
 8002e9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e9e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002ea2:	e7f8      	b.n	8002e96 <memmove+0xc>
 8002ea4:	4283      	cmp	r3, r0
 8002ea6:	d9f5      	bls.n	8002e94 <memmove+0xa>
 8002ea8:	1881      	adds	r1, r0, r2
 8002eaa:	1ad2      	subs	r2, r2, r3
 8002eac:	42d3      	cmn	r3, r2
 8002eae:	d100      	bne.n	8002eb2 <memmove+0x28>
 8002eb0:	bd10      	pop	{r4, pc}
 8002eb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002eb6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002eba:	e7f7      	b.n	8002eac <memmove+0x22>

08002ebc <_free_r>:
 8002ebc:	b538      	push	{r3, r4, r5, lr}
 8002ebe:	4605      	mov	r5, r0
 8002ec0:	2900      	cmp	r1, #0
 8002ec2:	d045      	beq.n	8002f50 <_free_r+0x94>
 8002ec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ec8:	1f0c      	subs	r4, r1, #4
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	bfb8      	it	lt
 8002ece:	18e4      	addlt	r4, r4, r3
 8002ed0:	f000 f8d2 	bl	8003078 <__malloc_lock>
 8002ed4:	4a1f      	ldr	r2, [pc, #124]	; (8002f54 <_free_r+0x98>)
 8002ed6:	6813      	ldr	r3, [r2, #0]
 8002ed8:	4610      	mov	r0, r2
 8002eda:	b933      	cbnz	r3, 8002eea <_free_r+0x2e>
 8002edc:	6063      	str	r3, [r4, #4]
 8002ede:	6014      	str	r4, [r2, #0]
 8002ee0:	4628      	mov	r0, r5
 8002ee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ee6:	f000 b8c8 	b.w	800307a <__malloc_unlock>
 8002eea:	42a3      	cmp	r3, r4
 8002eec:	d90c      	bls.n	8002f08 <_free_r+0x4c>
 8002eee:	6821      	ldr	r1, [r4, #0]
 8002ef0:	1862      	adds	r2, r4, r1
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	bf04      	itt	eq
 8002ef6:	681a      	ldreq	r2, [r3, #0]
 8002ef8:	685b      	ldreq	r3, [r3, #4]
 8002efa:	6063      	str	r3, [r4, #4]
 8002efc:	bf04      	itt	eq
 8002efe:	1852      	addeq	r2, r2, r1
 8002f00:	6022      	streq	r2, [r4, #0]
 8002f02:	6004      	str	r4, [r0, #0]
 8002f04:	e7ec      	b.n	8002ee0 <_free_r+0x24>
 8002f06:	4613      	mov	r3, r2
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	b10a      	cbz	r2, 8002f10 <_free_r+0x54>
 8002f0c:	42a2      	cmp	r2, r4
 8002f0e:	d9fa      	bls.n	8002f06 <_free_r+0x4a>
 8002f10:	6819      	ldr	r1, [r3, #0]
 8002f12:	1858      	adds	r0, r3, r1
 8002f14:	42a0      	cmp	r0, r4
 8002f16:	d10b      	bne.n	8002f30 <_free_r+0x74>
 8002f18:	6820      	ldr	r0, [r4, #0]
 8002f1a:	4401      	add	r1, r0
 8002f1c:	1858      	adds	r0, r3, r1
 8002f1e:	4282      	cmp	r2, r0
 8002f20:	6019      	str	r1, [r3, #0]
 8002f22:	d1dd      	bne.n	8002ee0 <_free_r+0x24>
 8002f24:	6810      	ldr	r0, [r2, #0]
 8002f26:	6852      	ldr	r2, [r2, #4]
 8002f28:	605a      	str	r2, [r3, #4]
 8002f2a:	4401      	add	r1, r0
 8002f2c:	6019      	str	r1, [r3, #0]
 8002f2e:	e7d7      	b.n	8002ee0 <_free_r+0x24>
 8002f30:	d902      	bls.n	8002f38 <_free_r+0x7c>
 8002f32:	230c      	movs	r3, #12
 8002f34:	602b      	str	r3, [r5, #0]
 8002f36:	e7d3      	b.n	8002ee0 <_free_r+0x24>
 8002f38:	6820      	ldr	r0, [r4, #0]
 8002f3a:	1821      	adds	r1, r4, r0
 8002f3c:	428a      	cmp	r2, r1
 8002f3e:	bf04      	itt	eq
 8002f40:	6811      	ldreq	r1, [r2, #0]
 8002f42:	6852      	ldreq	r2, [r2, #4]
 8002f44:	6062      	str	r2, [r4, #4]
 8002f46:	bf04      	itt	eq
 8002f48:	1809      	addeq	r1, r1, r0
 8002f4a:	6021      	streq	r1, [r4, #0]
 8002f4c:	605c      	str	r4, [r3, #4]
 8002f4e:	e7c7      	b.n	8002ee0 <_free_r+0x24>
 8002f50:	bd38      	pop	{r3, r4, r5, pc}
 8002f52:	bf00      	nop
 8002f54:	2000013c 	.word	0x2000013c

08002f58 <_malloc_r>:
 8002f58:	b570      	push	{r4, r5, r6, lr}
 8002f5a:	1ccd      	adds	r5, r1, #3
 8002f5c:	f025 0503 	bic.w	r5, r5, #3
 8002f60:	3508      	adds	r5, #8
 8002f62:	2d0c      	cmp	r5, #12
 8002f64:	bf38      	it	cc
 8002f66:	250c      	movcc	r5, #12
 8002f68:	2d00      	cmp	r5, #0
 8002f6a:	4606      	mov	r6, r0
 8002f6c:	db01      	blt.n	8002f72 <_malloc_r+0x1a>
 8002f6e:	42a9      	cmp	r1, r5
 8002f70:	d903      	bls.n	8002f7a <_malloc_r+0x22>
 8002f72:	230c      	movs	r3, #12
 8002f74:	6033      	str	r3, [r6, #0]
 8002f76:	2000      	movs	r0, #0
 8002f78:	bd70      	pop	{r4, r5, r6, pc}
 8002f7a:	f000 f87d 	bl	8003078 <__malloc_lock>
 8002f7e:	4a21      	ldr	r2, [pc, #132]	; (8003004 <_malloc_r+0xac>)
 8002f80:	6814      	ldr	r4, [r2, #0]
 8002f82:	4621      	mov	r1, r4
 8002f84:	b991      	cbnz	r1, 8002fac <_malloc_r+0x54>
 8002f86:	4c20      	ldr	r4, [pc, #128]	; (8003008 <_malloc_r+0xb0>)
 8002f88:	6823      	ldr	r3, [r4, #0]
 8002f8a:	b91b      	cbnz	r3, 8002f94 <_malloc_r+0x3c>
 8002f8c:	4630      	mov	r0, r6
 8002f8e:	f000 f863 	bl	8003058 <_sbrk_r>
 8002f92:	6020      	str	r0, [r4, #0]
 8002f94:	4629      	mov	r1, r5
 8002f96:	4630      	mov	r0, r6
 8002f98:	f000 f85e 	bl	8003058 <_sbrk_r>
 8002f9c:	1c43      	adds	r3, r0, #1
 8002f9e:	d124      	bne.n	8002fea <_malloc_r+0x92>
 8002fa0:	230c      	movs	r3, #12
 8002fa2:	6033      	str	r3, [r6, #0]
 8002fa4:	4630      	mov	r0, r6
 8002fa6:	f000 f868 	bl	800307a <__malloc_unlock>
 8002faa:	e7e4      	b.n	8002f76 <_malloc_r+0x1e>
 8002fac:	680b      	ldr	r3, [r1, #0]
 8002fae:	1b5b      	subs	r3, r3, r5
 8002fb0:	d418      	bmi.n	8002fe4 <_malloc_r+0x8c>
 8002fb2:	2b0b      	cmp	r3, #11
 8002fb4:	d90f      	bls.n	8002fd6 <_malloc_r+0x7e>
 8002fb6:	600b      	str	r3, [r1, #0]
 8002fb8:	50cd      	str	r5, [r1, r3]
 8002fba:	18cc      	adds	r4, r1, r3
 8002fbc:	4630      	mov	r0, r6
 8002fbe:	f000 f85c 	bl	800307a <__malloc_unlock>
 8002fc2:	f104 000b 	add.w	r0, r4, #11
 8002fc6:	1d23      	adds	r3, r4, #4
 8002fc8:	f020 0007 	bic.w	r0, r0, #7
 8002fcc:	1ac3      	subs	r3, r0, r3
 8002fce:	d0d3      	beq.n	8002f78 <_malloc_r+0x20>
 8002fd0:	425a      	negs	r2, r3
 8002fd2:	50e2      	str	r2, [r4, r3]
 8002fd4:	e7d0      	b.n	8002f78 <_malloc_r+0x20>
 8002fd6:	428c      	cmp	r4, r1
 8002fd8:	684b      	ldr	r3, [r1, #4]
 8002fda:	bf16      	itet	ne
 8002fdc:	6063      	strne	r3, [r4, #4]
 8002fde:	6013      	streq	r3, [r2, #0]
 8002fe0:	460c      	movne	r4, r1
 8002fe2:	e7eb      	b.n	8002fbc <_malloc_r+0x64>
 8002fe4:	460c      	mov	r4, r1
 8002fe6:	6849      	ldr	r1, [r1, #4]
 8002fe8:	e7cc      	b.n	8002f84 <_malloc_r+0x2c>
 8002fea:	1cc4      	adds	r4, r0, #3
 8002fec:	f024 0403 	bic.w	r4, r4, #3
 8002ff0:	42a0      	cmp	r0, r4
 8002ff2:	d005      	beq.n	8003000 <_malloc_r+0xa8>
 8002ff4:	1a21      	subs	r1, r4, r0
 8002ff6:	4630      	mov	r0, r6
 8002ff8:	f000 f82e 	bl	8003058 <_sbrk_r>
 8002ffc:	3001      	adds	r0, #1
 8002ffe:	d0cf      	beq.n	8002fa0 <_malloc_r+0x48>
 8003000:	6025      	str	r5, [r4, #0]
 8003002:	e7db      	b.n	8002fbc <_malloc_r+0x64>
 8003004:	2000013c 	.word	0x2000013c
 8003008:	20000140 	.word	0x20000140

0800300c <_realloc_r>:
 800300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300e:	4607      	mov	r7, r0
 8003010:	4614      	mov	r4, r2
 8003012:	460e      	mov	r6, r1
 8003014:	b921      	cbnz	r1, 8003020 <_realloc_r+0x14>
 8003016:	4611      	mov	r1, r2
 8003018:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800301c:	f7ff bf9c 	b.w	8002f58 <_malloc_r>
 8003020:	b922      	cbnz	r2, 800302c <_realloc_r+0x20>
 8003022:	f7ff ff4b 	bl	8002ebc <_free_r>
 8003026:	4625      	mov	r5, r4
 8003028:	4628      	mov	r0, r5
 800302a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800302c:	f000 f826 	bl	800307c <_malloc_usable_size_r>
 8003030:	42a0      	cmp	r0, r4
 8003032:	d20f      	bcs.n	8003054 <_realloc_r+0x48>
 8003034:	4621      	mov	r1, r4
 8003036:	4638      	mov	r0, r7
 8003038:	f7ff ff8e 	bl	8002f58 <_malloc_r>
 800303c:	4605      	mov	r5, r0
 800303e:	2800      	cmp	r0, #0
 8003040:	d0f2      	beq.n	8003028 <_realloc_r+0x1c>
 8003042:	4631      	mov	r1, r6
 8003044:	4622      	mov	r2, r4
 8003046:	f7ff ff15 	bl	8002e74 <memcpy>
 800304a:	4631      	mov	r1, r6
 800304c:	4638      	mov	r0, r7
 800304e:	f7ff ff35 	bl	8002ebc <_free_r>
 8003052:	e7e9      	b.n	8003028 <_realloc_r+0x1c>
 8003054:	4635      	mov	r5, r6
 8003056:	e7e7      	b.n	8003028 <_realloc_r+0x1c>

08003058 <_sbrk_r>:
 8003058:	b538      	push	{r3, r4, r5, lr}
 800305a:	4c06      	ldr	r4, [pc, #24]	; (8003074 <_sbrk_r+0x1c>)
 800305c:	2300      	movs	r3, #0
 800305e:	4605      	mov	r5, r0
 8003060:	4608      	mov	r0, r1
 8003062:	6023      	str	r3, [r4, #0]
 8003064:	f7fd fb8e 	bl	8000784 <_sbrk>
 8003068:	1c43      	adds	r3, r0, #1
 800306a:	d102      	bne.n	8003072 <_sbrk_r+0x1a>
 800306c:	6823      	ldr	r3, [r4, #0]
 800306e:	b103      	cbz	r3, 8003072 <_sbrk_r+0x1a>
 8003070:	602b      	str	r3, [r5, #0]
 8003072:	bd38      	pop	{r3, r4, r5, pc}
 8003074:	200001c8 	.word	0x200001c8

08003078 <__malloc_lock>:
 8003078:	4770      	bx	lr

0800307a <__malloc_unlock>:
 800307a:	4770      	bx	lr

0800307c <_malloc_usable_size_r>:
 800307c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003080:	1f18      	subs	r0, r3, #4
 8003082:	2b00      	cmp	r3, #0
 8003084:	bfbc      	itt	lt
 8003086:	580b      	ldrlt	r3, [r1, r0]
 8003088:	18c0      	addlt	r0, r0, r3
 800308a:	4770      	bx	lr

0800308c <_init>:
 800308c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800308e:	bf00      	nop
 8003090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003092:	bc08      	pop	{r3}
 8003094:	469e      	mov	lr, r3
 8003096:	4770      	bx	lr

08003098 <_fini>:
 8003098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309a:	bf00      	nop
 800309c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800309e:	bc08      	pop	{r3}
 80030a0:	469e      	mov	lr, r3
 80030a2:	4770      	bx	lr
